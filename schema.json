{
  "openapi": "3.1.0",
  "info": {
    "title": "EGP API",
    "description": "This is the parent API for all EGP APIs. If you are looking for the EGP API, please go to https://api.egp.scale.com/docs.",
    "contact": {
      "name": "Scale Generative AI Platform",
      "url": "https://scale.com/genai-platform"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.egp.scale.com"
    }
  ],
  "paths": {
    "/v1/knowledge-bases/{knowledge_base_id}/artifacts": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Tracked Artifacts",
        "description": "### Description\nList all artifacts tracked by a knowledge base.\n\n### Details\nThis API can be used to list all artifacts that are currently tracked in a knowledge base.         This API will return the details of all artifacts including their IDs, names, the source they         originated from, their current upload statuses, and the timestamps for their creation and\nlast-updated time.\n\nThis list should be consistent with the state of the data source at the time of start of the         latest upload. If the state is not consistent, create a new upload to update the knowledge         base to reflect the latest state of the data source.",
        "operationId": "GET-V1-/knowledge-bases/{knowledge_base_id}/artifacts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactUploadStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting",
              "title": "Status"
            },
            "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseV2ArtifactsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user-info": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User info",
        "description": "Get basic information for the logged in user making this request including preferences.",
        "operationId": "GET-V4-/user-info",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/user-preferences": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user info",
        "description": "Update preferences for the logged in user making this request.",
        "operationId": "PATCH-V4-/user-preferences",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferencesUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferencesUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get basic information for a user. The requester must belong         to the same organization as the target user and be         an admin or manager of an account the target user belongs to.",
        "operationId": "GET-V4-/users/{user_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoBase"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create account",
        "description": "Create a new account that with yourself as the admin.",
        "operationId": "POST-V4-/accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/organizations/by-domain/{domain}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get organization",
        "description": "Get organization by domain name",
        "operationId": "GET-V4-/organizations/by-domain/{domain}",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrganizationByDomainResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Knowledge Base",
        "description": "### Description\nCreates an EGP knowledge base.\n\n### Details\nA knowledge base is a storage device for all data that needs to be accessible to EGP models.         Users can upload data from a variety of data sources into a knowledge base, and then query the         knowledge base for chunks that are semantically relevant to the query.\n\nEvery knowledge base must be associated with a fixed embedding model. This embedding model         will be used to embed all data that is stored in the knowledge base. The embedding model         cannot be changed once the knowledge base is created. Only the embedding models in the         dropdown menu below are supported.\n\n#### Differences from V1\n- V1 data ingestion consisted of knowledge bases, vector stores, and data connectors.         V1 Knowledge bases interacted with natural language, V1 vector stores interacted with         chunks and embeddings, and V1 data connectors set up automatic ingestion pipelines with third         party data sources.\n- In V2, all data ingestion is done through knowledge bases. Low level configuration such as         chunking strategies and data sources are now handled by this unified knowledge base v2\nupload API.\n- The way data is stores in V2 allows for better observability on the ingestion progress and         content of the knowledge base.\n- Reliability and scalability is also improved via distributed temporal workflows.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V2-/v2/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Knowledge Bases",
        "description": "### Description\nLists all knowledge bases owned by the authorized user.\n\n### Details\nThis API can be used to list all knowledge bases that have been created by the user.         This API will return the details of all knowledge bases including their IDs, names, the         embedding models they use, any metadata associated with the knowledge bases, and the         timestamps for their creation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V2-/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by account_id",
              "title": "Account Id"
            },
            "description": "Optional search by account_id"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBasesResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Knowledge Base",
        "description": "### Description\nGets the details of a knowledge base.\n\n### Details\nThis API can be used to get information about a single knowledge base by ID. To use this API,         pass in the `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\nThis API will return the details of a knowledge base including its ID, name, the embedding         model it uses, any metadata associated with the knowledge base, and the timestamps for its\ncreation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V2-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "include_artifacts_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Optional query parameter to include a count of artifacts by status",
              "default": false,
              "title": "Include Artifacts Status"
            },
            "description": "Optional query parameter to include a count of artifacts by status"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseItemV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Knowledge Base",
        "description": "### Description\nDeletes a knowledge base.\n\n### Details\nThis API can be used to delete a knowledge base by ID. To use this API, pass in the         `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "DELETE-V2-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/chunks": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Chunks",
        "description": "### Description\nGet chunks from a knowledge base using chunk IDs or a matching metadata field. This API will query from the Vector Database using\nthe passed in filters and optionally can return the embeddings.\n\n    ### Details\n    This API can be used to get a list of chunks from a knowledge base. Given a chunk id,             a metadata field and value, or both, matching chunks are searched for in the knowledge base             given by knowledge base id.",
        "operationId": "GET-V2-/v2/knowledge-bases/{knowledge_base_id}/chunks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by chunk_id",
              "title": "Chunk Id"
            },
            "description": "Optional search by chunk_id"
          },
          {
            "name": "metadata_filters",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by metadata fields, encoded as a JSON object",
              "title": "Metadata Filters"
            },
            "description": "Optional search by metadata fields, encoded as a JSON object"
          },
          {
            "name": "max_chunks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 2000,
              "minimum": 1,
              "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000.",
              "default": 10,
              "title": "Max Chunks"
            },
            "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChunksResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/query": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Query Relevant Chunks",
        "description": "### Description\nQuery a knowledge base for text chunks that are most semantically relevant to the query.\n\n### Details\nGiven a query expressed as an embedding, this API runs a similarity search amongst the         embeddings indexed in the knowledge base to find the most relevant chunk embeddings. To use         this API, specify the `knowledge_base_id` of the knowledge base you want to query, pass in         the natural language `query` that you want to search for, specify the value `top_k`,         which is the number of similar chunks that will be returned, and specify whether you want         the returned chunks to `include_embeddings`.\n\nSimilarity search is used to efficiently find, retrieve, and rank chunks based on their         similarity to a given query, which is also expressed as an embedding. Similarity scores (         using the cosine similarity metric) are calculated between each chunk embedding and the         embedded query, and the chunks are ranked based on similarity score. The top-ranked chunks         are returned as the query results.\n\nWe are using the Hierarchical Navigable Small World (HNSW) algorithm to perform a k nearest         neighbors search in the vector space. This algorithm returns an estimate of the best k         nearest neighbors and is optimized for datasets with hundreds of thousands of vectors. You         can read more about the specifics of this algorithm [here](         https://opensearch.org/docs/1.0/search-plugins/knn/approximate-knn/).\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V2-/v2/knowledge-bases/{knowledge_base_id}/query",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/uploads": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Submit Upload Job",
        "operationId": "POST-V2-/v2/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Jobs",
        "description": "### Description\nList all uploads for a knowledge base.\n\n### Details\nThis API can be used to list all uploads that have been created for a knowledge base.         This API will return the details of all uploads including their IDs, their statuses, the         data source configs they use, the chunking strategy configs they use, and the timestamps for         their creation and last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V2-/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UploadJobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseV2UploadsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Job",
        "operationId": "GET-V2-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          },
          {
            "name": "include_artifact_list",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Artifact List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Cancel Upload Job",
        "operationId": "POST-V2-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/artifacts": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Tracked Artifacts",
        "description": "### Description\nList all artifacts tracked by a knowledge base.\n\n### Details\nThis API can be used to list all artifacts that are currently tracked in a knowledge base.         This API will return the details of all artifacts including their IDs, names, the source they         originated from, their current upload statuses, and the timestamps for their creation and\nlast-updated time.\n\nThis list should be consistent with the state of the data source at the time of start of the         latest upload. If the state is not consistent, create a new upload to update the knowledge         base to reflect the latest state of the data source.",
        "operationId": "GET-V2-/knowledge-bases/{knowledge_base_id}/artifacts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactUploadStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting",
              "title": "Status"
            },
            "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseV2ArtifactsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Tracked Artifact Details",
        "description": "### Description\nGets the details of an artifact tracked by a knowledge base.\n\n### Details\nThis API can be used to get information about a single artifact by ID. This response will         contain much more detail about the artifact than show in the         [List Artifacts API](https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2)         call. To use this API, pass in the `knowledge_base_id` and `artifact_id` that were returned         from your [List Artifacts API](         https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2) call as path         parameters.\n\n#### Compatibility with V1\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V2-/v2/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2ArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Patch Artifact Information",
        "operationId": "PATCH-V2-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artifact"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Locally Stored Artifact",
        "operationId": "DELETE-V2-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Batch Delete Locally Stored Artifacts",
        "operationId": "POST-V2-/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/chunks/rank": {
      "post": {
        "tags": [
          "Chunks"
        ],
        "summary": "Rank Chunks",
        "description": "### Description\nSorts a list of text chunks by similarity against a given query string.\n\n### Details\nUse this API endpoint to rank which text chunks provide the most relevant responses to a         given a query string.\n\nThis is useful for stuffing chunks into a prompt where order may matter or for filtering out         less relevant chunks according to the ranking strategy. For example, this API may be useful         when doing retrieval augment generation (RAG). Sometimes vector store [similarity search](         https://scale-egp.readme.io/reference/query_vector_store) does not always return the best         ranking of text chunks, since this is heavily dependent on embedding generation. This API         endpoint can act as a post-processing step to re-sort the given chunks using more complex         strategies that may outperform vector search, and then filter only the top-k most relevant         chunks to stuff into the prompt for RAG.\n\n### Restrictions and Limits\nRanking can be a very intensive and slow process depending on methodology where duration         scales with number of chunks. For best performance, we recommend ranking less than 640 chunks         at a time, and you may see a decrease in performance as the number of chunks ranked increases.",
        "operationId": "POST-V2-/v2/chunks/rank",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChunksRankRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunksRankResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/agents/execute": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Execute Agent",
        "description": "### Description\nExecutes one Agent inference step. Given a list of messages and a list of tools to ask         for help from, the Agent will either respond with a final answer directly or ask the user to         execute a tool to provide more information.\n\n### Details\nAn Agent is a component that utilizes a Language Model (LLM) as an interpreter and decision         maker. Unlike asking an LLM for a direct response, communicating with an agent consists of a         running dialogue where an agent can optionally ask the user to execute specialized tools for         specific tasks, such as calculations, web searches, or accessing custom data from private         knowledge bases.\n\nAn agent is designed to be stateless, emitting outputs one step at a time. This means that         client-side applications are responsible for managing message history, tool execution,         and responses. This grants users greater flexibility to write and execute custom tools         and maintain explicit control over their message history.\n\n#### Message Types\n- `User Message`: A message from the user to the agent.\n- `System Message`: An informational text message from the system to guide the agent. It is         not a user message or agent message because it did not come from either entity.\n- `Agent Message`: A message from the agent to the client. It will contain either a final         answer as `content` or a request for the user to execute a tool as a `tool_request`.\n- `Tool Message`: A message from the user to the agent that contains the output of a tool         execution. The tool message will be processed by the agent and the agent will respond with         either a final answer or another tool request.\n\n#### Agent Instructions\nInstructions are used to guide the agent's decision making process and output generation.\n\nGood prompt engineering is crucial to getting performant results from the agent. If you are         having trouble getting the agent to perform well, try writing more specific instructions         before trying more expensive techniques such as swapping in other models or finetuning the         underlying LLM.\n\nFor example, the default instructions we set for the agent are the following:\n\n> You are an AI assistant that helps users with their questions. You can answer questions         directly or acquire information from any of the attached tools to assist you. Always answer         the user's most recent query to the best of your knowledge.<br>\n> When asked about what tools are available, you must list each attached tool's name         and description. When asked about what you can do, mention that in addition to your normal         capabilities, you can also use the attached tools by listing their names and descriptions.         You cannot use any other tools other than the ones provided to you explicitly.\n\n\n### Restrictions and Limits\n**Message Limits**:\n  - The message list is not limited by length, but by the context limit of the underlying           language model. If you are getting an error regarding the underlying model's context           limit, try using a memory strategy to condense the input messages.\n\n**Model Restrictions**:\n  - Currently, only closed source models like GPT and Claude are supported due to the           limitations of open source models when it comes to tool selection, generating tool           arguments in valid JSON, and planning out multi-step tool execution. Specialized           fine-tuning will likely be required to make open source models compatible with agents.",
        "operationId": "POST-V2-/v2/agents/execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteAgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/completions": {
      "post": {
        "tags": [
          "Completions"
        ],
        "summary": "Create Completion",
        "description": "### Description\nGiven a user's input, runs LLM inference to produce the model's response.\n\n### Details\nLLM [completions](https://scale-egp.readme.io/docs/completions-1) have many use cases,         such as content summarization, question-answering, and text generation.\n\nThe `model` parameter determines which LLM will be used to generate the completion. Keep in         mind that different models have varying sizes, costs, and may perform differently across         different tasks.\n\nThe user input, commonly referred to as the \"prompt\", is a required field in the request         body. The quality of the model's response can vary greatly depending on the input prompt.         Good prompt engineering can significantly enhance the response quality. If you encounter         suboptimal results, consider writing more specific instructions or providing examples to the         LLM before trying more expensive techniques  such as swapping in other models or finetuning.\n\nBy default, the endpoint will return the entire response as one whole object. If you would         prefer to stream the completion in real-time, you can achieve this by setting the `stream`         flag to `true`.",
        "operationId": "POST-V2-/v2/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/chat-completions": {
      "post": {
        "tags": [
          "Chat Completions"
        ],
        "summary": "Create Chat Completion",
        "description": "### Description\nGiven a list of messages representing a conversation history, runs LLM inference to produce         the next message.\n\n### Details\nLike [completions](https://scale-egp.readme.io/docs/completions-1), [chat completions](         https://scale-egp.readme.io/docs/chat-completions-intro) involve an LLM's response to input.         However, chat completions take a conversation history as input, instead of a single prompt,         which enables the LLM to create responses that take past context into account.\n\n### Messages\nThe primary input to the LLM is a list of messages represented by the `messages` array,         which forms the conversation. The `messages` array must contain at least one `message` object. \nEach `message` object is attributed to a specific entity through its `role`. The available         roles are:\n   - `user`: Represents the human querying the model.            - `assistant`: Represents the model responding to user.            - `system`: Represents a non-user entity that provides information to guide the behavior            of the assistant.\n\nWhen the `role` of a `message` is set to `user`, `assistant`, or `system`, the `message` must         also contain a `content` field which is a string representing the actual text of the message         itself. Semantically, when the `role` is `user`, `content` contains the user's query. When         the `role` is `assistant`, `content` is the model's response to the user. When the `role` is         `system`, `content` represents the instruction for the assistant.\n\n### Instructions\nYou may provide instructions to the assistant by supplying by supplying `instructions` in the         HTTP request body or by specifying a `message` with `role` set to `system` in the `messages`         array. By convention, the system message should be the first message in the array. Do **not**         specify both an instruction and a system message in the `messages` array.",
        "operationId": "POST-V2-/v2/chat-completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Models",
        "operationId": "GET-V2-/models",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelsResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/models/{model_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get a Model with a specified id",
        "operationId": "GET-V2-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelItemV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete a Model with a specified ID",
        "operationId": "DELETE-V2-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteModelResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/question-sets/{question_set_id}": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Get Question Set",
        "operationId": "GET-V2-/v2/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetWithQuestions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Update Question Set",
        "description": "### Description\nUpdates a question set\n\n### Details\nThis API can be used to update the question set that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialQuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Delete Question Set",
        "description": "### Description\nDeletes a question set\n\n### Details\nThis API can be used to delete a question set by ID. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.",
        "operationId": "DELETE-V2-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/claim-task": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Claim Evaluation Task",
        "operationId": "POST-V2-/claim-task",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TaskORMTaskTypeEnum",
              "default": "EVALUATION_ANNOTATION"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ClaimTaskRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Post-V2-/Claim-Task"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/tasks/{task_id}": {
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation Task",
        "operationId": "PATCH-V2-/tasks/{task_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Patch-V2-/Tasks/{Task Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/contributor-metrics/{contributor_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Contributor Metrics",
        "operationId": "GET-V2-/contributor-metrics/{contributor_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "contributor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contributor Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ContributorMetricsResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get-V2-/Contributor-Metrics/{Contributor Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/contributor-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Contributor Metrics",
        "operationId": "GET-V2-/contributor-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContributorMetricsResponse"
                  },
                  "title": "Response Get-V2-/Contributor-Metrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/evaluation-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation Metrics",
        "operationId": "GET-V2-/evaluation-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-configs": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "List Evaluation Configs",
        "description": "### Description\nLists all evaluation configs accessible to the user.\n\n### Details\nThis API can be used to list evaluation configs. If a user has access to multiple accounts, all evaluation configs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationConfigResponse"
                  },
                  "title": "Response Get-V2-/Evaluation-Configs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Create Evaluation Config",
        "description": "### Description\nCreates a evaluation config\n\n### Details\nThis API can be used to create a evaluation config. To use this API, review the request schema and pass in all fields that are required to create a evaluation config.",
        "operationId": "POST-V2-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationConfigRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-configs/{evaluation_config_id}": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Get Evaluation Config",
        "description": "### Description\nGets the details of a evaluation config\n\n### Details\nThis API can be used to get information about a single evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Delete Evaluation Config",
        "description": "### Description\nDeletes a evaluation config\n\n### Details\nThis API can be used to delete a evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.",
        "operationId": "DELETE-V2-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Datasets",
        "description": "### Description\nLists all evaluation datasets accessible to the user.\n\n### Details\nThis API can be used to list evaluation datasets. If a user has access to multiple accounts, all evaluation datasets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
                  },
                  "title": "Response Get-V2-/Evaluation-Datasets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset",
        "description": "### Description\nCreates a evaluation dataset\n\n### Details\nThis API can be used to create a evaluation dataset. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset.",
        "operationId": "POST-V2-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset",
        "description": "### Description\n\nGets the details of a dataset.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Evaluation Dataset",
        "description": "### Description\nUpdates a evaluation dataset\n\n### Details\nThis API can be used to update the evaluation dataset that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePatchEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Evaluation Dataset",
        "description": "### Description\n\nDeletes the dataset, and all other entities associated with the dataset, such as test cases, evaluations and results.\n\n### Details\n\n**This is a permanent and destructive action that cannot be undone.**",
        "operationId": "DELETE-V2-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Dataset Versions",
        "description": "### Description\nLists all evaluation dataset versions accessible to the user.\n\n### Details\nThis API can be used to list evaluation dataset versions. If a user has access to multiple accounts, all evaluation dataset versions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                  },
                  "title": "Response Get-V2-/Evaluation-Datasets/{Evaluation Dataset Id}/Evaluation-Dataset-Versions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset Version",
        "description": "### Description\nCreates a evaluation dataset version\n\n### Details\nThis API can be used to create a evaluation dataset version. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset version.",
        "operationId": "POST-V2-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationDatasetVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset Version",
        "description": "### Description\nGets the details of a evaluation dataset version\n\n### Details\nThis API can be used to get information about a single evaluation dataset version by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset Version API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Test Cases",
        "description": "### Description\nList all test cases for a selected dataset.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V2-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Test Case",
        "description": "### Description\nCreate a test case for a selected dataset.",
        "operationId": "POST-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Batch Create Test Cases",
        "description": "### Description\nCreates a batch of test cases\n\n### Details\nThis API can be used to create multiple test cases so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test cases in the request body.",
        "operationId": "POST-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseVersionRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Post-V2-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Test Case",
        "description": "### Description\nUpdate a test case.",
        "operationId": "PATCH-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialTestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Test Case",
        "description": "### Description\nDelete a specified test case -- retaining older version belonging to older dataset versions.\n\n### Details\nThis request shouldn't be used when deleting due to compliance reasons. See Wipe action.",
        "operationId": "DELETE-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Historical Test Case",
        "description": "### Description\nGet the test case by its id for a specified dataset version.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get All Versions of Test Case",
        "description": "Get all versions of a Test Case by lineage ID.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V2-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/{Test Case Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Wipe Full History of Test Cases",
        "description": "### Description\nDelete a specified test case and remove all its history from past dataset versions too.",
        "operationId": "DELETE-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Historical Test Cases",
        "description": "### Description\nList all test cases for a specified dataset version.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V2-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/History/{Num}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/studio-projects": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "List Studio Projects",
        "description": "### Description\nLists all studio projects accessible to the user.\n\n### Details\nThis API can be used to list studio projects. If a user has access to multiple accounts, all studio projects from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudioProjectResponse"
                  },
                  "title": "Response Get-V2-/Studio-Projects"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Create Studio Project",
        "description": "### Description\nCreates a studio project\n\n### Details\nThis API can be used to create a studio project. To use this API, review the request schema and pass in all fields that are required to create a studio project.",
        "operationId": "POST-V2-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/studio-projects/{studio_project_id}": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Get Studio Project",
        "description": "### Description\nGets the details of a studio project\n\n### Details\nThis API can be used to get information about a single studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Update Studio Project",
        "description": "### Description\nUpdates a studio project\n\n### Details\nThis API can be used to update the studio project that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialStudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Delete Studio Project",
        "description": "### Description\nDeletes a studio project\n\n### Details\nThis API can be used to delete a studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.",
        "operationId": "DELETE-V2-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/application-specs": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "List Application Specs",
        "description": "### Description\nLists all application specs accessible to the user.\n\n### Details\nThis API can be used to list application specs. If a user has access to multiple accounts, all application specs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                  },
                  "title": "Response Get-V2-/Application-Specs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Create Application Spec",
        "description": "### Description\nCreates a application spec\n\n### Details\nThis API can be used to create a application spec. To use this API, review the request schema and pass in all fields that are required to create a application spec.",
        "operationId": "POST-V2-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/application-specs/{application_spec_id}": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Get Application Spec",
        "description": "### Description\nGets the details of a application spec\n\n### Details\nThis API can be used to get information about a single application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Update Application Spec",
        "description": "### Description\nUpdates a application spec\n\n### Details\nThis API can be used to update the application spec that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Delete Application Spec",
        "description": "### Description\nDeletes a application spec\n\n### Details\nThis API can be used to delete a application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.",
        "operationId": "DELETE-V2-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Evaluations",
        "description": "### Description\nLists all evaluations accessible to the user.\n\n### Details\nThis API can be used to list evaluations. If a user has access to multiple accounts, all evaluations from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
                  },
                  "title": "Response Get-V2-/Evaluations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Evaluation",
        "description": "### Description\nCreates a evaluation\n\n### Details\nThis API can be used to create a evaluation. To use this API, review the request schema and pass in all fields that are required to create a evaluation.",
        "operationId": "POST-V2-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation",
        "description": "### Description\nGets the details of a evaluation\n\n### Details\nThis API can be used to get information about a single evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation",
        "description": "### Description\nUpdates a evaluation\n\n### Details\nThis API can be used to update the evaluation that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialPatchEvaluationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Delete Evaluation",
        "description": "### Description\nDeletes a evaluation\n\n### Details\nThis API can be used to delete a evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.",
        "operationId": "DELETE-V2-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Test Case Results",
        "description": "### Description\nLists all test case results accessible to the user.\n\n### Details\nThis API can be used to list test case results. If a user has access to multiple accounts, all test case results from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
                  },
                  "title": "Response Get-V2-/Evaluations/{Evaluation Id}/Test-Case-Results"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Test Case Result",
        "description": "### Description\nCreates a test case result\n\n### Details\nThis API can be used to create a test case result. To use this API, review the request schema and pass in all fields that are required to create a test case result.",
        "operationId": "POST-V2-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results/batch": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Batch Create Test Case Results",
        "description": "### Description\nCreates a batch of test case results\n\n### Details\nThis API can be used to create multiple test case results so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test case results in the request body.",
        "operationId": "POST-V2-/evaluations/{evaluation_id}/test-case-results/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseResultRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Post-V2-/Evaluations/{Evaluation Id}/Test-Case-Results/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Test Case Result",
        "description": "### Description\nGets the details of a test case result\n\n### Details\nThis API can be used to get information about a single test case result by ID. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Test Case Result",
        "description": "### Description\nUpdates a test case result\n\n### Details\nThis API can be used to update the test case result that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialTestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Historical Test Case Result",
        "operationId": "GET-V2-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get All Versions of Test Case Result",
        "description": "Get all versions of a Test Case Result by lineage ID.",
        "operationId": "GET-V2-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Get-V2-/Evaluations/{Evaluation Id}/Test-Case-Results/{Test Case Result Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluations/{evaluation_id}/test-case-results/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Historical Test Case Results",
        "operationId": "GET-V2-/evaluations/{evaluation_id}/test-case-results/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Get-V2-/Evaluations/{Evaluation Id}/Test-Case-Results/History/{Num}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "List Questions",
        "description": "### Description\nLists all questions accessible to the user.\n\n### Details\nThis API can be used to list questions. If a user has access to multiple accounts, all questions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionResponse"
                  },
                  "title": "Response Get-V2-/Questions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create Question",
        "description": "### Description\nCreates a question\n\n### Details\nThis API can be used to create a question. To use this API, review the request schema and pass in all fields that are required to create a question.",
        "operationId": "POST-V2-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/questions/{question_id}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get Question",
        "description": "### Description\nGets the details of a question\n\n### Details\nThis API can be used to get information about a single question by ID. To use this API, pass in the `id` that was returned from your Create Question API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/questions/{question_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/question-sets": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "List Question Sets",
        "description": "### Description\nLists all question sets accessible to the user.\n\n### Details\nThis API can be used to list question sets. If a user has access to multiple accounts, all question sets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionSetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionSetResponseWithViews"
                  },
                  "title": "Response Get-V2-/Question-Sets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Create Question Set",
        "description": "### Description\nCreates a question set\n\n### Details\nThis API can be used to create a question set. To use this API, review the request schema and pass in all fields that are required to create a question set.",
        "operationId": "POST-V2-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-base-data-sources": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "List Knowledge Base Data Sources",
        "description": "### Description\nLists all knowledge base data sources accessible to the user.\n\n### Details\nThis API can be used to list knowledge base data sources. If a user has access to multiple accounts, all knowledge base data sources from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                  },
                  "title": "Response Get-V2-/Knowledge-Base-Data-Sources"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Create Knowledge Base Data Source",
        "description": "### Description\nCreates a knowledge base data source\n\n### Details\nThis API can be used to create a knowledge base data source. To use this API, review the request schema and pass in all fields that are required to create a knowledge base data source.",
        "operationId": "POST-V2-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-base-data-sources/{knowledge_base_data_source_id}": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Get Knowledge Base Data Source",
        "description": "### Description\nGets the details of a knowledge base data source\n\n### Details\nThis API can be used to get information about a single knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Update Knowledge Base Data Source",
        "description": "### Description\nUpdates a knowledge base data source\n\n### Details\nThis API can be used to update the knowledge base data source that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Delete Knowledge Base Data Source",
        "description": "### Description\nDeletes a knowledge base data source\n\n### Details\nThis API can be used to delete a knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.",
        "operationId": "DELETE-V2-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/upload-schedules": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Schedules",
        "description": "### Description\nLists all upload schedules accessible to the user.\n\n### Details\nThis API can be used to list upload schedules. If a user has access to multiple accounts, all upload schedules from all accounts the user is associated with will be returned.",
        "operationId": "GET-V2-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
                  },
                  "title": "Response Get-V2-/Knowledge-Bases/{Knowledge Base Id}/Upload-Schedules"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Upload Schedule",
        "description": "### Description\nCreates a upload schedule\n\n### Details\nThis API can be used to create a upload schedule. To use this API, review the request schema and pass in all fields that are required to create a upload schedule.",
        "operationId": "POST-V2-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Schedule",
        "description": "### Description\nGets the details of a upload schedule\n\n### Details\nThis API can be used to get information about a single upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V2-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Update Upload Schedule",
        "description": "### Description\nUpdates a upload schedule\n\n### Details\nThis API can be used to update the upload schedule that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V2-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Upload Schedule",
        "description": "### Description\nDeletes a upload schedule\n\n### Details\nThis API can be used to delete a upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.",
        "operationId": "DELETE-V2-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Autogenerated Draft Test Case",
        "description": "### Description\nCreates a autogenerated draft test case\n\n### Details\nThis API can be used to create a autogenerated draft test case. To use this API, review the request schema and pass in all fields that are required to create a autogenerated draft test case.",
        "operationId": "POST-V2-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Autogenerated Draft Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V2-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Autogenerated Draft Test Case",
        "description": "### Description\nUpdate a test case draft.",
        "operationId": "PATCH-V2-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialAutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Autogenerated Draft Test Case",
        "description": "### Description\nDelete a specified draft test case. This version will not be retained.",
        "operationId": "DELETE-V2-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Knowledge Base",
        "description": "### Description\nCreates an EGP knowledge base.\n\n### Details\nA knowledge base is a storage device for all data that needs to be accessible to EGP models.         Users can upload data from a variety of data sources into a knowledge base, and then query the         knowledge base for chunks that are semantically relevant to the query.\n\nEvery knowledge base must be associated with a fixed embedding model. This embedding model         will be used to embed all data that is stored in the knowledge base. The embedding model         cannot be changed once the knowledge base is created. Only the embedding models in the         dropdown menu below are supported.\n\n#### Differences from V1\n- V1 data ingestion consisted of knowledge bases, vector stores, and data connectors.         V1 Knowledge bases interacted with natural language, V1 vector stores interacted with         chunks and embeddings, and V1 data connectors set up automatic ingestion pipelines with third         party data sources.\n- In V2, all data ingestion is done through knowledge bases. Low level configuration such as         chunking strategies and data sources are now handled by this unified knowledge base v2\nupload API.\n- The way data is stores in V2 allows for better observability on the ingestion progress and         content of the knowledge base.\n- Reliability and scalability is also improved via distributed temporal workflows.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V3-/v2/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Knowledge Bases",
        "description": "### Description\nLists all knowledge bases owned by the authorized user.\n\n### Details\nThis API can be used to list all knowledge bases that have been created by the user.         This API will return the details of all knowledge bases including their IDs, names, the         embedding models they use, any metadata associated with the knowledge bases, and the         timestamps for their creation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V3-/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by account_id",
              "title": "Account Id"
            },
            "description": "Optional search by account_id"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBasesResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Knowledge Base",
        "description": "### Description\nGets the details of a knowledge base.\n\n### Details\nThis API can be used to get information about a single knowledge base by ID. To use this API,         pass in the `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\nThis API will return the details of a knowledge base including its ID, name, the embedding         model it uses, any metadata associated with the knowledge base, and the timestamps for its\ncreation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V3-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "include_artifacts_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Optional query parameter to include a count of artifacts by status",
              "default": false,
              "title": "Include Artifacts Status"
            },
            "description": "Optional query parameter to include a count of artifacts by status"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseItemV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Knowledge Base",
        "description": "### Description\nDeletes a knowledge base.\n\n### Details\nThis API can be used to delete a knowledge base by ID. To use this API, pass in the         `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "DELETE-V3-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/chunks": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Chunks",
        "description": "### Description\nGet chunks from a knowledge base using chunk IDs or a matching metadata field. This API will query from the Vector Database using\nthe passed in filters and optionally can return the embeddings.\n\n    ### Details\n    This API can be used to get a list of chunks from a knowledge base. Given a chunk id,             a metadata field and value, or both, matching chunks are searched for in the knowledge base             given by knowledge base id.",
        "operationId": "GET-V3-/v2/knowledge-bases/{knowledge_base_id}/chunks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by chunk_id",
              "title": "Chunk Id"
            },
            "description": "Optional search by chunk_id"
          },
          {
            "name": "metadata_filters",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by metadata fields, encoded as a JSON object",
              "title": "Metadata Filters"
            },
            "description": "Optional search by metadata fields, encoded as a JSON object"
          },
          {
            "name": "max_chunks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 2000,
              "minimum": 1,
              "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000.",
              "default": 10,
              "title": "Max Chunks"
            },
            "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChunksResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/query": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Query Relevant Chunks",
        "description": "### Description\nQuery a knowledge base for text chunks that are most semantically relevant to the query.\n\n### Details\nGiven a query expressed as an embedding, this API runs a similarity search amongst the         embeddings indexed in the knowledge base to find the most relevant chunk embeddings. To use         this API, specify the `knowledge_base_id` of the knowledge base you want to query, pass in         the natural language `query` that you want to search for, specify the value `top_k`,         which is the number of similar chunks that will be returned, and specify whether you want         the returned chunks to `include_embeddings`.\n\nSimilarity search is used to efficiently find, retrieve, and rank chunks based on their         similarity to a given query, which is also expressed as an embedding. Similarity scores (         using the cosine similarity metric) are calculated between each chunk embedding and the         embedded query, and the chunks are ranked based on similarity score. The top-ranked chunks         are returned as the query results.\n\nWe are using the Hierarchical Navigable Small World (HNSW) algorithm to perform a k nearest         neighbors search in the vector space. This algorithm returns an estimate of the best k         nearest neighbors and is optimized for datasets with hundreds of thousands of vectors. You         can read more about the specifics of this algorithm [here](         https://opensearch.org/docs/1.0/search-plugins/knn/approximate-knn/).\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V3-/v2/knowledge-bases/{knowledge_base_id}/query",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/data-source-connections/{knowledge_base_data_source_id}/delete": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Knowledge Base Data Source Connection",
        "operationId": "POST-V3-/knowledge-bases/{knowledge_base_id}/data-source-connections/{knowledge_base_data_source_id}/delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Dryrun query parameter to determine first how many things will be deleted",
              "default": false,
              "title": "Dry Run"
            },
            "description": "Dryrun query parameter to determine first how many things will be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseDataSourceConnectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/upload_files": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Submit Upload Job with local files",
        "operationId": "POST-V3-/knowledge-bases/{knowledge_base_id}/upload_files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V3-_knowledge-bases__knowledge_base_id__upload_files"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadsFromFilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/uploads": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Submit Upload Job",
        "operationId": "POST-V3-/v2/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Jobs",
        "description": "### Description\nList all uploads for a knowledge base.\n\n### Details\nThis API can be used to list all uploads that have been created for a knowledge base.         This API will return the details of all uploads including their IDs, their statuses, the         data source configs they use, the chunking strategy configs they use, and the timestamps for         their creation and last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V3-/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UploadJobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseV2UploadsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Job",
        "operationId": "GET-V3-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          },
          {
            "name": "include_artifact_list",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Artifact List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Cancel Upload Job",
        "operationId": "POST-V3-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/artifacts": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Tracked Artifacts",
        "description": "### Description\nList all artifacts tracked by a knowledge base.\n\n### Details\nThis API can be used to list all artifacts that are currently tracked in a knowledge base.         This API will return the details of all artifacts including their IDs, names, the source they         originated from, their current upload statuses, and the timestamps for their creation and\nlast-updated time.\n\nThis list should be consistent with the state of the data source at the time of start of the         latest upload. If the state is not consistent, create a new upload to update the knowledge         base to reflect the latest state of the data source.",
        "operationId": "GET-V3-/knowledge-bases/{knowledge_base_id}/artifacts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the list_knowledge_base_artifacts. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the list_knowledge_base_artifacts endpoint. Defaults to 1000 and cannot be greater than 10k."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactUploadStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting",
              "title": "Status"
            },
            "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseV2ArtifactsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Tracked Artifact Details",
        "description": "### Description\nGets the details of an artifact tracked by a knowledge base.\n\n### Details\nThis API can be used to get information about a single artifact by ID. This response will         contain much more detail about the artifact than show in the         [List Artifacts API](https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2)         call. To use this API, pass in the `knowledge_base_id` and `artifact_id` that were returned         from your [List Artifacts API](         https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2) call as path         parameters.\n\n#### Compatibility with V1\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V3-/v2/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2ArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Patch Artifact Information",
        "operationId": "PATCH-V3-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artifact"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Locally Stored Artifact",
        "operationId": "DELETE-V3-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-base-data-sources/{knowledge_base_data_source_id}/verify": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Test Knowledge Base Data Source credentials",
        "operationId": "POST-V3-/v3/knowledge-base-data-sources/{knowledge_base_data_source_id}/verify",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Batch Delete Locally Stored Artifacts",
        "operationId": "POST-V3-/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/chunks/rank": {
      "post": {
        "tags": [
          "Chunks"
        ],
        "summary": "Rank Chunks",
        "description": "### Description\nSorts a list of text chunks by similarity against a given query string.\n\n### Details\nUse this API endpoint to rank which text chunks provide the most relevant responses to a         given a query string.\n\nThis is useful for stuffing chunks into a prompt where order may matter or for filtering out         less relevant chunks according to the ranking strategy. For example, this API may be useful         when doing retrieval augment generation (RAG). Sometimes vector store [similarity search](         https://scale-egp.readme.io/reference/query_vector_store) does not always return the best         ranking of text chunks, since this is heavily dependent on embedding generation. This API         endpoint can act as a post-processing step to re-sort the given chunks using more complex         strategies that may outperform vector search, and then filter only the top-k most relevant         chunks to stuff into the prompt for RAG.\n\n### Restrictions and Limits\nRanking can be a very intensive and slow process depending on methodology where duration         scales with number of chunks. For best performance, we recommend ranking less than 640 chunks         at a time, and you may see a decrease in performance as the number of chunks ranked increases.",
        "operationId": "POST-V3-/v2/chunks/rank",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChunksRankRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunksRankResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v3/agents/execute": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Execute Agent",
        "description": "### Description\nExecutes one Agent inference step. Given a list of messages and a list of tools to ask         for help from, the Agent will either respond with a final answer directly or ask the user to         execute a tool to provide more information.\n\n### Details\nAn Agent is a component that utilizes a Language Model (LLM) as an interpreter and decision         maker. Unlike asking an LLM for a direct response, communicating with an agent consists of a         running dialogue where an agent can optionally ask the user to execute specialized tools for         specific tasks, such as calculations, web searches, or accessing custom data from private         knowledge bases.\n\nAn agent is designed to be stateless, emitting outputs one step at a time. This means that         client-side applications are responsible for managing message history, tool execution,         and responses. This grants users greater flexibility to write and execute custom tools         and maintain explicit control over their message history.\n\n#### Message Types\n- `User Message`: A message from the user to the agent.\n- `System Message`: An informational text message from the system to guide the agent. It is         not a user message or agent message because it did not come from either entity.\n- `Agent Message`: A message from the agent to the client. It will contain either a final         answer as `content` or a request for the user to execute a tool as a `tool_request`.\n- `Tool Message`: A message from the user to the agent that contains the output of a tool         execution. The tool message will be processed by the agent and the agent will respond with         either a final answer or another tool request.\n\n#### Agent Instructions\nInstructions are used to guide the agent's decision making process and output generation.\n\nGood prompt engineering is crucial to getting performant results from the agent. If you are         having trouble getting the agent to perform well, try writing more specific instructions         before trying more expensive techniques such as swapping in other models or finetuning the         underlying LLM.\n\nFor example, the default instructions we set for the agent are the following:\n\n> You are an AI assistant that helps users with their questions. You can answer questions         directly or acquire information from any of the attached tools to assist you. Always answer         the user's most recent query to the best of your knowledge.<br>\n> When asked about what tools are available, you must list each attached tool's name         and description. When asked about what you can do, mention that in addition to your normal         capabilities, you can also use the attached tools by listing their names and descriptions.         You cannot use any other tools other than the ones provided to you explicitly.\n\n\n### Restrictions and Limits\n**Message Limits**:\n  - The message list is not limited by length, but by the context limit of the underlying           language model. If you are getting an error regarding the underlying model's context           limit, try using a memory strategy to condense the input messages.\n\n**Model Restrictions**:\n  - Currently, only closed source models like GPT and Claude are supported due to the           limitations of open source models when it comes to tool selection, generating tool           arguments in valid JSON, and planning out multi-step tool execution. Specialized           fine-tuning will likely be required to make open source models compatible with agents.",
        "operationId": "POST-V3-/v2/agents/execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteAgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v3/completions": {
      "post": {
        "tags": [
          "Completions"
        ],
        "summary": "Create Completion",
        "description": "### Description\nGiven a user's input, runs LLM inference to produce the model's response.\n\n### Details\nLLM [completions](https://scale-egp.readme.io/docs/completions-1) have many use cases,         such as content summarization, question-answering, and text generation.\n\nThe `model` parameter determines which LLM will be used to generate the completion. Keep in         mind that different models have varying sizes, costs, and may perform differently across         different tasks.\n\nThe user input, commonly referred to as the \"prompt\", is a required field in the request         body. The quality of the model's response can vary greatly depending on the input prompt.         Good prompt engineering can significantly enhance the response quality. If you encounter         suboptimal results, consider writing more specific instructions or providing examples to the         LLM before trying more expensive techniques  such as swapping in other models or finetuning.\n\nBy default, the endpoint will return the entire response as one whole object. If you would         prefer to stream the completion in real-time, you can achieve this by setting the `stream`         flag to `true`.",
        "operationId": "POST-V3-/v2/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v3/chat-completions": {
      "post": {
        "tags": [
          "Chat Completions"
        ],
        "summary": "Create Chat Completion",
        "description": "### Description\nGiven a list of messages representing a conversation history, runs LLM inference to produce         the next message.\n\n### Details\nLike [completions](https://scale-egp.readme.io/docs/completions-1), [chat completions](         https://scale-egp.readme.io/docs/chat-completions-intro) involve an LLM's response to input.         However, chat completions take a conversation history as input, instead of a single prompt,         which enables the LLM to create responses that take past context into account.\n\n### Messages\nThe primary input to the LLM is a list of messages represented by the `messages` array,         which forms the conversation. The `messages` array must contain at least one `message` object. \nEach `message` object is attributed to a specific entity through its `role`. The available         roles are:\n   - `user`: Represents the human querying the model.            - `assistant`: Represents the model responding to user.            - `system`: Represents a non-user entity that provides information to guide the behavior            of the assistant.\n\nWhen the `role` of a `message` is set to `user`, `assistant`, or `system`, the `message` must         also contain a `content` field which is a string representing the actual text of the message         itself. Semantically, when the `role` is `user`, `content` contains the user's query. When         the `role` is `assistant`, `content` is the model's response to the user. When the `role` is         `system`, `content` represents the instruction for the assistant.\n\n### Instructions\nYou may provide instructions to the assistant by supplying by supplying `instructions` in the         HTTP request body or by specifying a `message` with `role` set to `system` in the `messages`         array. By convention, the system message should be the first message in the array. Do **not**         specify both an instruction and a system message in the `messages` array.",
        "operationId": "POST-V3-/v2/chat-completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v3/models/{model_instance_id}/deployments/{model_deployment_id}/execute": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Execute Model Deployment",
        "operationId": "POST-V3-/v3/models/{model_instance_id}/deployments/{model_deployment_id}/execute",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_deployment_id}/embeddings": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate text embedding",
        "description": "### Description\nComputes the text embeddings for text fragments using the model with the given model_deployment_id.\n\n### Details\nUsers can use this API to execute EMBEDDING type EGP model they have access to. To use this API, pass in         the `id` of a model returned by the V3 Create Model API. An example text embedding request\n\n```json\n{\n    \"texts\": [\"Please compute my embedding vector\", \"Another text fragment\"]\n}\n```",
        "operationId": "POST-V3-/v3/models/{model_deployment_id}/embeddings",
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_deployment_id}/rerankings": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate reranking",
        "description": "### Description\nTODO: Documentation",
        "operationId": "POST-V3-/v3/models/{model_deployment_id}/rerankings",
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RerankingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_deployment_id}/completions": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate completion",
        "description": "### Description\n\nInteract with the LLM model using the specified model_deployment_id. You can include a list of prompts, but be aware that only the first prompt will be used. \n```json\n{\n    \"prompts\": [\"What is the capital of France?\"]\n}\n```",
        "operationId": "POST-V3-/models/{model_deployment_id}/completions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__CompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_instance_id}/deployments": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Deploy Model",
        "description": "### Description\n\nModel Deployments are unique endpoints created for custom models in the Scale GenAI Platform. They enable users to interact with and utilize specific instances of models through the API/SDK.\nEach deployment is associated with a model instance, containing the necessary model template and model-metadata. Model templates describe the creation parameters that are configured on the deployment.\nThe model deployments provide a means to call upon models for inference, logging calls, and monitoring usage.\n\nBuilt-in models also have deployments for creating a consistent interface for all models. But they don't represent a real deployment, they are just a way to interact with the built-in models. These deployments are created automatically when the model is created and they are immutable.\n\n### Endpoint details\n\nThis endpoint is used to deploy a model instance. The request payload schema depends on the `model_request_parameters_schema` of the Model Template that the created model was created from.",
        "operationId": "POST-V3-/v3/models/{model_instance_id}/deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Model Deployments of a Model",
        "description": "TODO: Document",
        "operationId": "GET-V3-/models/{model_instance_id}/deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional filter by account id",
              "title": "Account Id"
            },
            "description": "Optional filter by account id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelDeploymentResponse"
                  },
                  "title": "Response Get-V3-/Models/{Model Instance Id}/Deployments"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_name}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage by model name",
        "operationId": "GET-V3-/v3/models/{model_name}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-deployments": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List All Model Deployments",
        "description": "TODO: Document",
        "operationId": "GET-V3-/model-deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional filter by account id",
              "title": "Account Id"
            },
            "description": "Optional filter by account id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelDeploymentResponse"
                  },
                  "title": "Response Get-V3-/Model-Deployments"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-deployments/{model_deployment_id}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage for one deployment",
        "operationId": "GET-V3-/v3/model-deployments/{model_deployment_id}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-groups/{model_group_id}/models/{model_instance_id}": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Add model to group",
        "description": "TODO: Add model instance to a model group.",
        "operationId": "POST-V3-/v3/model-groups/{model_group_id}/models/{model_instance_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          },
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-groups/{model_group_id}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage for a group",
        "operationId": "GET-V3-/v3/model-groups/{model_group_id}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/question-sets/{question_set_id}": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Get Question Set",
        "operationId": "GET-V3-/v2/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetWithQuestions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Update Question Set",
        "description": "### Description\nUpdates a question set\n\n### Details\nThis API can be used to update the question set that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialQuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Delete Question Set",
        "description": "### Description\nDeletes a question set\n\n### Details\nThis API can be used to delete a question set by ID. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.",
        "operationId": "DELETE-V3-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/claim-task": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Claim Evaluation Task",
        "operationId": "POST-V3-/claim-task",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TaskORMTaskTypeEnum",
              "default": "EVALUATION_ANNOTATION"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ClaimTaskRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Post-V3-/Claim-Task"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/tasks/{task_id}": {
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation Task",
        "operationId": "PATCH-V3-/tasks/{task_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Patch-V3-/Tasks/{Task Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/contributor-metrics/{contributor_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Contributor Metrics",
        "operationId": "GET-V3-/contributor-metrics/{contributor_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "contributor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contributor Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ContributorMetricsResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get-V3-/Contributor-Metrics/{Contributor Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/contributor-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Contributor Metrics",
        "operationId": "GET-V3-/contributor-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContributorMetricsResponse"
                  },
                  "title": "Response Get-V3-/Contributor-Metrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/evaluation-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation Metrics",
        "operationId": "GET-V3-/evaluation-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-configs": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "List Evaluation Configs",
        "description": "### Description\nLists all evaluation configs accessible to the user.\n\n### Details\nThis API can be used to list evaluation configs. If a user has access to multiple accounts, all evaluation configs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationConfigResponse"
                  },
                  "title": "Response Get-V3-/Evaluation-Configs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Create Evaluation Config",
        "description": "### Description\nCreates a evaluation config\n\n### Details\nThis API can be used to create a evaluation config. To use this API, review the request schema and pass in all fields that are required to create a evaluation config.",
        "operationId": "POST-V3-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationConfigRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-configs/{evaluation_config_id}": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Get Evaluation Config",
        "description": "### Description\nGets the details of a evaluation config\n\n### Details\nThis API can be used to get information about a single evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Delete Evaluation Config",
        "description": "### Description\nDeletes a evaluation config\n\n### Details\nThis API can be used to delete a evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.",
        "operationId": "DELETE-V3-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Datasets",
        "description": "### Description\nLists all evaluation datasets accessible to the user.\n\n### Details\nThis API can be used to list evaluation datasets. If a user has access to multiple accounts, all evaluation datasets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
                  },
                  "title": "Response Get-V3-/Evaluation-Datasets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset",
        "description": "### Description\nCreates a evaluation dataset\n\n### Details\nThis API can be used to create a evaluation dataset. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset.",
        "operationId": "POST-V3-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset",
        "description": "### Description\n\nGets the details of a dataset.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Evaluation Dataset",
        "description": "### Description\nUpdates a evaluation dataset\n\n### Details\nThis API can be used to update the evaluation dataset that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePatchEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Evaluation Dataset",
        "description": "### Description\n\nDeletes the dataset, and all other entities associated with the dataset, such as test cases, evaluations and results.\n\n### Details\n\n**This is a permanent and destructive action that cannot be undone.**",
        "operationId": "DELETE-V3-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Dataset Versions",
        "description": "### Description\nLists all evaluation dataset versions accessible to the user.\n\n### Details\nThis API can be used to list evaluation dataset versions. If a user has access to multiple accounts, all evaluation dataset versions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                  },
                  "title": "Response Get-V3-/Evaluation-Datasets/{Evaluation Dataset Id}/Evaluation-Dataset-Versions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset Version",
        "description": "### Description\nCreates a evaluation dataset version\n\n### Details\nThis API can be used to create a evaluation dataset version. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset version.",
        "operationId": "POST-V3-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationDatasetVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset Version",
        "description": "### Description\nGets the details of a evaluation dataset version\n\n### Details\nThis API can be used to get information about a single evaluation dataset version by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset Version API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Test Cases",
        "description": "### Description\nList all test cases for a selected dataset.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V3-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Test Case",
        "description": "### Description\nCreate a test case for a selected dataset.",
        "operationId": "POST-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Batch Create Test Cases",
        "description": "### Description\nCreates a batch of test cases\n\n### Details\nThis API can be used to create multiple test cases so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test cases in the request body.",
        "operationId": "POST-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseVersionRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Post-V3-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Test Case",
        "description": "### Description\nUpdate a test case.",
        "operationId": "PATCH-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialTestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Test Case",
        "description": "### Description\nDelete a specified test case -- retaining older version belonging to older dataset versions.\n\n### Details\nThis request shouldn't be used when deleting due to compliance reasons. See Wipe action.",
        "operationId": "DELETE-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Historical Test Case",
        "description": "### Description\nGet the test case by its id for a specified dataset version.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get All Versions of Test Case",
        "description": "Get all versions of a Test Case by lineage ID.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V3-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/{Test Case Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Wipe Full History of Test Cases",
        "description": "### Description\nDelete a specified test case and remove all its history from past dataset versions too.",
        "operationId": "DELETE-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Historical Test Cases",
        "description": "### Description\nList all test cases for a specified dataset version.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V3-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/History/{Num}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/studio-projects": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "List Studio Projects",
        "description": "### Description\nLists all studio projects accessible to the user.\n\n### Details\nThis API can be used to list studio projects. If a user has access to multiple accounts, all studio projects from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StudioProjectResponse"
                  },
                  "title": "Response Get-V3-/Studio-Projects"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Create Studio Project",
        "description": "### Description\nCreates a studio project\n\n### Details\nThis API can be used to create a studio project. To use this API, review the request schema and pass in all fields that are required to create a studio project.",
        "operationId": "POST-V3-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/studio-projects/{studio_project_id}": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Get Studio Project",
        "description": "### Description\nGets the details of a studio project\n\n### Details\nThis API can be used to get information about a single studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Update Studio Project",
        "description": "### Description\nUpdates a studio project\n\n### Details\nThis API can be used to update the studio project that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialStudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Delete Studio Project",
        "description": "### Description\nDeletes a studio project\n\n### Details\nThis API can be used to delete a studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.",
        "operationId": "DELETE-V3-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/application-specs": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "List Application Specs",
        "description": "### Description\nLists all application specs accessible to the user.\n\n### Details\nThis API can be used to list application specs. If a user has access to multiple accounts, all application specs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                  },
                  "title": "Response Get-V3-/Application-Specs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Create Application Spec",
        "description": "### Description\nCreates a application spec\n\n### Details\nThis API can be used to create a application spec. To use this API, review the request schema and pass in all fields that are required to create a application spec.",
        "operationId": "POST-V3-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/application-specs/{application_spec_id}": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Get Application Spec",
        "description": "### Description\nGets the details of a application spec\n\n### Details\nThis API can be used to get information about a single application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Update Application Spec",
        "description": "### Description\nUpdates a application spec\n\n### Details\nThis API can be used to update the application spec that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Delete Application Spec",
        "description": "### Description\nDeletes a application spec\n\n### Details\nThis API can be used to delete a application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.",
        "operationId": "DELETE-V3-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Evaluations",
        "description": "### Description\nLists all evaluations accessible to the user.\n\n### Details\nThis API can be used to list evaluations. If a user has access to multiple accounts, all evaluations from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
                  },
                  "title": "Response Get-V3-/Evaluations"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Evaluation",
        "description": "### Description\nCreates a evaluation\n\n### Details\nThis API can be used to create a evaluation. To use this API, review the request schema and pass in all fields that are required to create a evaluation.",
        "operationId": "POST-V3-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation",
        "description": "### Description\nGets the details of a evaluation\n\n### Details\nThis API can be used to get information about a single evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation",
        "description": "### Description\nUpdates a evaluation\n\n### Details\nThis API can be used to update the evaluation that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialPatchEvaluationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Delete Evaluation",
        "description": "### Description\nDeletes a evaluation\n\n### Details\nThis API can be used to delete a evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.",
        "operationId": "DELETE-V3-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Test Case Results",
        "description": "### Description\nLists all test case results accessible to the user.\n\n### Details\nThis API can be used to list test case results. If a user has access to multiple accounts, all test case results from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
                  },
                  "title": "Response Get-V3-/Evaluations/{Evaluation Id}/Test-Case-Results"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Test Case Result",
        "description": "### Description\nCreates a test case result\n\n### Details\nThis API can be used to create a test case result. To use this API, review the request schema and pass in all fields that are required to create a test case result.",
        "operationId": "POST-V3-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results/batch": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Batch Create Test Case Results",
        "description": "### Description\nCreates a batch of test case results\n\n### Details\nThis API can be used to create multiple test case results so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test case results in the request body.",
        "operationId": "POST-V3-/evaluations/{evaluation_id}/test-case-results/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseResultRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Post-V3-/Evaluations/{Evaluation Id}/Test-Case-Results/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Test Case Result",
        "description": "### Description\nGets the details of a test case result\n\n### Details\nThis API can be used to get information about a single test case result by ID. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Test Case Result",
        "description": "### Description\nUpdates a test case result\n\n### Details\nThis API can be used to update the test case result that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialTestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Historical Test Case Result",
        "operationId": "GET-V3-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get All Versions of Test Case Result",
        "description": "Get all versions of a Test Case Result by lineage ID.",
        "operationId": "GET-V3-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Get-V3-/Evaluations/{Evaluation Id}/Test-Case-Results/{Test Case Result Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/test-case-results/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Historical Test Case Results",
        "operationId": "GET-V3-/evaluations/{evaluation_id}/test-case-results/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Get-V3-/Evaluations/{Evaluation Id}/Test-Case-Results/History/{Num}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "List Questions",
        "description": "### Description\nLists all questions accessible to the user.\n\n### Details\nThis API can be used to list questions. If a user has access to multiple accounts, all questions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionResponse"
                  },
                  "title": "Response Get-V3-/Questions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create Question",
        "description": "### Description\nCreates a question\n\n### Details\nThis API can be used to create a question. To use this API, review the request schema and pass in all fields that are required to create a question.",
        "operationId": "POST-V3-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/questions/{question_id}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get Question",
        "description": "### Description\nGets the details of a question\n\n### Details\nThis API can be used to get information about a single question by ID. To use this API, pass in the `id` that was returned from your Create Question API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/questions/{question_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/question-sets": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "List Question Sets",
        "description": "### Description\nLists all question sets accessible to the user.\n\n### Details\nThis API can be used to list question sets. If a user has access to multiple accounts, all question sets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionSetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionSetResponseWithViews"
                  },
                  "title": "Response Get-V3-/Question-Sets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Create Question Set",
        "description": "### Description\nCreates a question set\n\n### Details\nThis API can be used to create a question set. To use this API, review the request schema and pass in all fields that are required to create a question set.",
        "operationId": "POST-V3-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-base-data-sources": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "List Knowledge Base Data Sources",
        "description": "### Description\nLists all knowledge base data sources accessible to the user.\n\n### Details\nThis API can be used to list knowledge base data sources. If a user has access to multiple accounts, all knowledge base data sources from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                  },
                  "title": "Response Get-V3-/Knowledge-Base-Data-Sources"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Create Knowledge Base Data Source",
        "description": "### Description\nCreates a knowledge base data source\n\n### Details\nThis API can be used to create a knowledge base data source. To use this API, review the request schema and pass in all fields that are required to create a knowledge base data source.",
        "operationId": "POST-V3-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-base-data-sources/{knowledge_base_data_source_id}": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Get Knowledge Base Data Source",
        "description": "### Description\nGets the details of a knowledge base data source\n\n### Details\nThis API can be used to get information about a single knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Update Knowledge Base Data Source",
        "description": "### Description\nUpdates a knowledge base data source\n\n### Details\nThis API can be used to update the knowledge base data source that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Delete Knowledge Base Data Source",
        "description": "### Description\nDeletes a knowledge base data source\n\n### Details\nThis API can be used to delete a knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.",
        "operationId": "DELETE-V3-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/upload-schedules": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Schedules",
        "description": "### Description\nLists all upload schedules accessible to the user.\n\n### Details\nThis API can be used to list upload schedules. If a user has access to multiple accounts, all upload schedules from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
                  },
                  "title": "Response Get-V3-/Knowledge-Bases/{Knowledge Base Id}/Upload-Schedules"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Upload Schedule",
        "description": "### Description\nCreates a upload schedule\n\n### Details\nThis API can be used to create a upload schedule. To use this API, review the request schema and pass in all fields that are required to create a upload schedule.",
        "operationId": "POST-V3-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Schedule",
        "description": "### Description\nGets the details of a upload schedule\n\n### Details\nThis API can be used to get information about a single upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Update Upload Schedule",
        "description": "### Description\nUpdates a upload schedule\n\n### Details\nThis API can be used to update the upload schedule that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Upload Schedule",
        "description": "### Description\nDeletes a upload schedule\n\n### Details\nThis API can be used to delete a upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.",
        "operationId": "DELETE-V3-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Autogenerated Draft Test Case",
        "description": "### Description\nCreates a autogenerated draft test case\n\n### Details\nThis API can be used to create a autogenerated draft test case. To use this API, review the request schema and pass in all fields that are required to create a autogenerated draft test case.",
        "operationId": "POST-V3-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Autogenerated Draft Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V3-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Autogenerated Draft Test Case",
        "description": "### Description\nUpdate a test case draft.",
        "operationId": "PATCH-V3-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialAutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Autogenerated Draft Test Case",
        "description": "### Description\nDelete a specified draft test case. This version will not be retained.",
        "operationId": "DELETE-V3-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Models",
        "description": "### Description\nLists all models accessible to the user.\n\n### Details\nThis API can be used to list models. If a user has access to multiple accounts, all models from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInstanceViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "model_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Group Id"
            }
          },
          {
            "name": "model_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Type"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInstanceResponseWithViews"
                  },
                  "title": "Response Get-V3-/Models"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create Model",
        "description": "### Description\n\nCreates and hosts a model based on a model template.\n\nBase embedding models, chunk ranking functions, and LLMs are often not sufficient for customer use cases. We have shown in various blogs that fine-tuning these models on customer data can lead to significant improvements in performance.\n\n1. [We Fine-Tuned GPT-4 to Beat the Industry Standard for Text2SQL]( https://scale.com/blog/text2sql-fine-tuning)\n2. [OpenAI Names Scale as Preferred Partner to Fine-Tune GPT-3.5]( https://scale.com/blog/open-ai-scale-partnership-gpt-3-5-fine-tuning)\n3. [How to Fine-Tune GPT-3.5 Turbo With OpenAI API]( https://scale.com/blog/fine-tune-gpt-3.5)\n        \n\n### Details\n\nBefore creating a model, you must first create a model template. A model template serves 2 purposes. First, it provides  common scaffolding that is static across multiple models. Second, it exposes several variables that can be injected at model creation time to customize the model.\n\nFor example, a model template can define a docker image that contains code to run a HuggingFace or SentenceTransformers model. This docker image code also accepts environment variables that can be set to swap out the model weights or model name. Refer to the Create Model Template API for more details.\n\nTo create a new model, users must refer to an existing model template and provide the necessary parameters the the model template requires in its `model_creation_parameters_schema` field. The combination of the model template and the model creation parameters will be used to create and deploy a new model.\n\nOnce a model has been created, it can be executed by calling the Execute Model API.\n        \n\n\n### Coming Soon\nSome of our EGP APIs depend on models, for example Knowledge Base APIs depend on embedding models, Chunk Ranking APIs depend on ranking models, and Completion APIs depend on LLMs.\n\nIn the near future, if a model is created from a model template that is compatible with one of these APIs (based on the model template's `model_type field`), the model will automatically be registered with the API. This will allow users to immediately start using the model with those API without any additional setup.",
        "operationId": "POST-V3-/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model",
        "description": "### Description\nGets the details of a model\n\n### Details\nThis API can be used to get information about a single model by ID. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInstanceViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Model",
        "description": "### Description\nUpdates a model\n\n### Details\nThis API can be used to update the model that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Model",
        "description": "### Description\nDeletes a model\n\n### Details\nThis API can be used to delete a model by ID. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.",
        "operationId": "DELETE-V3-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-groups": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Model Groups",
        "description": "### Description\nLists all model groups accessible to the user.\n\n### Details\nThis API can be used to list model groups. If a user has access to multiple accounts, all model groups from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/model-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelGroupResponse"
                  },
                  "title": "Response Get-V3-/Model-Groups"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create Model Group",
        "description": "### Description\n\nModel groups are grouping models together. You can add models with the same base_model_id.",
        "operationId": "POST-V3-/model-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-groups/{model_group_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model Group",
        "description": "### Description\nGets the details of a model group\n\n### Details\nThis API can be used to get information about a single model group by ID. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Model Group",
        "description": "### Description\nUpdates a model group\n\n### Details\nThis API can be used to update the model group that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Model Group",
        "description": "### Description\nDeletes a model group\n\n### Details\nThis API can be used to delete a model group by ID. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.",
        "operationId": "DELETE-V3-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/models/{model_instance_id}/deployments/{deployment_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Deployment",
        "description": "### Description\nGets the details of a deployment\n\n### Details\nThis API can be used to get information about a single deployment by ID. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Deployment",
        "description": "### Description\nUpdates a deployment\n\n### Details\nThis API can be used to update the deployment that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V3-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Deployment",
        "description": "### Description\nDeletes a deployment\n\n### Details\nThis API can be used to delete a deployment by ID. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.",
        "operationId": "DELETE-V3-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-templates": {
      "get": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "List Model Templates",
        "description": "### Description\nLists all model templates accessible to the user.\n\n### Details\nThis API can be used to list model templates. If a user has access to multiple accounts, all model templates from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/model-templates",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelTemplateResponse"
                  },
                  "title": "Response Get-V3-/Model-Templates"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Create Model Template",
        "description": "### Description\nCreates a model template.\n\n### Details\n\nModel templates serve 2 purposes. First, they provide common scaffolding that is static across multiple models. Second, they expose several variables that can be injected at model creation time to customize the model.\n\nFor example, a model template can define a docker image that contains code to run a HuggingFace or SentenceTransformers model. This docker image code also accepts environment variables that can be set to swap out the model weights or model name.\n\nTwo of the most important fields required to create a model template are the `model_creation_parameters_schema` and `model_request_parameters_schema` fields.\n\nThe `model_creation_parameters_schema` field defines the schema for parameters that can be injected at model creation time. For example, if the schema contains a `model_weights_uri` field, which expects a string, when a model is created from this template, the user can provide a URI to a model weights file that can be used to swap out the model weights used by the model.\n\nThe `model_request_parameters_schema` field defines the schema for parameters that can be injected by an end user at model execution time. For example, if the schema contains a `model_request_parameters` field, which expects a string, when a model is executed, the user can provide a string that will be passed to the model for inference.",
        "operationId": "POST-V3-/model-templates",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/model-templates/{model_template_id}": {
      "get": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Get Model Template",
        "description": "### Description\nGets the details of a model template\n\n### Details\nThis API can be used to get information about a single model template by ID. To use this API, pass in the `id` that was returned from your Create Model Template API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/model-templates/{model_template_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Delete Model Template",
        "description": "### Description\nDeletes a model template\n\n### Details\nThis API can be used to delete a model template by ID. To use this API, pass in the `id` that was returned from your Create Model Template API call as a path parameter.",
        "operationId": "DELETE-V3-/model-templates/{model_template_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/fine-tuning-jobs": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "List Fine Tuning Jobs",
        "description": "### Description\nLists all fine tuning jobs accessible to the user.\n\n### Details\nThis API can be used to list fine tuning jobs. If a user has access to multiple accounts, all fine tuning jobs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/fine-tuning-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FineTuningJobResponse"
                  },
                  "title": "Response Get-V3-/Fine-Tuning-Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Create Fine Tuning Job",
        "description": "### Description\nModel fine tuning jobs.\n\n### Details\n\nTODO",
        "operationId": "POST-V3-/fine-tuning-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FineTuningJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/fine-tuning-jobs/{fine_tuning_job_id}": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Get Fine Tuning Job",
        "description": "### Description\nGets the details of a fine tuning job\n\n### Details\nThis API can be used to get information about a single fine tuning job by ID. To use this API, pass in the `id` that was returned from your Create Fine Tuning Job API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/fine-tuning-jobs/{fine_tuning_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Delete Fine Tuning Job",
        "description": "### Description\nDeletes a fine tuning job\n\n### Details\nThis API can be used to delete a fine tuning job by ID. To use this API, pass in the `id` that was returned from your Create Fine Tuning Job API call as a path parameter.",
        "operationId": "DELETE-V3-/fine-tuning-jobs/{fine_tuning_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/fine-tuning-jobs/{fine_tuning_job_id}/events": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Get fine tuning job events",
        "operationId": "GET-V3-/fine-tuning-jobs/{fine_tuning_job_id}/events",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FineTuningJobEvent"
                  },
                  "title": "Response Get-V3-/Fine-Tuning-Jobs/{Fine Tuning Job Id}/Events"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/training-datasets": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "List Training Datasets",
        "description": "### Description\nLists all training datasets accessible to the user.\n\n### Details\nThis API can be used to list training datasets. If a user has access to multiple accounts, all training datasets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V3-/training-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainingDatasetResponse"
                  },
                  "title": "Response Get-V3-/Training-Datasets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Create Training Dataset",
        "operationId": "POST-V3-/training-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V3-_training-datasets"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/training-datasets/{training_dataset_id}": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Get Training Dataset",
        "description": "### Description\nGets the details of a training dataset\n\n### Details\nThis API can be used to get information about a single training dataset by ID. To use this API, pass in the `id` that was returned from your Create Training Dataset API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V3-/training-datasets/{training_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Delete Training Dataset",
        "description": "### Description\nDeletes a training dataset\n\n### Details\nThis API can be used to delete a training dataset by ID. To use this API, pass in the `id` that was returned from your Create Training Dataset API call as a path parameter.",
        "operationId": "DELETE-V3-/training-datasets/{training_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/training-datasets/{training_dataset_id}/contents": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Get Training Dataset Contents",
        "operationId": "GET-V3-/training-datasets/{training_dataset_id}/contents",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainingDatasetGenerationItem"
                  },
                  "title": "Response Get-V3-/Training-Datasets/{Training Dataset Id}/Contents"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Knowledge Base",
        "description": "### Description\nCreates an EGP knowledge base.\n\n### Details\nA knowledge base is a storage device for all data that needs to be accessible to EGP models.         Users can upload data from a variety of data sources into a knowledge base, and then query the         knowledge base for chunks that are semantically relevant to the query.\n\nEvery knowledge base must be associated with a fixed embedding model. This embedding model         will be used to embed all data that is stored in the knowledge base. The embedding model         cannot be changed once the knowledge base is created. Only the embedding models in the         dropdown menu below are supported.\n\n#### Differences from V1\n- V1 data ingestion consisted of knowledge bases, vector stores, and data connectors.         V1 Knowledge bases interacted with natural language, V1 vector stores interacted with         chunks and embeddings, and V1 data connectors set up automatic ingestion pipelines with third         party data sources.\n- In V2, all data ingestion is done through knowledge bases. Low level configuration such as         chunking strategies and data sources are now handled by this unified knowledge base v2\nupload API.\n- The way data is stores in V2 allows for better observability on the ingestion progress and         content of the knowledge base.\n- Reliability and scalability is also improved via distributed temporal workflows.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V4-/v2/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Knowledge Bases",
        "description": "### Description\nLists all knowledge bases owned by the authorized user.\n\n### Details\nThis API can be used to list all knowledge bases that have been created by the user.         This API will return the details of all knowledge bases including their IDs, names, the         embedding models they use, any metadata associated with the knowledge bases, and the         timestamps for their creation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V4-/knowledge-bases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by account_id",
              "title": "Account Id"
            },
            "description": "Optional search by account_id"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedKnowledgeBaseItemV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Knowledge Base",
        "description": "### Description\nGets the details of a knowledge base.\n\n### Details\nThis API can be used to get information about a single knowledge base by ID. To use this API,         pass in the `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\nThis API will return the details of a knowledge base including its ID, name, the embedding         model it uses, any metadata associated with the knowledge base, and the timestamps for its\ncreation, last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V4-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "include_artifacts_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Optional query parameter to include a count of artifacts by status",
              "default": false,
              "title": "Include Artifacts Status"
            },
            "description": "Optional query parameter to include a count of artifacts by status"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseView"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseItemV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Patch Knowledge Base",
        "operationId": "PATCH-V4-/v4/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBasePatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Knowledge Base",
        "description": "### Description\nDeletes a knowledge base.\n\n### Details\nThis API can be used to delete a knowledge base by ID. To use this API, pass in the         `knowledge_base_id` that was returned from your [Create Knowledge Base API](         https://scale-egp.readme.io/reference/create_knowledge_base_v2) call as a path parameter.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "DELETE-V4-/v2/knowledge-bases/{knowledge_base_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/async-jobs": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Jobs",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/async-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AsyncJobAPIStatusEnum"
                },
                {
                  "$ref": "#/components/schemas/GenericAsyncJobStatusEnum"
                }
              ],
              "description": "Optional search by status type",
              "default": "Active",
              "title": "Status"
            },
            "description": "Optional search by status type"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AsyncJobsEntity"
                  },
                  "title": "Response Get-V4-/Knowledge-Bases/{Knowledge Base Id}/Async-Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/chunks": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Chunks",
        "description": "### Description\nGet chunks from a knowledge base using chunk IDs or a matching metadata field. This API will query from the Vector Database using\nthe passed in filters and optionally can return the embeddings.\n\n    ### Details\n    This API can be used to get a list of chunks from a knowledge base. Given a chunk id,             a metadata field and value, or both, matching chunks are searched for in the knowledge base             given by knowledge base id.",
        "operationId": "GET-V4-/v2/knowledge-bases/{knowledge_base_id}/chunks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by chunk_id",
              "title": "Chunk Id"
            },
            "description": "Optional search by chunk_id"
          },
          {
            "name": "metadata_filters",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional search by metadata fields, encoded as a JSON object",
              "title": "Metadata Filters"
            },
            "description": "Optional search by metadata fields, encoded as a JSON object"
          },
          {
            "name": "max_chunks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 2000,
              "minimum": 1,
              "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000.",
              "default": 10,
              "title": "Max Chunks"
            },
            "description": "Maximum number of chunks returned by the get_chunks endpoint. Defaults to 10 and cannot be greater than 2000."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChunksResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/query": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Query Relevant Chunks",
        "description": "### Description\nQuery a knowledge base for text chunks that are most semantically relevant to the query.\n\n### Details\nGiven a query expressed as an embedding, this API runs a similarity search amongst the         embeddings indexed in the knowledge base to find the most relevant chunk embeddings. To use         this API, specify the `knowledge_base_id` of the knowledge base you want to query, pass in         the natural language `query` that you want to search for, specify the value `top_k`,         which is the number of similar chunks that will be returned, and specify whether you want         the returned chunks to `include_embeddings`.\n\nSimilarity search is used to efficiently find, retrieve, and rank chunks based on their         similarity to a given query, which is also expressed as an embedding. Similarity scores (         using the cosine similarity metric) are calculated between each chunk embedding and the         embedded query, and the chunks are ranked based on similarity score. The top-ranked chunks         are returned as the query results.\n\nWe are using the Hierarchical Navigable Small World (HNSW) algorithm to perform a k nearest         neighbors search in the vector space. This algorithm returns an estimate of the best k         nearest neighbors and is optimized for datasets with hundreds of thousands of vectors. You         can read more about the specifics of this algorithm [here](         https://opensearch.org/docs/1.0/search-plugins/knn/approximate-knn/).\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "POST-V4-/v2/knowledge-bases/{knowledge_base_id}/query",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryKnowledgeBaseRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryKnowledgeBaseResponseV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/data-source-connections/{knowledge_base_data_source_id}/delete": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Knowledge Base Data Source Connection",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/data-source-connections/{knowledge_base_data_source_id}/delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          },
          {
            "name": "dry_run",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Dryrun query parameter to determine first how many things will be deleted",
              "default": false,
              "title": "Dry Run"
            },
            "description": "Dryrun query parameter to determine first how many things will be deleted"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseDataSourceConnectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/upload_files": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Submit Upload Job with local files",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/upload_files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V4-_knowledge-bases__knowledge_base_id__upload_files"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadsFromFilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/uploads": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Submit Upload Job",
        "operationId": "POST-V4-/v2/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Jobs",
        "description": "### Description\nList all uploads for a knowledge base.\n\n### Details\nThis API can be used to list all uploads that have been created for a knowledge base.         This API will return the details of all uploads including their IDs, their statuses, the         data source configs they use, the chunking strategy configs they use, and the timestamps for         their creation and last-updated time.\n\n#### Backwards Compatibility\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/uploads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/UploadJobStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedKnowledgeBaseUpload"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Job",
        "operationId": "GET-V4-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          },
          {
            "name": "include_artifact_list",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Include Artifact List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Cancel Upload Job",
        "operationId": "POST-V4-/v2/knowledge-bases/{knowledge_base_id}/uploads/{upload_id}/cancel",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelKnowledgeBaseV2UploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Tracked Artifacts",
        "description": "### Description\nList all artifacts tracked by a knowledge base.\n\n### Details\nThis API can be used to list all artifacts that are currently tracked in a knowledge base.         This API will return the details of all artifacts including their IDs, names, the source they         originated from, their current upload statuses, and the timestamps for their creation and\nlast-updated time.\n\nThis list should be consistent with the state of the data source at the time of start of the         latest upload. If the state is not consistent, create a new upload to update the knowledge         base to reflect the latest state of the data source.",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/artifacts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactUploadStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting",
              "title": "Status"
            },
            "description": "Get artifacts only with the specified status. Accepted values are: Pending, Completed, Failed, Uploading, Deleting"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedArtifactInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Tracked Artifact Details",
        "description": "### Description\nGets the details of an artifact tracked by a knowledge base.\n\n### Details\nThis API can be used to get information about a single artifact by ID. This response will         contain much more detail about the artifact than show in the         [List Artifacts API](https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2)         call. To use this API, pass in the `knowledge_base_id` and `artifact_id` that were returned         from your [List Artifacts API](         https://scale-egp.readme.io/reference/list_knowledge_base_artifacts_v2) call as path         parameters.\n\n#### Compatibility with V1\nV2 and V1 Knowledge Bases are entirely separate and not backwards compatible. Users who         have existing V1 knowledge bases will need to migrate their data to V2 knowledge bases.",
        "operationId": "GET-V4-/v2/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "status_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKnowledgeBaseV2ArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Patch Artifact Information",
        "operationId": "PATCH-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Artifact"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Locally Stored Artifact",
        "operationId": "DELETE-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Chunks of Artifacts with Pagination",
        "description": "### Description\nList chunks for a specific artifact. This API supports pagination and reads only from the data store to allow\nquerying chunks that are failed as well to enumerate all chunks of a specific artifact.",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "chunk_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ChunkUploadStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by the status of the chunks",
              "title": "Chunk Status"
            },
            "description": "Filter by the status of the chunks"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChunkWithStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create chunk for local chunk artifacts",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactChunkUpload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkWithStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks/{chunk_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Single Chunk Information and status",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks/{chunk_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chunk Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkWithStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Update Single Chunk data for local artifact",
        "operationId": "PUT-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks/{chunk_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chunk Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArtifactChunkUpload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunkWithStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Single Chunk from Local Artifact",
        "operationId": "DELETE-V4-/knowledge-bases/{knowledge_base_id}/artifacts/{artifact_id}/chunks/{chunk_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Artifact Id"
            }
          },
          {
            "name": "chunk_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chunk Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteChunkFromLocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-base-data-sources/{knowledge_base_data_source_id}/verify": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Test Knowledge Base Data Source credentials",
        "operationId": "POST-V4-/v3/knowledge-base-data-sources/{knowledge_base_data_source_id}/verify",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Batch Delete Locally Stored Artifacts",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/artifacts/batch-delete",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteKnowledgeBaseV2LocalArtifactResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/chunks/rank": {
      "post": {
        "tags": [
          "Chunks"
        ],
        "summary": "Rank Chunks",
        "description": "### Description\nSorts a list of text chunks by similarity against a given query string.\n\n### Details\nUse this API endpoint to rank which text chunks provide the most relevant responses to a         given a query string.\n\nThis is useful for stuffing chunks into a prompt where order may matter or for filtering out         less relevant chunks according to the ranking strategy. For example, this API may be useful         when doing retrieval augment generation (RAG). Sometimes vector store [similarity search](         https://scale-egp.readme.io/reference/query_vector_store) does not always return the best         ranking of text chunks, since this is heavily dependent on embedding generation. This API         endpoint can act as a post-processing step to re-sort the given chunks using more complex         strategies that may outperform vector search, and then filter only the top-k most relevant         chunks to stuff into the prompt for RAG.\n\n### Restrictions and Limits\nRanking can be a very intensive and slow process depending on methodology where duration         scales with number of chunks. For best performance, we recommend ranking less than 640 chunks         at a time, and you may see a decrease in performance as the number of chunks ranked increases.",
        "operationId": "POST-V4-/v2/chunks/rank",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChunksRankRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChunksRankResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/agents/execute": {
      "post": {
        "tags": [
          "Agents"
        ],
        "summary": "Execute Agent",
        "description": "### Description\nExecutes one Agent inference step. Given a list of messages and a list of tools to ask         for help from, the Agent will either respond with a final answer directly or ask the user to         execute a tool to provide more information.\n\n### Details\nAn Agent is a component that utilizes a Language Model (LLM) as an interpreter and decision         maker. Unlike asking an LLM for a direct response, communicating with an agent consists of a         running dialogue where an agent can optionally ask the user to execute specialized tools for         specific tasks, such as calculations, web searches, or accessing custom data from private         knowledge bases.\n\nAn agent is designed to be stateless, emitting outputs one step at a time. This means that         client-side applications are responsible for managing message history, tool execution,         and responses. This grants users greater flexibility to write and execute custom tools         and maintain explicit control over their message history.\n\n#### Message Types\n- `User Message`: A message from the user to the agent.\n- `System Message`: An informational text message from the system to guide the agent. It is         not a user message or agent message because it did not come from either entity.\n- `Agent Message`: A message from the agent to the client. It will contain either a final         answer as `content` or a request for the user to execute a tool as a `tool_request`.\n- `Tool Message`: A message from the user to the agent that contains the output of a tool         execution. The tool message will be processed by the agent and the agent will respond with         either a final answer or another tool request.\n\n#### Agent Instructions\nInstructions are used to guide the agent's decision making process and output generation.\n\nGood prompt engineering is crucial to getting performant results from the agent. If you are         having trouble getting the agent to perform well, try writing more specific instructions         before trying more expensive techniques such as swapping in other models or finetuning the         underlying LLM.\n\nFor example, the default instructions we set for the agent are the following:\n\n> You are an AI assistant that helps users with their questions. You can answer questions         directly or acquire information from any of the attached tools to assist you. Always answer         the user's most recent query to the best of your knowledge.<br>\n> When asked about what tools are available, you must list each attached tool's name         and description. When asked about what you can do, mention that in addition to your normal         capabilities, you can also use the attached tools by listing their names and descriptions.         You cannot use any other tools other than the ones provided to you explicitly.\n\n\n### Restrictions and Limits\n**Message Limits**:\n  - The message list is not limited by length, but by the context limit of the underlying           language model. If you are getting an error regarding the underlying model's context           limit, try using a memory strategy to condense the input messages.\n\n**Model Restrictions**:\n  - Currently, only closed source models like GPT and Claude are supported due to the           limitations of open source models when it comes to tool selection, generating tool           arguments in valid JSON, and planning out multi-step tool execution. Specialized           fine-tuning will likely be required to make open source models compatible with agents.",
        "operationId": "POST-V4-/v2/agents/execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteAgentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/completions": {
      "post": {
        "tags": [
          "Completions"
        ],
        "summary": "Create Completion",
        "description": "### Description\nGiven a user's input, runs LLM inference to produce the model's response.\n\n### Details\nLLM [completions](https://scale-egp.readme.io/docs/completions-1) have many use cases,         such as content summarization, question-answering, and text generation.\n\nThe `model` parameter determines which LLM will be used to generate the completion. Keep in         mind that different models have varying sizes, costs, and may perform differently across         different tasks.\n\nThe user input, commonly referred to as the \"prompt\", is a required field in the request         body. The quality of the model's response can vary greatly depending on the input prompt.         Good prompt engineering can significantly enhance the response quality. If you encounter         suboptimal results, consider writing more specific instructions or providing examples to the         LLM before trying more expensive techniques  such as swapping in other models or finetuning.\n\nBy default, the endpoint will return the entire response as one whole object. If you would         prefer to stream the completion in real-time, you can achieve this by setting the `stream`         flag to `true`.",
        "operationId": "POST-V4-/v2/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/chat-completions": {
      "post": {
        "tags": [
          "Chat Completions"
        ],
        "summary": "Create Chat Completion",
        "description": "### Description\nGiven a list of messages representing a conversation history, runs LLM inference to produce         the next message.\n\n### Details\nLike [completions](https://scale-egp.readme.io/docs/completions-1), [chat completions](         https://scale-egp.readme.io/docs/chat-completions-intro) involve an LLM's response to input.         However, chat completions take a conversation history as input, instead of a single prompt,         which enables the LLM to create responses that take past context into account.\n\n### Messages\nThe primary input to the LLM is a list of messages represented by the `messages` array,         which forms the conversation. The `messages` array must contain at least one `message` object. \nEach `message` object is attributed to a specific entity through its `role`. The available         roles are:\n   - `user`: Represents the human querying the model.            - `assistant`: Represents the model responding to user.            - `system`: Represents a non-user entity that provides information to guide the behavior            of the assistant.\n\nWhen the `role` of a `message` is set to `user`, `assistant`, or `system`, the `message` must         also contain a `content` field which is a string representing the actual text of the message         itself. Semantically, when the `role` is `user`, `content` contains the user's query. When         the `role` is `assistant`, `content` is the model's response to the user. When the `role` is         `system`, `content` represents the instruction for the assistant.\n\n### Instructions\nYou may provide instructions to the assistant by supplying by supplying `instructions` in the         HTTP request body or by specifying a `message` with `role` set to `system` in the `messages`         array. By convention, the system message should be the first message in the array. Do **not**         specify both an instruction and a system message in the `messages` array.",
        "operationId": "POST-V4-/v2/chat-completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/models/{model_instance_id}/deployments/{model_deployment_id}/execute": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Execute Model Deployment",
        "operationId": "POST-V4-/v4/models/{model_instance_id}/deployments/{model_deployment_id}/execute",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_deployment_id}/embeddings": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate text embedding",
        "description": "### Description\nComputes the text embeddings for text fragments using the model with the given model_deployment_id.\n\n### Details\nUsers can use this API to execute EMBEDDING type EGP model they have access to. To use this API, pass in         the `id` of a model returned by the V3 Create Model API. An example text embedding request\n\n```json\n{\n    \"texts\": [\"Please compute my embedding vector\", \"Another text fragment\"]\n}\n```",
        "operationId": "POST-V4-/v3/models/{model_deployment_id}/embeddings",
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_deployment_id}/rerankings": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate reranking",
        "description": "### Description\nTODO: Documentation",
        "operationId": "POST-V4-/v3/models/{model_deployment_id}/rerankings",
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RerankingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RerankingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_deployment_id}/completions": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate completion",
        "description": "### Description\n\nInteract with the LLM model using the specified model_deployment_id. The LLM model will generate a text completion based on the provided prompt.\n\n```json\n{\n    \"prompt\": \"What is the capital of France?\"\n}\n```",
        "operationId": "POST-V4-/models/{model_deployment_id}/completions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequestV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_deployment_id}/chat-completions": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Generate chat completion",
        "description": "### Description\n\nInteract with the LLM model using the specified model_deployment_id. You can include a list of messages as the conversation history.         The conversation can feature multiple messages from the roles user, assistant, and system. If the chosen model does not support chat completion,         the API will revert to simple completion, disregarding the provided history. The endpoint manages context length exceedance optimistically:         it estimates the token count from the provided history and prompt, and if it exceeds the context or approaches 80% of it, the exact token count will be calculated, and the history will be trimmed to fit the context.\n\n```json\n{\n    \"prompt\": \"Generate 5 more\",\n    \"chat_history\": [\n        { \"role\": \"system\", \"content\": \"You are a name generator. Do not generate anything else than names\" },\n        { \"role\": \"user\", \"content\": \"Generate 5 names\" },\n        { \"role\": \"assistant\", \"content\": \"1. Olivia Bennett\\n2. Ethan Carter\\n3. Sophia Ramirez\\n4. Liam Thompson\\n5. Ava Mitchell\" }\n    ],\n}\n```",
        "operationId": "POST-V4-/v4/models/{model_deployment_id}/chat-completions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__ChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_instance_id}/deployments": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Deploy Model",
        "description": "### Description\n\nModel Deployments are unique endpoints created for custom models in the Scale GenAI Platform. They enable users to interact with and utilize specific instances of models through the API/SDK.\nEach deployment is associated with a model instance, containing the necessary model template and model-metadata. Model templates describe the creation parameters that are configured on the deployment.\nThe model deployments provide a means to call upon models for inference, logging calls, and monitoring usage.\n\nBuilt-in models also have deployments for creating a consistent interface for all models. But they don't represent a real deployment, they are just a way to interact with the built-in models. These deployments are created automatically when the model is created and they are immutable.\n\n### Endpoint details\n\nThis endpoint is used to deploy a model instance. The request payload schema depends on the `model_request_parameters_schema` of the Model Template that the created model was created from.",
        "operationId": "POST-V4-/v3/models/{model_instance_id}/deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Model Deployments of a Model",
        "description": "TODO: Document",
        "operationId": "GET-V4-/models/{model_instance_id}/deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortByEnumForModelDeployment"
              },
              "title": "Sort By"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional filter by account id",
              "title": "Account Id"
            },
            "description": "Optional filter by account id"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_name}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage by model name",
        "operationId": "GET-V4-/v3/models/{model_name}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Name"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-deployments": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List All Model Deployments",
        "description": "TODO: Document",
        "operationId": "GET-V4-/model-deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortByEnumForModelDeployment"
              },
              "title": "Sort By"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional filter by account id",
              "title": "Account Id"
            },
            "description": "Optional filter by account id"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-deployments/{model_deployment_id}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage for one deployment",
        "operationId": "GET-V4-/v3/model-deployments/{model_deployment_id}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Deployment Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-groups/{model_group_id}/models/{model_instance_id}": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Add model to group",
        "description": "TODO: Add model instance to a model group.",
        "operationId": "POST-V4-/v3/model-groups/{model_group_id}/models/{model_instance_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          },
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-groups/{model_group_id}/usage-statistics": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model usage for a group",
        "operationId": "GET-V4-/v3/model-groups/{model_group_id}/usage-statistics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Date"
            }
          },
          {
            "name": "chunks",
            "in": "query",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Chunks"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelUsageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/question-sets/{question_set_id}": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Get Question Set",
        "operationId": "GET-V4-/v2/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetWithQuestions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Update Question Set",
        "description": "### Description\nUpdates a question set\n\n### Details\nThis API can be used to update the question set that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialQuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Delete Question Set",
        "description": "### Description\nDeletes a question set\n\n### Details\nThis API can be used to delete a question set by ID. To use this API, pass in the `id` that was returned from your Create Question Set API call as a path parameter.",
        "operationId": "DELETE-V4-/question-sets/{question_set_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/claim-task": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Claim Evaluation Task",
        "operationId": "POST-V4-/claim-task",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TaskORMTaskTypeEnum",
              "default": "EVALUATION_ANNOTATION"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ClaimTaskRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Post-V4-/Claim-Task"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/tasks/batch-assign": {
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Batch assign tasks to user",
        "operationId": "PATCH-V4-/tasks/batch-assign",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAssignTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskResponse"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Patch-V4-/Tasks/Batch-Assign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/tasks/{task_id}": {
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation Task",
        "operationId": "PATCH-V4-/tasks/{task_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Patch-V4-/Tasks/{Task Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/contributor-metrics/{contributor_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Contributor Metrics",
        "operationId": "GET-V4-/contributor-metrics/{contributor_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "contributor_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contributor Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ContributorMetricsResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Get-V4-/Contributor-Metrics/{Contributor Id}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/contributor-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Contributor Metrics",
        "operationId": "GET-V4-/contributor-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedContributorMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/evaluation-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation Metrics",
        "operationId": "GET-V4-/evaluation-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/hybrid-eval-metrics": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Hybrid Evaluation Metrics",
        "operationId": "GET-V4-/hybrid-eval-metrics",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HybridEvaluationMetricsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-configs": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "List Evaluation Configs",
        "description": "### Description\nLists all evaluation configs accessible to the user.\n\n### Details\nThis API can be used to list evaluation configs. If a user has access to multiple accounts, all evaluation configs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Create Evaluation Config",
        "description": "### Description\nCreates a evaluation config\n\n### Details\nThis API can be used to create a evaluation config. To use this API, review the request schema and pass in all fields that are required to create a evaluation config.",
        "operationId": "POST-V4-/evaluation-configs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationConfigRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-configs/{evaluation_config_id}": {
      "get": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Get Evaluation Config",
        "description": "### Description\nGets the details of a evaluation config\n\n### Details\nThis API can be used to get information about a single evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationConfigResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Configs"
        ],
        "summary": "Delete Evaluation Config",
        "description": "### Description\nDeletes a evaluation config\n\n### Details\nThis API can be used to delete a evaluation config by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Config API call as a path parameter.",
        "operationId": "DELETE-V4-/evaluation-configs/{evaluation_config_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Config Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Datasets",
        "description": "### Description\nLists all evaluation datasets accessible to the user.\n\n### Details\nThis API can be used to list evaluation datasets. If a user has access to multiple accounts, all evaluation datasets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEvaluationDatasetResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset",
        "description": "### Description\nCreates a evaluation dataset\n\n### Details\nThis API can be used to create a evaluation dataset. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset.",
        "operationId": "POST-V4-/evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset",
        "description": "### Description\n\nGets the details of a dataset.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationDatasetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Evaluation Dataset",
        "description": "### Description\nUpdates a evaluation dataset\n\n### Details\nThis API can be used to update the evaluation dataset that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePatchEvaluationDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Evaluation Dataset",
        "description": "### Description\n\nDeletes the dataset, and all other entities associated with the dataset, such as test cases, evaluations and results.\n\n### Details\n\n**This is a permanent and destructive action that cannot be undone.**",
        "operationId": "DELETE-V4-/evaluation-datasets/{evaluation_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Evaluation Dataset Versions",
        "description": "### Description\nLists all evaluation dataset versions accessible to the user.\n\n### Details\nThis API can be used to list evaluation dataset versions. If a user has access to multiple accounts, all evaluation dataset versions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset Version",
        "description": "### Description\nCreates a evaluation dataset version\n\n### Details\nThis API can be used to create a evaluation dataset version. To use this API, review the request schema and pass in all fields that are required to create a evaluation dataset version.",
        "operationId": "POST-V4-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationDatasetVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset Version",
        "description": "### Description\nGets the details of a evaluation dataset version\n\n### Details\nThis API can be used to get information about a single evaluation dataset version by ID. To use this API, pass in the `id` that was returned from your Create Evaluation Dataset Version API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Test Cases",
        "description": "### Description\nList all test cases for a selected dataset.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Test Case",
        "description": "### Description\nCreate a test case for a selected dataset.",
        "operationId": "POST-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Batch Create Test Cases",
        "description": "### Description\nCreates a batch of test cases\n\n### Details\nThis API can be used to create multiple test cases so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test cases in the request body.",
        "operationId": "POST-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseVersionRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Post-V4-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Test Case",
        "description": "### Description\nUpdate a test case.",
        "operationId": "PATCH-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialTestCaseVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Test Case",
        "description": "### Description\nDelete a specified test case -- retaining older version belonging to older dataset versions.\n\n### Details\nThis request shouldn't be used when deleting due to compliance reasons. See Wipe action.",
        "operationId": "DELETE-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Historical Test Case",
        "description": "### Description\nGet the test case by its id for a specified dataset version.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get All Versions of Test Case",
        "description": "Get all versions of a Test Case by lineage ID.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
                  },
                  "title": "Response Get-V4-/Evaluation-Datasets/{Evaluation Dataset Id}/Test-Cases/{Test Case Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Wipe Full History of Test Cases",
        "description": "### Description\nDelete a specified test case and remove all its history from past dataset versions too.",
        "operationId": "DELETE-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/{test_case_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Historical Test Cases",
        "description": "### Description\nList all test cases for a specified dataset version.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/test-cases/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTestCaseVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/studio-projects": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "List Studio Projects",
        "description": "### Description\nLists all studio projects accessible to the user.\n\n### Details\nThis API can be used to list studio projects. If a user has access to multiple accounts, all studio projects from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedStudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Create Studio Project",
        "description": "### Description\nCreates a studio project\n\n### Details\nThis API can be used to create a studio project. To use this API, review the request schema and pass in all fields that are required to create a studio project.",
        "operationId": "POST-V4-/studio-projects",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/studio-projects/{studio_project_id}": {
      "get": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Get Studio Project",
        "description": "### Description\nGets the details of a studio project\n\n### Details\nThis API can be used to get information about a single studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Update Studio Project",
        "description": "### Description\nUpdates a studio project\n\n### Details\nThis API can be used to update the studio project that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialStudioProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudioProjectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Studio Projects"
        ],
        "summary": "Delete Studio Project",
        "description": "### Description\nDeletes a studio project\n\n### Details\nThis API can be used to delete a studio project by ID. To use this API, pass in the `id` that was returned from your Create Studio Project API call as a path parameter.",
        "operationId": "DELETE-V4-/studio-projects/{studio_project_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "studio_project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Studio Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-specs": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "List Application Specs",
        "description": "### Description\nLists all application specs accessible to the user.\n\n### Details\nThis API can be used to list application specs. If a user has access to multiple accounts, all application specs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Create Application Spec",
        "description": "### Description\nCreates a application spec\n\n### Details\nThis API can be used to create a application spec. To use this API, review the request schema and pass in all fields that are required to create a application spec.",
        "operationId": "POST-V4-/application-specs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-specs/{application_spec_id}": {
      "get": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Get Application Spec",
        "description": "### Description\nGets the details of a application spec\n\n### Details\nThis API can be used to get information about a single application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Update Application Spec",
        "description": "### Description\nUpdates a application spec\n\n### Details\nThis API can be used to update the application spec that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application Specs"
        ],
        "summary": "Delete Application Spec",
        "description": "### Description\nDeletes a application spec\n\n### Details\nThis API can be used to delete a application spec by ID. To use this API, pass in the `id` that was returned from your Create Application Spec API call as a path parameter.",
        "operationId": "DELETE-V4-/application-specs/{application_spec_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Evaluations",
        "description": "### Description\nLists all evaluations accessible to the user.\n\n### Details\nThis API can be used to list evaluations. If a user has access to multiple accounts, all evaluations from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortByEnumForLegacyEvaluation"
              },
              "default": [],
              "title": "Sort By"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedLegacyEvaluationResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Evaluation",
        "description": "### Description\nCreates a evaluation\n\n### Details\nThis API can be used to create a evaluation. To use this API, review the request schema and pass in all fields that are required to create a evaluation.",
        "operationId": "POST-V4-/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationRequestUnion"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation",
        "description": "### Description\nGets the details of a evaluation\n\n### Details\nThis API can be used to get information about a single evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation",
        "description": "### Description\nUpdates a evaluation\n\n### Details\nThis API can be used to update the evaluation that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestorablePartialPatchEvaluationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyEvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Delete Evaluation",
        "description": "### Description\nDeletes a evaluation\n\n### Details\nThis API can be used to delete a evaluation by ID. To use this API, pass in the `id` that was returned from your Create Evaluation API call as a path parameter.",
        "operationId": "DELETE-V4-/evaluations/{evaluation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Test Case Results",
        "description": "### Description\nLists all test case results accessible to the user.\n\n### Details\nThis API can be used to list test case results. If a user has access to multiple accounts, all test case results from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTestCaseResultResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Test Case Result",
        "description": "### Description\nCreates a test case result\n\n### Details\nThis API can be used to create a test case result. To use this API, review the request schema and pass in all fields that are required to create a test case result.",
        "operationId": "POST-V4-/evaluations/{evaluation_id}/test-case-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results/batch": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Batch Create Test Case Results",
        "description": "### Description\nCreates a batch of test case results\n\n### Details\nThis API can be used to create multiple test case results so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of test case results in the request body.",
        "operationId": "POST-V4-/evaluations/{evaluation_id}/test-case-results/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestCaseResultRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Post-V4-/Evaluations/{Evaluation Id}/Test-Case-Results/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Test Case Result",
        "description": "### Description\nGets the details of a test case result\n\n### Details\nThis API can be used to get information about a single test case result by ID. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Test Case Result",
        "description": "### Description\nUpdates a test case result\n\n### Details\nThis API can be used to update the test case result that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Test Case Result API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialTestCaseResultRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Historical Test Case Result",
        "operationId": "GET-V4-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get All Versions of Test Case Result",
        "description": "Get all versions of a Test Case Result by lineage ID.",
        "operationId": "GET-V4-/evaluations/{evaluation_id}/test-case-results/{test_case_result_id}/history",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "test_case_result_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Result Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestCaseResultResponse"
                  },
                  "title": "Response Get-V4-/Evaluations/{Evaluation Id}/Test-Case-Results/{Test Case Result Id}/History"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/test-case-results/history/{num}": {
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Historical Test Case Results",
        "operationId": "GET-V4-/evaluations/{evaluation_id}/test-case-results/history/{num}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "num",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Num"
            }
          },
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTestCaseResultResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/questions": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "List Questions",
        "description": "### Description\nLists all questions accessible to the user.\n\n### Details\nThis API can be used to list questions. If a user has access to multiple accounts, all questions from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedQuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create Question",
        "description": "### Description\nCreates a question\n\n### Details\nThis API can be used to create a question. To use this API, review the request schema and pass in all fields that are required to create a question.",
        "operationId": "POST-V4-/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/questions/{question_id}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get Question",
        "description": "### Description\nGets the details of a question\n\n### Details\nThis API can be used to get information about a single question by ID. To use this API, pass in the `id` that was returned from your Create Question API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/questions/{question_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/question-sets": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "List Question Sets",
        "description": "### Description\nLists all question sets accessible to the user.\n\n### Details\nThis API can be used to list question sets. If a user has access to multiple accounts, all question sets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuestionSetViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedQuestionSetResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Create Question Set",
        "description": "### Description\nCreates a question set\n\n### Details\nThis API can be used to create a question set. To use this API, review the request schema and pass in all fields that are required to create a question set.",
        "operationId": "POST-V4-/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-base-data-sources": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "List Knowledge Base Data Sources",
        "description": "### Description\nLists all knowledge base data sources accessible to the user.\n\n### Details\nThis API can be used to list knowledge base data sources. If a user has access to multiple accounts, all knowledge base data sources from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedKnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Create Knowledge Base Data Source",
        "description": "### Description\nCreates a knowledge base data source\n\n### Details\nThis API can be used to create a knowledge base data source. To use this API, review the request schema and pass in all fields that are required to create a knowledge base data source.",
        "operationId": "POST-V4-/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-base-data-sources/{knowledge_base_data_source_id}": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Get Knowledge Base Data Source",
        "description": "### Description\nGets the details of a knowledge base data source\n\n### Details\nThis API can be used to get information about a single knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Update Knowledge Base Data Source",
        "description": "### Description\nUpdates a knowledge base data source\n\n### Details\nThis API can be used to update the knowledge base data source that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseDataSourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Delete Knowledge Base Data Source",
        "description": "### Description\nDeletes a knowledge base data source\n\n### Details\nThis API can be used to delete a knowledge base data source by ID. To use this API, pass in the `id` that was returned from your Create Knowledge Base Data Source API call as a path parameter.",
        "operationId": "DELETE-V4-/knowledge-base-data-sources/{knowledge_base_data_source_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/upload-schedules": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Upload Schedules",
        "description": "### Description\nLists all upload schedules accessible to the user.\n\n### Details\nThis API can be used to list upload schedules. If a user has access to multiple accounts, all upload schedules from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedKnowledgeBaseUploadScheduleResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Create Upload Schedule",
        "description": "### Description\nCreates a upload schedule\n\n### Details\nThis API can be used to create a upload schedule. To use this API, review the request schema and pass in all fields that are required to create a upload schedule.",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/upload-schedules",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Get Upload Schedule",
        "description": "### Description\nGets the details of a upload schedule\n\n### Details\nThis API can be used to get information about a single upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Update Upload Schedule",
        "description": "### Description\nUpdates a upload schedule\n\n### Details\nThis API can be used to update the upload schedule that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialKnowledgeBaseUploadScheduleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Delete Upload Schedule",
        "description": "### Description\nDeletes a upload schedule\n\n### Details\nThis API can be used to delete a upload schedule by ID. To use this API, pass in the `id` that was returned from your Create Upload Schedule API call as a path parameter.",
        "operationId": "DELETE-V4-/knowledge-bases/{knowledge_base_id}/upload-schedules/{upload_schedule_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          },
          {
            "name": "upload_schedule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upload Schedule Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Autogenerated Draft Test Case",
        "description": "### Description\nCreates a autogenerated draft test case\n\n### Details\nThis API can be used to create a autogenerated draft test case. To use this API, review the request schema and pass in all fields that are required to create a autogenerated draft test case.",
        "operationId": "POST-V4-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "List Autogenerated Draft Test Cases",
        "operationId": "GET-V4-/autogenerated-draft-test-cases",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "check_missing_chunks",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Check if test cases are based on missing chunks",
              "default": false,
              "title": "Check Missing Chunks"
            },
            "description": "Check if test cases are based on missing chunks"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Autogenerated Draft Test Case",
        "description": "### Description\nGet the test case by its id.",
        "operationId": "GET-V4-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Update Autogenerated Draft Test Case",
        "description": "### Description\nUpdate a test case draft.",
        "operationId": "PATCH-V4-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialAutoGeneratedDraftTestCaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Autogenerated Draft Test Case",
        "description": "### Description\nDelete a specified draft test case. This version will not be retained.",
        "operationId": "DELETE-V4-/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}/approve": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Approve Autogenerated Draft Test Case",
        "operationId": "POST-V4-/autogenerated-draft-test-cases/{autogenerated_draft_test_case_id}/approve",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "autogenerated_draft_test_case_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Autogenerated Draft Test Case Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force approve a failing test case",
              "default": false,
              "title": "Force"
            },
            "description": "Force approve a failing test case"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveAutoGeneratedDraftTestCaseResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/publish": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Publish Latest Evaluation Dataset Version",
        "operationId": "POST-V4-/publish",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force approve an evaluation dataset",
              "default": false,
              "title": "Force"
            },
            "description": "Force approve an evaluation dataset"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishEvaluationDatasetDraftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/approve-batch": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Approve Auto Generated Test Cases Batch",
        "operationId": "POST-V4-/approve-batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force approve a batch of autogenerated test case IDs for the evaluation dataset",
              "default": false,
              "title": "Force"
            },
            "description": "Force approve a batch of autogenerated test case IDs for the evaluation dataset"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseApproveBatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseApproveBatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/generation-jobs": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset Generation Jobs",
        "operationId": "GET-V4-/generation-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEvaluationDatasetGenerationJobsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Create Evaluation Dataset Generation Job",
        "operationId": "POST-V4-/generation-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationDatasetGenerationJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEvaluationDatasetGenerationJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/generation-jobs/{generation_job_id}": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Evaluation Dataset Generation Job",
        "operationId": "GET-V4-/generation-jobs/{generation_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "generation_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Generation Job Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEvaluationDatasetGenerationJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/generation-jobs/{generation_job_id}/cancel": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Cancel Evaluation Dataset Generation Job",
        "operationId": "POST-V4-/generation-jobs/{generation_job_id}/cancel",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "generation_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Generation Job Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions/{evaluation_dataset_version_id}/publish": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Publish Evaluation Dataset Version",
        "operationId": "POST-V4-/evaluation-dataset-versions/{evaluation_dataset_version_id}/publish",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Version Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force approve an evaluation dataset",
              "default": false,
              "title": "Force"
            },
            "description": "Force approve an evaluation dataset"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublishEvaluationDatasetDraftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Models",
        "description": "### Description\nLists all models accessible to the user.\n\n### Details\nThis API can be used to list models. If a user has access to multiple accounts, all models from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInstanceViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortByEnumForModelInstance"
              },
              "default": [],
              "title": "Sort By"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "model_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Group Id"
            }
          },
          {
            "name": "model_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Type"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelInstanceResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create Model",
        "description": "### Description\n\nCreates and hosts a model based on a model template.\n\nBase embedding models, chunk ranking functions, and LLMs are often not sufficient for customer use cases. We have shown in various blogs that fine-tuning these models on customer data can lead to significant improvements in performance.\n\n1. [We Fine-Tuned GPT-4 to Beat the Industry Standard for Text2SQL]( https://scale.com/blog/text2sql-fine-tuning)\n2. [OpenAI Names Scale as Preferred Partner to Fine-Tune GPT-3.5]( https://scale.com/blog/open-ai-scale-partnership-gpt-3-5-fine-tuning)\n3. [How to Fine-Tune GPT-3.5 Turbo With OpenAI API]( https://scale.com/blog/fine-tune-gpt-3.5)\n        \n\n### Details\n\nBefore creating a model, you must first create a model template. A model template serves 2 purposes. First, it provides  common scaffolding that is static across multiple models. Second, it exposes several variables that can be injected at model creation time to customize the model.\n\nFor example, a model template can define a docker image that contains code to run a HuggingFace or SentenceTransformers model. This docker image code also accepts environment variables that can be set to swap out the model weights or model name. Refer to the Create Model Template API for more details.\n\nTo create a new model, users must refer to an existing model template and provide the necessary parameters the the model template requires in its `model_creation_parameters_schema` field. The combination of the model template and the model creation parameters will be used to create and deploy a new model.\n\nOnce a model has been created, it can be executed by calling the Execute Model API.\n        \n\n\n### Coming Soon\nSome of our EGP APIs depend on models, for example Knowledge Base APIs depend on embedding models, Chunk Ranking APIs depend on ranking models, and Completion APIs depend on LLMs.\n\nIn the near future, if a model is created from a model template that is compatible with one of these APIs (based on the model template's `model_type field`), the model will automatically be registered with the API. This will allow users to immediately start using the model with those API without any additional setup.",
        "operationId": "POST-V4-/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model",
        "description": "### Description\nGets the details of a model\n\n### Details\nThis API can be used to get information about a single model by ID. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelInstanceViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Model",
        "description": "### Description\nUpdates a model\n\n### Details\nThis API can be used to update the model that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Model",
        "description": "### Description\nDeletes a model\n\n### Details\nThis API can be used to delete a model by ID. To use this API, pass in the `id` that was returned from your Create Model API call as a path parameter.",
        "operationId": "DELETE-V4-/models/{model_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-groups": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Model Groups",
        "description": "### Description\nLists all model groups accessible to the user.\n\n### Details\nThis API can be used to list model groups. If a user has access to multiple accounts, all model groups from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/model-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create Model Group",
        "description": "### Description\n\nModel groups are grouping models together. You can add models with the same base_model_id.",
        "operationId": "POST-V4-/model-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-groups/{model_group_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model Group",
        "description": "### Description\nGets the details of a model group\n\n### Details\nThis API can be used to get information about a single model group by ID. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Model Group",
        "description": "### Description\nUpdates a model group\n\n### Details\nThis API can be used to update the model group that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelGroupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Model Group",
        "description": "### Description\nDeletes a model group\n\n### Details\nThis API can be used to delete a model group by ID. To use this API, pass in the `id` that was returned from your Create Model Group API call as a path parameter.",
        "operationId": "DELETE-V4-/model-groups/{model_group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/models/{model_instance_id}/deployments/{deployment_id}": {
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Deployment",
        "description": "### Description\nGets the details of a deployment\n\n### Details\nThis API can be used to get information about a single deployment by ID. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Deployment",
        "description": "### Description\nUpdates a deployment\n\n### Details\nThis API can be used to update the deployment that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialModelDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Deployment",
        "description": "### Description\nDeletes a deployment\n\n### Details\nThis API can be used to delete a deployment by ID. To use this API, pass in the `id` that was returned from your Create Deployment API call as a path parameter.",
        "operationId": "DELETE-V4-/models/{model_instance_id}/deployments/{deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Instance Id"
            }
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-templates": {
      "get": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "List Model Templates",
        "description": "### Description\nLists all model templates accessible to the user.\n\n### Details\nThis API can be used to list model templates. If a user has access to multiple accounts, all model templates from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/model-templates",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedModelTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Create Model Template",
        "description": "### Description\nCreates a model template.\n\n### Details\n\nModel templates serve 2 purposes. First, they provide common scaffolding that is static across multiple models. Second, they expose several variables that can be injected at model creation time to customize the model.\n\nFor example, a model template can define a docker image that contains code to run a HuggingFace or SentenceTransformers model. This docker image code also accepts environment variables that can be set to swap out the model weights or model name.\n\nTwo of the most important fields required to create a model template are the `model_creation_parameters_schema` and `model_request_parameters_schema` fields.\n\nThe `model_creation_parameters_schema` field defines the schema for parameters that can be injected at model creation time. For example, if the schema contains a `model_weights_uri` field, which expects a string, when a model is created from this template, the user can provide a URI to a model weights file that can be used to swap out the model weights used by the model.\n\nThe `model_request_parameters_schema` field defines the schema for parameters that can be injected by an end user at model execution time. For example, if the schema contains a `model_request_parameters` field, which expects a string, when a model is executed, the user can provide a string that will be passed to the model for inference.",
        "operationId": "POST-V4-/model-templates",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/model-templates/{model_template_id}": {
      "get": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Get Model Template",
        "description": "### Description\nGets the details of a model template\n\n### Details\nThis API can be used to get information about a single model template by ID. To use this API, pass in the `id` that was returned from your Create Model Template API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/model-templates/{model_template_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Model Templates V3 (Beta)"
        ],
        "summary": "Delete Model Template",
        "description": "### Description\nDeletes a model template\n\n### Details\nThis API can be used to delete a model template by ID. To use this API, pass in the `id` that was returned from your Create Model Template API call as a path parameter.",
        "operationId": "DELETE-V4-/model-templates/{model_template_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/{model_server_id}/execute": {
      "post": {
        "tags": [
          "Model server"
        ],
        "summary": "Fixed Server interface for Model execution",
        "operationId": "POST-V4-/v4/serving/{model_server_id}/execute",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericModelResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/a/{alias}/execute": {
      "post": {
        "tags": [
          "Model server"
        ],
        "summary": "Fixed Server interface for Model execution by named alias",
        "operationId": "POST-V4-/v4/serving/a/{alias}/execute",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alias"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericModelResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving": {
      "get": {
        "summary": "Fixed Server interface for Model execution by named alias",
        "operationId": "GET-V4-/v4/serving",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListModelServerResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Model server"
        ],
        "summary": "Create a new Model Server",
        "operationId": "POST-V4-/v4/serving",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModelServerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelServerInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/{model_server_id}": {
      "get": {
        "summary": "Fixed Server interface for Model execution by named alias",
        "operationId": "GET-V4-/v4/serving/{model_server_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelServerInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Model Server",
        "operationId": "DELETE-V4-/v4/serving/{model_server_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/a/{alias}": {
      "get": {
        "summary": "Fixed Server interface for Model execution by named alias",
        "operationId": "GET-V4-/v4/serving/a/{alias}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Alias"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelServerInfo"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/{model_server_id}/deployment": {
      "get": {
        "tags": [
          "Model server"
        ],
        "summary": "Get current deployment of the Model Server",
        "operationId": "GET-V4-/v4/serving/{model_server_id}/deployment",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetModelServerDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/{model_server_id}/backend": {
      "put": {
        "tags": [
          "Model server"
        ],
        "summary": "Change backend of the Model Server",
        "operationId": "PUT-V4-/v4/serving/{model_server_id}/backend",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeBackendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeBackendResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/serving/{model_server_id}/rollback": {
      "post": {
        "tags": [
          "Model server"
        ],
        "summary": "Rollback backend of the Model Server",
        "operationId": "POST-V4-/v4/serving/{model_server_id}/rollback",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_server_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Server Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RollbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/fine-tuning-jobs": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "List Fine Tuning Jobs",
        "description": "### Description\nLists all fine tuning jobs accessible to the user.\n\n### Details\nThis API can be used to list fine tuning jobs. If a user has access to multiple accounts, all fine tuning jobs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/fine-tuning-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFineTuningJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Create Fine Tuning Job",
        "description": "### Description\nModel fine tuning jobs.\n\n### Details\n\nTODO",
        "operationId": "POST-V4-/fine-tuning-jobs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FineTuningJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/fine-tuning-jobs/{fine_tuning_job_id}": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Get Fine Tuning Job",
        "description": "### Description\nGets the details of a fine tuning job\n\n### Details\nThis API can be used to get information about a single fine tuning job by ID. To use this API, pass in the `id` that was returned from your Create Fine Tuning Job API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/fine-tuning-jobs/{fine_tuning_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTuningJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Delete Fine Tuning Job",
        "description": "### Description\nDeletes a fine tuning job\n\n### Details\nThis API can be used to delete a fine tuning job by ID. To use this API, pass in the `id` that was returned from your Create Fine Tuning Job API call as a path parameter.",
        "operationId": "DELETE-V4-/fine-tuning-jobs/{fine_tuning_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/fine-tuning-jobs/{fine_tuning_job_id}/events": {
      "get": {
        "tags": [
          "Fine Tuning Jobs V3 (Beta)"
        ],
        "summary": "Get fine tuning job events",
        "operationId": "GET-V4-/fine-tuning-jobs/{fine_tuning_job_id}/events",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "fine_tuning_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Fine Tuning Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FineTuningJobEvent"
                  },
                  "title": "Response Get-V4-/Fine-Tuning-Jobs/{Fine Tuning Job Id}/Events"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/training-datasets": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "List Training Datasets",
        "description": "### Description\nLists all training datasets accessible to the user.\n\n### Details\nThis API can be used to list training datasets. If a user has access to multiple accounts, all training datasets from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/training-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTrainingDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Create Training Dataset",
        "operationId": "POST-V4-/training-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V4-_training-datasets"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/training-datasets/{training_dataset_id}": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Get Training Dataset",
        "description": "### Description\nGets the details of a training dataset\n\n### Details\nThis API can be used to get information about a single training dataset by ID. To use this API, pass in the `id` that was returned from your Create Training Dataset API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/training-datasets/{training_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Delete Training Dataset",
        "description": "### Description\nDeletes a training dataset\n\n### Details\nThis API can be used to delete a training dataset by ID. To use this API, pass in the `id` that was returned from your Create Training Dataset API call as a path parameter.",
        "operationId": "DELETE-V4-/training-datasets/{training_dataset_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/training-datasets/{training_dataset_id}/contents": {
      "get": {
        "tags": [
          "Training Datasets V3 (Beta)"
        ],
        "summary": "Get Training Dataset Contents",
        "operationId": "GET-V4-/training-datasets/{training_dataset_id}/contents",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "training_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Training Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TrainingDatasetGenerationItem"
                  },
                  "title": "Response Get-V4-/Training-Datasets/{Training Dataset Id}/Contents"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/install": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Install a deployment packages",
        "operationId": "POST-V4-/deployment-packages/{account_id}/install",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeploymentPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstallDeploymentPackageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/copy-to-control-plane-hook": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Copy a deployment package to control plane hook",
        "operationId": "POST-V4-/deployment-packages/{account_id}/copy-to-control-plane-hook",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyDeploymentPackageToControlPlaneHookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyDeploymentPackageToControlPlaneHookResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/install_async": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Install a deployment packages",
        "operationId": "POST-V4-/deployment-packages/{account_id}/install_async",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeploymentPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/verify-install-prerequisites-met": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Verify that the prerequisites for installing a specific package version are met",
        "description": "This endpoint verifies that installation prerequisites are met for a specific package version.\nThe input is the same as for package installations, but the response may be a synchronous one\nif the package version has no prerequisites.",
        "operationId": "POST-V4-/deployment-packages/{account_id}/verify-install-prerequisites-met",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPackageVersionPrerequisitesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Post-V4-/Deployment-Packages/{Account Id}/Verify-Install-Prerequisites-Met"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/beta/chat/completions": {
      "post": {
        "tags": [
          "Beta"
        ],
        "summary": "Chat Completions",
        "operationId": "POST-V4-beta-/v5/chat/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models__ChatCompletion"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionChunk"
                    }
                  ],
                  "title": "Response Post-V4-Beta-/V5/Chat/Completions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/beta/completions": {
      "post": {
        "tags": [
          "Beta"
        ],
        "summary": "Completions",
        "operationId": "POST-V4-beta-/v5/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models__Completion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/application-variants": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application Variants",
        "description": "### Description\nLists all application variants accessible to the user.\n\n### Details\nThis API can be used to list application variants. If a user has access to multiple accounts, all application variants from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/application-variants",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application Variant",
        "description": "### Description\nCreates a application variant\n\n### Details\nThis API can be used to create a application variant. To use this API, review the request schema and pass in all fields that are required to create a application variant.",
        "operationId": "POST-V4-/application-variants",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVariantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidApplicationResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-variants/{application_variant_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Variant",
        "description": "### Description\nGets the details of a application variant\n\n### Details\nThis API can be used to get information about a single application variant by ID. To use this API, pass in the `id` that was returned from your Create Application Variant API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/application-variants/{application_variant_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Application Variant",
        "description": "### Description\nUpdates a application variant\n\n### Details\nThis API can be used to update the application variant that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Application Variant API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/application-variants/{application_variant_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchApplicationVariantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Application Variant",
        "description": "### Description\nDeletes a application variant\n\n### Details\nThis API can be used to delete a application variant by ID. To use this API, pass in the `id` that was returned from your Create Application Variant API call as a path parameter.",
        "operationId": "DELETE-V4-/application-variants/{application_variant_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-deployments": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application Deployments",
        "description": "### Description\nLists all application deployments accessible to the user.\n\n### Details\nThis API can be used to list application deployments. If a user has access to multiple accounts, all application deployments from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/application-deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_variant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application Deployment",
        "description": "### Description\nCreates a application deployment\n\n### Details\nThis API can be used to create a application deployment. To use this API, review the request schema and pass in all fields that are required to create a application deployment.",
        "operationId": "POST-V4-/application-deployments",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-deployments/{application_deployment_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Deployment",
        "description": "### Description\nGets the details of a application deployment\n\n### Details\nThis API can be used to get information about a single application deployment by ID. To use this API, pass in the `id` that was returned from your Create Application Deployment API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/application-deployments/{application_deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Deployment Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Application Deployment",
        "description": "### Description\nUpdates a application deployment\n\n### Details\nThis API can be used to update the application deployment that matches the ID that was passed in as a path parameter. To use this API, pass in the `id` that was returned from your Create Application Deployment API call as a path parameter.\n\nReview the request schema to see the fields that can be updated.",
        "operationId": "PATCH-V4-/application-deployments/{application_deployment_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Deployment Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialApplicationDeploymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDeploymentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-variant-reports": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application Variant Reports",
        "description": "### Description\nLists all application variant reports accessible to the user.\n\n### Details\nThis API can be used to list application variant reports. If a user has access to multiple accounts, all application variant reports from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/application-variant-reports",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationVariantReportViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "application_variant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationVariantReportWithScoresResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application Variant Report",
        "description": "### Description\nCreates a application variant report\n\n### Details\nThis API can be used to create a application variant report. To use this API, review the request schema and pass in all fields that are required to create a application variant report.",
        "operationId": "POST-V4-/application-variant-reports",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVariantReportGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariantReportWithScoresResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-variant-reports/{application_variant_report_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Variant Report",
        "description": "### Description\nGets the details of a application variant report\n\n### Details\nThis API can be used to get information about a single application variant report by ID. To use this API, pass in the `id` that was returned from your Create Application Variant Report API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/application-variant-reports/{application_variant_report_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_report_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Report Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationVariantReportViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariantReportWithScoresResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-test-case-outputs": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Application Test Case Outputs",
        "description": "### Description\nLists all application test case outputs accessible to the user.\n\n### Details\nThis API can be used to list application test case outputs. If a user has access to multiple accounts, all application test case outputs from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/application-test-case-outputs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTestCaseOutputViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "application_variant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Id"
            }
          },
          {
            "name": "application_variant_report_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Report Id"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_num",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Dataset Version Num"
            }
          },
          {
            "name": "application_test_case_output_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Test Case Output Group Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationTestCaseOutputResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-test-case-outputs/batch": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Batch Create Application Test Case Outputs",
        "description": "### Description\nCreates a batch of application test case outputs\n\n### Details\nThis API can be used to create multiple application test case outputs so users do not have to the incur the cost of repeated network calls. To use this API, pass in a list of application test case outputs in the request body.",
        "operationId": "POST-V4-/application-test-case-outputs/batch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApplicationTestCaseOutputRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTestCaseOutputResponse"
                  },
                  "title": "Response Post-V4-/Application-Test-Case-Outputs/Batch"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-test-case-outputs/{application_test_case_output_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Test Case Output",
        "description": "### Description\nGets the details of a application test case output\n\n### Details\nThis API can be used to get information about a single application test case output by ID. To use this API, pass in the `id` that was returned from your Create Application Test Case Output API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/application-test-case-outputs/{application_test_case_output_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_test_case_output_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Test Case Output Id"
            }
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTestCaseOutputViewsOptions"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "View"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTestCaseOutputResponseWithViews"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-with-variant": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application With Variant",
        "description": "Create an application with a variant in a single transaction.",
        "operationId": "POST-V4-/application-with-variant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationWithVariantRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/application-schemas": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Schemas",
        "operationId": "GET-V4-/application-schemas",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ApplicationSchemaVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ApplicationNodeSchemaRegistryRecord"
                  },
                  "title": "Response Get-V4-/Application-Schemas"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/process": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Process Application",
        "operationId": "POST-V4-/applications/process",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestApplicationProcessingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidApplicationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationProcessingErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/applications/{application_variant_id}/process": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Process Application By Id",
        "operationId": "POST-V4-/applications/{application_variant_id}/process",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationProcessingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationProcessingErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_variant_id}/threads/{thread_id}/process": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Process Deployed Application For Thread",
        "operationId": "POST-V4-/applications/{application_variant_id}/threads/{thread_id}/process",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationProcessingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationProcessingErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/process/{application_alias}": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Process Application By Alias",
        "operationId": "POST-V4-/applications/process/{application_alias}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Alias"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationProcessingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationProcessingErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/validate": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Validate Application",
        "operationId": "POST-V4-/applications/validate",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidApplicationResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_variant_id}/threads": {
      "get": {
        "tags": [
          "Applications",
          "ChatThreads"
        ],
        "summary": "List Application Threads",
        "operationId": "GET-V4-/applications/{application_variant_id}/threads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include archived threads in the response.",
              "default": true,
              "title": "Include Archived"
            },
            "description": "Include archived threads in the response."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatThreadResponse"
                  },
                  "title": "Response Get-V4-/Applications/{Application Variant Id}/Threads"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applications",
          "ChatThreads"
        ],
        "summary": "Create New Application Thread",
        "operationId": "POST-V4-/applications/{application_variant_id}/threads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatThreadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/upload-files": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Upload Application Files",
        "operationId": "POST-V4-/applications/upload-files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account which the file will be tied to. Use this account id query param if you are using the API or the SDK.",
              "title": "Account Id"
            },
            "description": "Account which the file will be tied to. Use this account id query param if you are using the API or the SDK."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V4-_applications_upload-files"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationFileResponse"
                  },
                  "title": "Response Post-V4-/Applications/Upload-Files"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_variant_id}/guardrails": {
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Patch Application Variant Guardrails",
        "description": "Updates the application variant's guardrail_config list with the guardrail IDs provided in the patch request.",
        "operationId": "PATCH-V4-/applications/{application_variant_id}/guardrails",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchApplicationVariantGuardrail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-variants/{application_variant_id}/publish": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Publish Application Variant",
        "operationId": "POST-V4-/application-variants/{application_variant_id}/publish",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/threads/{thread_id}/messages": {
      "get": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Get Thread Messages",
        "operationId": "GET-V4-/threads/{thread_id}/messages",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "fetch_by_account",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fetch the thread by account instead of user",
              "default": false,
              "title": "Fetch By Account"
            },
            "description": "Fetch the thread by account instead of user"
          },
          {
            "name": "fetch_spans",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fetch spans for each message",
              "default": false,
              "title": "Fetch Spans"
            },
            "description": "Fetch spans for each message"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatThreadHistory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/threads/{thread_id}": {
      "patch": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Patch Chat Thread",
        "operationId": "PATCH-V4-/threads/{thread_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatThreadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Delete Chat Thread",
        "operationId": "DELETE-V4-/threads/{thread_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/threads/{thread_id}/messages/{application_interaction_id}": {
      "patch": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Patch Chat Thread Entry",
        "operationId": "PATCH-V4-/threads/{thread_id}/messages/{application_interaction_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "application_interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Interaction Id"
            }
          },
          {
            "name": "fetch_by_account",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fetch the thread by account instead of user",
              "default": false,
              "title": "Fetch By Account"
            },
            "description": "Fetch the thread by account instead of user"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChatThreadEntryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInteractionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/threads/{thread_id}/messages/{application_interaction_id}/feedback": {
      "put": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Add Feedback To Thread Entry",
        "operationId": "PUT-V4-/threads/{thread_id}/messages/{application_interaction_id}/feedback",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "application_interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Interaction Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatThreadFeedbackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatThreadFeedbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChatThreads"
        ],
        "summary": "Delete Interaction Feedback",
        "operationId": "DELETE-V4-/threads/{thread_id}/messages/{application_interaction_id}/feedback",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "application_interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Interaction Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/interactions/": {
      "post": {
        "tags": [
          "Interactions"
        ],
        "summary": "Create Application Interaction",
        "operationId": "POST-V4-/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InteractionEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/dashboards/{dashboard_id}": {
      "get": {
        "tags": [
          "MonitoringDashboard"
        ],
        "summary": "Get Dashboard Schema",
        "operationId": "GET-V4-/dashboards/{dashboard_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "dashboard_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DashboardID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/metrics/scalar/{metric_id}": {
      "get": {
        "tags": [
          "MonitoringDashboard"
        ],
        "summary": "Get Scalar Metric",
        "operationId": "GET-V4-/metrics/scalar/{metric_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "metric_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MetricID"
            }
          },
          {
            "name": "variants",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Which variants to filter on",
              "default": [],
              "title": "Variants"
            },
            "description": "Which variants to filter on"
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScalarData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/metrics/timeseries/{metric_id}": {
      "get": {
        "tags": [
          "MonitoringDashboard"
        ],
        "summary": "Get Timeseries Metric",
        "operationId": "GET-V4-/metrics/timeseries/{metric_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "metric_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MetricID"
            }
          },
          {
            "name": "variants",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Which variants to filter on",
              "default": [],
              "title": "Variants"
            },
            "description": "Which variants to filter on"
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeseriesData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/themes": {
      "get": {
        "tags": [
          "Chat Themes"
        ],
        "summary": "List Themes",
        "description": "### Description\nLists all themes accessible to the user.\n\n### Details\nThis API can be used to list themes. If a user has access to multiple accounts, all themes from all accounts the user is associated with will be returned.",
        "operationId": "GET-V4-/themes",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Account Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedThemeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Chat Themes"
        ],
        "summary": "Create Theme",
        "description": "### Description\nCustom chat themes",
        "operationId": "POST-V4-/themes",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThemeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/themes/{theme_id}": {
      "get": {
        "tags": [
          "Chat Themes"
        ],
        "summary": "Get Theme",
        "description": "### Description\nGets the details of a theme\n\n### Details\nThis API can be used to get information about a single theme by ID. To use this API, pass in the `id` that was returned from your Create Theme API call as a path parameter.\n\nReview the response schema to see the fields that will be returned.",
        "operationId": "GET-V4-/themes/{theme_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "theme_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Theme Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/general-role-restrictions/{role}": {
      "put": {
        "tags": [
          "account groups"
        ],
        "summary": "Upsert General Role Restriction",
        "description": "Create or update a restriction for an account group general role in your\norganization. Only available for organizations that have role restrictions\nenabled and only performable by organization admins.",
        "operationId": "PUT-V4-/account-groups/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupGeneralRole"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRestriction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V4-/account-groups/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts/general-role-restrictions/{role}": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Upsert General Role Restriction",
        "description": "Create or update a restriction for an account general role in your\norganization. Only available for organizations that have role restrictions\nenabled and only performable by organization admins.",
        "operationId": "PUT-V4-/accounts/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGeneralRole"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRestriction"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V4-/accounts/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/guardrails": {
      "get": {
        "tags": [
          "Guardrails"
        ],
        "summary": "List Guardrails",
        "operationId": "GET-V4-/guardrails",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GuardrailWithPolicies"
                  },
                  "title": "Response Get-V4-/Guardrails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Guardrails"
        ],
        "summary": "Create Guardrail",
        "operationId": "POST-V4-/guardrails",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGuardrailsWithPoliciesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/GuardrailResponse"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "title": "Response Post-V4-/Guardrails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/guardrails/{id}": {
      "get": {
        "tags": [
          "Guardrails"
        ],
        "summary": "Get Guardrail",
        "operationId": "GET-V4-/guardrails/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuardrailWithPolicies"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Guardrails"
        ],
        "summary": "Patch Guardrail",
        "operationId": "PATCH-V4-/guardrails/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchGuardrailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuardrailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/guardrails/policies/categories": {
      "get": {
        "tags": [
          "Guardrails"
        ],
        "summary": "List Attack Categories With Descriptions",
        "operationId": "GET-V4-/guardrails/policies/categories",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SafetyCategory"
                  },
                  "type": "array",
                  "title": "Response Get-V4-/Guardrails/Policies/Categories"
                }
              }
            }
          }
        }
      }
    },
    "/v4/guardrails/{id}/execute": {
      "post": {
        "tags": [
          "Guardrails"
        ],
        "summary": "Execute Guardrail",
        "operationId": "POST-V4-/guardrails/{id}/execute",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteGuardrailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteGuardrailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/beta/files": {
      "post": {
        "tags": [
          "Beta"
        ],
        "summary": "Upload File",
        "operationId": "POST-V4-beta-/files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V4-beta-_files"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Beta"
        ],
        "summary": "List Files",
        "operationId": "GET-V4-beta-/files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/beta/files/{file_id}": {
      "get": {
        "tags": [
          "Beta"
        ],
        "summary": "Get File",
        "operationId": "GET-V4-beta-/files/{file_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Beta"
        ],
        "summary": "Delete File",
        "operationId": "DELETE-V4-beta-/files/{file_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Beta"
        ],
        "summary": "Update File",
        "operationId": "PATCH-V4-beta-/files/{file_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/beta/files/{file_id}/content": {
      "get": {
        "tags": [
          "Beta"
        ],
        "summary": "Get File Content",
        "operationId": "GET-V4-beta-/files/{file_id}/content",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Beta"
        ],
        "summary": "Get File Content Metadata",
        "operationId": "HEAD-V4-beta-/files/{file_id}/content",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/inference": {
      "post": {
        "tags": [
          "Inference"
        ],
        "summary": "Generic Inference",
        "operationId": "POST-V5-/v5/inference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericInferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/GenericInferenceResponse"
                    },
                    {
                      "$ref": "#/components/schemas/GenericInferenceResponseChunk"
                    }
                  ],
                  "title": "Response Post-V5-/V5/Inference"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v5/chat/completions": {
      "post": {
        "tags": [
          "Inference"
        ],
        "summary": "Chat Completions",
        "operationId": "POST-V5-/v5/chat/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models__ChatCompletion"
                    },
                    {
                      "$ref": "#/components/schemas/ChatCompletionChunk"
                    }
                  ],
                  "title": "Response Post-V5-/V5/Chat/Completions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v5/completions": {
      "post": {
        "tags": [
          "Inference"
        ],
        "summary": "Completions",
        "operationId": "POST-V5-/v5/completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__CompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models__Completion"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v5/chat/completions/models": {
      "get": {
        "tags": [
          "Inference"
        ],
        "summary": "Chat Completions",
        "operationId": "GET-V5-/v5/chat/completions/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_vendor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InferenceModelVendor"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Vendor"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIList_ModelDefinition_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload File",
        "operationId": "POST-V5-/files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List Files",
        "operationId": "GET-V5-/files",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/files/{file_id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get File",
        "operationId": "GET-V5-/files/file_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete File",
        "operationId": "DELETE-V5-/files/file_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Files"
        ],
        "summary": "Update File",
        "operationId": "PATCH-V5-/files/file_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/files/{file_id}/content": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get File Content",
        "operationId": "GET-V5-/files/file_id/content",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Files"
        ],
        "summary": "Get File Content Metadata",
        "operationId": "HEAD-V5-/files/file_id/content",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/models": {
      "post": {
        "tags": [
          "Models"
        ],
        "summary": "Create Model",
        "operationId": "POST-V5-/v5/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "List Models",
        "operationId": "GET-V5-/v5/models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "model_vendor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InferenceModelVendor"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Model Vendor"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceModelList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/models/{model_id}": {
      "patch": {
        "tags": [
          "Models"
        ],
        "summary": "Update Model",
        "operationId": "PATCH-V5-/v5/models/model_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Models"
        ],
        "summary": "Delete Model",
        "operationId": "DELETE-V5-/v5/models/model_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceModelDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Models"
        ],
        "summary": "Get Model",
        "operationId": "GET-V5-/v5/models/model_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InferenceModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/datasets": {
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Create Dataset",
        "operationId": "POST-V5-/v5/datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "List Datasets",
        "operationId": "GET-V5-/v5/datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/datasets/{dataset_id}": {
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Delete Dataset",
        "operationId": "DELETE-V5-/v5/datasets/dataset_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Datasets"
        ],
        "summary": "Update Dataset",
        "operationId": "PATCH-V5-/v5/datasets/dataset_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Get Dataset",
        "operationId": "GET-V5-/v5/datasets/dataset_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/dataset-items/batch": {
      "post": {
        "tags": [
          "Dataset Items"
        ],
        "summary": "Batch Create Dataset Items",
        "operationId": "POST-V5-/v5/dataset-items/batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetItemBatchCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIList_DatasetItem_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v5/dataset-items/{dataset_item_id}": {
      "get": {
        "tags": [
          "Dataset Items"
        ],
        "summary": "Get Dataset Item",
        "operationId": "GET-V5-/v5/dataset-items/dataset_item_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Item Id"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional dataset version. When unset, returns the latest version.",
              "title": "Version"
            },
            "description": "Optional dataset version. When unset, returns the latest version."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Dataset Items"
        ],
        "summary": "Delete Dataset Item",
        "operationId": "DELETE-V5-/v5/dataset-items/dataset_item_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Item Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetItemDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Dataset Items"
        ],
        "summary": "Update Dataset Item",
        "operationId": "PATCH-V5-/v5/dataset-items/dataset_item_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "dataset_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasetItemUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/dataset-items": {
      "get": {
        "tags": [
          "Dataset Items"
        ],
        "summary": "List Dataset Items",
        "operationId": "GET-V5-/v5/dataset-items",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "dataset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional dataset identifier. Must be provided if a specific version is requested.",
              "title": "Dataset Id"
            },
            "description": "Optional dataset identifier. Must be provided if a specific version is requested."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional dataset version. When unset, returns the latest version. Requires a valid dataset_id when set.",
              "title": "Version"
            },
            "description": "Optional dataset version. When unset, returns the latest version. Requires a valid dataset_id when set."
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetItemList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/evaluations": {
      "post": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Create Evaluation",
        "operationId": "POST-V5-/v5/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "List Evaluations",
        "operationId": "GET-V5-/v5/evaluations",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Tags"
            }
          },
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EvaluationViews"
              },
              "default": [],
              "title": "Views"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/evaluations/{evaluation_id}": {
      "patch": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Update Evaluation",
        "operationId": "PATCH-V5-/v5/evaluations/evaluation_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Get Evaluation",
        "operationId": "GET-V5-/v5/evaluations/evaluation_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EvaluationViews"
              },
              "default": [],
              "title": "Views"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Evaluation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Evaluations"
        ],
        "summary": "Archive Evaluation",
        "operationId": "DELETE-V5-/v5/evaluations/evaluation_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/evaluation-items/{evaluation_item_id}": {
      "get": {
        "tags": [
          "Evaluation Items"
        ],
        "summary": "Get Evaluation Item",
        "operationId": "GET-V5-/v5/evaluation-items/evaluation_item_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Item Id"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/evaluation-items": {
      "get": {
        "tags": [
          "Evaluation Items"
        ],
        "summary": "List Evaluation Items",
        "operationId": "GET-V5-/v5/evaluation-items",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "evaluation_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Id"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationItemList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/spans": {
      "post": {
        "tags": [
          "Spans"
        ],
        "summary": "Create Span",
        "operationId": "POST-V5-/v5/spans",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpanCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Span"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Spans"
        ],
        "summary": "List Spans",
        "operationId": "GET-V5-/v5/spans",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "trace_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Trace Id"
            }
          },
          {
            "name": "parents_only",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Parents Only"
            }
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpanList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/spans/{span_id}": {
      "get": {
        "tags": [
          "Spans"
        ],
        "summary": "Get Span",
        "operationId": "GET-V5-/v5/spans/span_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Span Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Span"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Spans"
        ],
        "summary": "Update Span",
        "operationId": "PATCH-V5-/v5/spans/span_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "span_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Span Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpanUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Span"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-base-embedding-models": {
      "get": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "List Knowledge Base Embedding Models",
        "description": "### Description\nLists all embedding models that can be used when creating a KB\n\n### Details\nThis API returns:\n1. models from the internal_model_info table (in Scale Prod and VPC)\n2. static partner models (openai, cohere) (only in Sclae Prod)\n3. model deployments installed in the specified account where model_instance.type = EMBEDDING (in Scale Prod and VPC)\n\nIf there are duplicates, the priorities are:\n1. internal model info\n2. static partner models\n3. model deployment most recently created\n\nInternal model info models are necessary for scale prod, where legacy models may not have associated deployments.\nDeployments are necessary to enable using newer models that have been distributed via catalog, finetuned models, etc.",
        "operationId": "GET-V4-/knowledge-base-embedding-models",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListKnowledgeBaseEmbeddingModelsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Generate Download URLs for Artifacts",
        "operationId": "POST-V2-/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Generate Download URLs for Artifacts",
        "operationId": "POST-V3-/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls": {
      "post": {
        "tags": [
          "Knowledge Bases"
        ],
        "summary": "Generate Download URLs for Artifacts",
        "operationId": "POST-V4-/knowledge-bases/{knowledge_base_id}/artifacts/generate-download-urls",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateKnowledgeBaseV2ArtifactDownloadUrlsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/parse-job": {
      "post": {
        "tags": [
          "Parsing"
        ],
        "summary": "Parse a document",
        "operationId": "POST-V5-/parse-job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParseDocumentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/batch-completions": {
      "post": {
        "tags": [
          "Batch Completions"
        ],
        "summary": "Create Batch Completion",
        "description": "### Description\nGiven a list of prompts, runs LLM inference to produce the model's responses.\n\n### Details\nBatch completions are useful when you have a list of prompts that you want to run inference on         a large number of prompts and are willing to wait for the responses. Conceptually, this API         is similar to the [completions](https://scale-egp.readme.io/docs/completions-1) API, but         runs the prompts asynchronously. Currently only available for LLM Engine models.         Output gets stored in a location in s3 specified by the user.",
        "operationId": "POST-V4-/batch-completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBatchCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBatchCompletionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/register-user": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration",
        "description": "Register user with the given email and password. This endpoint is only accessible from Azure.",
        "operationId": "POST-V4-/register-user",
        "parameters": [
          {
            "name": "registration-secret",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Registration-Secret"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout",
        "operationId": "POST-V4-/logout",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/assume-profile": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Assume a different access profile that you have access to",
        "operationId": "POST-V4-/assume-profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssumeProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/feature-flag/{feature_flag_id}": {
      "get": {
        "summary": "Gets a feature flag value",
        "operationId": "GET-V4-/feature-flag/{feature_flag_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "feature_flag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Feature Flag Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter by account_id",
              "title": "Account Id"
            },
            "description": "Filter by account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check endpoint for all SGP services",
        "description": "Health check endpoint for all SGP services.\n\nAlways checks the following services:\n- EGP API DB\n- Temporal\n- Identity Service\n\nAdditional services can be checked by passing a list of service names in the query parameter `targets`.\n\nNote: Disabling the registration_secret requirement for TMO.",
        "operationId": "GET-V4-/health",
        "parameters": [
          {
            "name": "targets",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "List of services to check",
              "default": [],
              "title": "Targets"
            },
            "description": "List of services to check"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/attestation": {
      "post": {
        "summary": "Submit Attestation",
        "operationId": "POST-V5-/attestation",
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttestationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/application-specs/{application_spec_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an application",
        "operationId": "GET-V2-/v2/application-specs/{application_spec_id}/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/application-specs/{application_spec_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an application",
        "operationId": "GET-V3-/v2/application-specs/{application_spec_id}/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-specs/{application_spec_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an application",
        "operationId": "GET-V4-/v2/application-specs/{application_spec_id}/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/annotation-embeddings": {
      "post": {
        "summary": "Embed annotation page for tasking tools",
        "operationId": "POST-V4-/annotation-embeddings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationEmbeddingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AnnotationEmbedding"
                  },
                  "type": "array",
                  "title": "Response Post-V4-/Annotation-Embeddings"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/evaluations/{evaluation_id}/annotation-results/auto-eval": {
      "post": {
        "summary": "Submit Auto-Evaluation Job",
        "description": "### Description\nSubmit an asynchronous Auto-Evaluation job for all test case results of a         provided evaluation run.\n### Details\nWhen called, this API runs the auto-evaluator on the test case results of the provided         evaluation.\nIf the evaluation's configured type is 'human', this route will convert the         evaluation to 'llm_benchmark' type to mark it as a hybrid evaluation with both human and         auto-annotations on every test case result. In this case, the evaluation configuration         will be copied to a new evaluation configuration, and the evaluation's `evaluation_config_id`         field will point to this new configuration. If the evaluation is already of type 'llm_auto'         or 'llm_benchmark', this route will not modify the evaluation type, but will still kick off an         asynchronous job to run the auto-evaluator on the test case results. All other evaluation types         are currently not supported.\nYou can monitor the status of the auto-evaluation workflow by making a GET         request to this endpoint with the same evaluation ID as you passed in the POST request.\n### Restrictions and Limits\nEvaluation types other than 'llm_auto', 'llm_benchmark', and 'human' are not supported.",
        "operationId": "POST-V4-/v4/evaluations/{evaluation_id}/annotation-results/auto-eval",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunEvaluationAutoEvalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncEvaluationAutoEvalResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/generate-harms": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Generate Harms",
        "operationId": "POST-V4-/v4/evaluation-datasets/generate-harms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_POST-V4-_v4_evaluation-datasets_generate-harms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateHarmsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/evaluations/{evaluation_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an evaluation",
        "operationId": "GET-V2-/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/evaluations/{evaluation_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an evaluation",
        "operationId": "GET-V3-/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluations/{evaluation_id}/evaluation-report": {
      "get": {
        "summary": "Get evaluation report for an evaluation",
        "operationId": "GET-V4-/evaluation-report",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationReport"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation_views/runs": {
      "get": {
        "summary": "Lists the evaluation runs for the given filters",
        "operationId": "GET-V4-/runs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Spec Id"
            }
          },
          {
            "name": "application_variant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Id"
            }
          },
          {
            "name": "question_set_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Question Set Id"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEvaluationEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/delete-draft": {
      "post": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Delete Evaluation Dataset Draft",
        "operationId": "POST-V4-/delete-draft",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEvaluationDatasetDraftResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/evaluation-datasets/{evaluation_dataset_id}/data-locs": {
      "get": {
        "tags": [
          "Evaluation Datasets"
        ],
        "summary": "Get Data Locs",
        "operationId": "GET-V4-/data-locs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "evaluation_dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "version_num",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Version Num"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationDatasetDataLocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sync-catalog-from-control-plane": {
      "post": {
        "summary": "Sync Catalog From Control Plane",
        "description": "Synchronize package catalog from Control Plane",
        "operationId": "POST-V4-/sync-catalog-from-control-plane",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "exclude_old_versions",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Defaults to true—old versions of packages will be excluded from the sync",
              "default": true,
              "title": "Exclude Old Versions"
            },
            "description": "Defaults to true—old versions of packages will be excluded from the sync"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SyncCatalogForOrganizationRequest"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "Package Catalog Sync Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Package Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentPackagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Package Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentPackagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Package Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentPackagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageType"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "title": "Package Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentPackagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/package/{deployment_package_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/package/{deployment_package_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Package Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogDeploymentPackageWithInstalledVersions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/package/{deployment_package_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/package/{deployment_package_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Package Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogDeploymentPackageWithInstalledVersions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/package/{deployment_package_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/package/{deployment_package_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Package Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogDeploymentPackageWithInstalledVersions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/package/{deployment_package_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/package/{deployment_package_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Package Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogDeploymentPackageWithInstalledVersions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeploymentPackageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstallationByType"
                  },
                  "title": "Response Get-V1-/Deployment-Packages/{Account Id}/Installations-Of-Type/{Deployment Package Type}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeploymentPackageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstallationByType"
                  },
                  "title": "Response Get-V2-/Deployment-Packages/{Account Id}/Installations-Of-Type/{Deployment Package Type}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeploymentPackageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstallationByType"
                  },
                  "title": "Response Get-V3-/Deployment-Packages/{Account Id}/Installations-Of-Type/{Deployment Package Type}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/installations-of-type/{deployment_package_type}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_package_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DeploymentPackageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InstallationByType"
                  },
                  "title": "Response Get-V4-/Deployment-Packages/{Account Id}/Installations-Of-Type/{Deployment Package Type}"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/uninstall_async": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Uninstall a deployment package installation",
        "operationId": "POST-V1-/deployment-packages/{account_id}/uninstall_async",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninstallPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/uninstall_async": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Uninstall a deployment package installation",
        "operationId": "POST-V2-/deployment-packages/{account_id}/uninstall_async",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninstallPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/uninstall_async": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Uninstall a deployment package installation",
        "operationId": "POST-V3-/deployment-packages/{account_id}/uninstall_async",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninstallPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/uninstall_async": {
      "post": {
        "tags": [
          "package deployments"
        ],
        "summary": "Uninstall a deployment package installation",
        "operationId": "POST-V4-/deployment-packages/{account_id}/uninstall_async",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UninstallPackageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/poll/{deployment_job_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/poll/{deployment_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentJobPollResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/poll/{deployment_job_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/poll/{deployment_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentJobPollResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/poll/{deployment_job_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/poll/{deployment_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentJobPollResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/poll/{deployment_job_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get available deployment packages",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/poll/{deployment_job_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "deployment_job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Deployment Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentJobPollResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/installation/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "List all packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/installation/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                  },
                  "title": "Response Get-V1-/Deployment-Packages/{Account Id}/Installation/"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/installation/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "List all packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/installation/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                  },
                  "title": "Response Get-V2-/Deployment-Packages/{Account Id}/Installation/"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/installation/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "List all packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/installation/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                  },
                  "title": "Response Get-V3-/Deployment-Packages/{Account Id}/Installation/"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/installation/": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "List all packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/installation/",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                  },
                  "title": "Response Get-V4-/Deployment-Packages/{Account Id}/Installation/"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/deployment-packages/{account_id}/installation/{package_installation_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get specific packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V1-/deployment-packages/{account_id}/installation/{package_installation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Package Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/deployment-packages/{account_id}/installation/{package_installation_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get specific packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V2-/deployment-packages/{account_id}/installation/{package_installation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Package Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/deployment-packages/{account_id}/installation/{package_installation_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get specific packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V3-/deployment-packages/{account_id}/installation/{package_installation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Package Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployment-packages/{account_id}/installation/{package_installation_id}": {
      "get": {
        "tags": [
          "package deployments"
        ],
        "summary": "Get specific packages installed in account",
        "description": "Returns the list of available packages as well as those package versions\ninstalled in the given account.",
        "operationId": "GET-V4-/deployment-packages/{account_id}/installation/{package_installation_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Account Id"
            }
          },
          {
            "name": "package_installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Package Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-specs/{child_application_spec_id}/parent": {
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Modify Parent For Application Spec",
        "description": "Set the parent application spec for an application spec.",
        "operationId": "PATCH-V4-/application-specs/{child_application_spec_id}/parent",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "child_application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Child Application Spec Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateParentApplicationSpecRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_variant_id}/threads/{thread_id}/fork": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Fork Application Interaction Span",
        "operationId": "POST-V4-/applications/{application_variant_id}/threads/{thread_id}/fork",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationThreadForkingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationThreadForkingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/application-with-evaluation-count": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Specs With Evaluation Count",
        "operationId": "GET-V4-/applications/application-with-evaluation-count",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the account that owns the given entity.",
              "title": "Account Id"
            },
            "description": "The ID of the account that owns the given entity."
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SortByEnumForApplicationSpec"
              },
              "default": [],
              "title": "Sort By"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include archived applications in the response.",
              "default": false,
              "title": "Include Archived"
            },
            "description": "Include archived applications in the response."
          },
          {
            "name": "search_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Search term to filter applications by name",
              "title": "Search Filter"
            },
            "description": "Search term to filter applications by name"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationSpecWithEvaluationCount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/application-variants/{application_variant_id}/offline-application-evaluation-datasets": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Offline Variant Evaluation Datasets",
        "operationId": "GET-V4-/application-variants/{application_variant_id}/offline-application-evaluation-datasets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfflineApplicationEvaluationDataset"
                  },
                  "title": "Response Get-V4-/Application-Variants/{Application Variant Id}/Offline-Application-Evaluation-Datasets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{endpoint_slug}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Spec With Active Deployment By Endpoint",
        "operationId": "GET-V4-/applications/{endpoint_slug}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "endpoint_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Endpoint Slug"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSpecWithActiveDeployment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/deployed-applications": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Specs With Active Deployments",
        "operationId": "GET-V4-/deployed-applications",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account to retrieve deployed applications from.",
              "title": "Account Id"
            },
            "description": "Account to retrieve deployed applications from."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployedApplication"
                  },
                  "title": "Response Get-V4-/Deployed-Applications"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/recent-threads": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Recent Threads",
        "operationId": "GET-V4-/recent-threads",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account which the file will be tied to. Use this account id query param if you are using the API or the SDK.",
              "title": "Account Id"
            },
            "description": "Account which the file will be tied to. Use this account id query param if you are using the API or the SDK."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedChatThreadEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "List Application Interactions",
        "operationId": "GET-V4-/interactions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "variants",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Which variants to filter on",
              "title": "Variants"
            },
            "description": "Which variants to filter on"
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where either the prompt or the response contain this substring.",
              "title": "Search Text"
            },
            "description": "Return only interactions where either the prompt or the response contain this substring."
          },
          {
            "name": "relevance_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score above this value.",
              "default": 0,
              "title": "Relevance Min Score"
            },
            "description": "Return only interactions with a relevance score above this value."
          },
          {
            "name": "relevance_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score below this value.",
              "default": 1,
              "title": "Relevance Max Score"
            },
            "description": "Return only interactions with a relevance score below this value."
          },
          {
            "name": "faithfulness_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score above this value.",
              "default": 0,
              "title": "Faithfulness Min Score"
            },
            "description": "Return only interactions with a faithfulness score above this value."
          },
          {
            "name": "faithfulness_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score below this value.",
              "default": 1,
              "title": "Faithfulness Max Score"
            },
            "description": "Return only interactions with a faithfulness score below this value."
          },
          {
            "name": "has_positive_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the positive feedback.",
              "title": "Has Positive Feedback"
            },
            "description": "Return only interactions with the positive feedback."
          },
          {
            "name": "has_negative_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the negative feedback.",
              "title": "Has Negative Feedback"
            },
            "description": "Return only interactions with the negative feedback."
          },
          {
            "name": "has_feedback_response",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the user has provided a feedback response.",
              "title": "Has Feedback Response"
            },
            "description": "Return only interactions where the user has provided a feedback response."
          },
          {
            "name": "guardrail_categories",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given guardrail categories.",
              "title": "Guardrail Categories"
            },
            "description": "Return only interactions with the given guardrail categories."
          },
          {
            "name": "has_guardrail_trigger",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the guardrail triggered.",
              "title": "Has Guardrail Trigger"
            },
            "description": "Return only interactions where the guardrail triggered."
          },
          {
            "name": "operation_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationOperationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given operation status.",
              "title": "Operation Status"
            },
            "description": "Return only interactions with the given operation status."
          },
          {
            "name": "sort_key",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort interactions by this field.",
              "title": "Sort Key"
            },
            "description": "Sort interactions by this field."
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sort interactions in this order, asc or desc.",
              "title": "Sort Order"
            },
            "description": "Sort interactions in this order, asc or desc."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedApplicationInteractionEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions/export": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Export Application Interactions",
        "operationId": "GET-V4-/interactions/export",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "variants",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Which variants to filter on",
              "title": "Variants"
            },
            "description": "Which variants to filter on"
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where either the prompt or the response contain this substring.",
              "title": "Search Text"
            },
            "description": "Return only interactions where either the prompt or the response contain this substring."
          },
          {
            "name": "relevance_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score above this value.",
              "default": 0,
              "title": "Relevance Min Score"
            },
            "description": "Return only interactions with a relevance score above this value."
          },
          {
            "name": "relevance_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score below this value.",
              "default": 1,
              "title": "Relevance Max Score"
            },
            "description": "Return only interactions with a relevance score below this value."
          },
          {
            "name": "faithfulness_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score above this value.",
              "default": 0,
              "title": "Faithfulness Min Score"
            },
            "description": "Return only interactions with a faithfulness score above this value."
          },
          {
            "name": "faithfulness_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score below this value.",
              "default": 1,
              "title": "Faithfulness Max Score"
            },
            "description": "Return only interactions with a faithfulness score below this value."
          },
          {
            "name": "has_positive_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the positive feedback.",
              "title": "Has Positive Feedback"
            },
            "description": "Return only interactions with the positive feedback."
          },
          {
            "name": "has_negative_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the negative feedback.",
              "title": "Has Negative Feedback"
            },
            "description": "Return only interactions with the negative feedback."
          },
          {
            "name": "has_feedback_response",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the user has provided a feedback response.",
              "title": "Has Feedback Response"
            },
            "description": "Return only interactions where the user has provided a feedback response."
          },
          {
            "name": "guardrail_categories",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given guardrail categories.",
              "title": "Guardrail Categories"
            },
            "description": "Return only interactions with the given guardrail categories."
          },
          {
            "name": "has_guardrail_trigger",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the guardrail triggered.",
              "title": "Has Guardrail Trigger"
            },
            "description": "Return only interactions where the guardrail triggered."
          },
          {
            "name": "operation_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationOperationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given operation status.",
              "title": "Operation Status"
            },
            "description": "Return only interactions with the given operation status."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInteractionExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions/{application_interaction_id}/details": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Get Application Interaction Details",
        "operationId": "GET-V4-/interactions/{application_interaction_id}/details",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Interaction Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTraceDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions/{application_interaction_id}/evaluation-results": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "List Application Online Evaluation Results With Job Status",
        "operationId": "GET-V4-/interactions/{application_interaction_id}/evaluation-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_interaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Interaction Id"
            }
          },
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationOnlineEvaluationDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions/evaluation-results": {
      "get": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Batch Get Application Online Evaluation Results With Job Status",
        "operationId": "GET-V4-/interactions/evaluation-results",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "application_interaction_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of application interaction IDs to check",
              "default": [],
              "title": "Application Interaction Ids"
            },
            "description": "List of application interaction IDs to check"
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationOnlineEvaluationDetails"
                  },
                  "title": "Response Get-V4-/Interactions/Evaluation-Results"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/applications/{application_spec_id}/interactions/generate-dataset": {
      "post": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Generate Dataset From Interactions",
        "operationId": "POST-V4-/interactions/generate-dataset",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_spec_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Spec Id"
            }
          },
          {
            "name": "account_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Account ID used for authorization",
              "title": "Account Id"
            },
            "description": "Account ID used for authorization"
          },
          {
            "name": "from_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The starting (oldest) timestamp window in seconds.",
              "title": "From Ts"
            },
            "description": "The starting (oldest) timestamp window in seconds."
          },
          {
            "name": "to_ts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "The ending (most recent) timestamp in seconds.",
              "title": "To Ts"
            },
            "description": "The ending (most recent) timestamp in seconds."
          },
          {
            "name": "variants",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Which variants to filter on",
              "title": "Variants"
            },
            "description": "Which variants to filter on"
          },
          {
            "name": "search_text",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where either the prompt or the response contain this substring.",
              "title": "Search Text"
            },
            "description": "Return only interactions where either the prompt or the response contain this substring."
          },
          {
            "name": "relevance_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score above this value.",
              "default": 0,
              "title": "Relevance Min Score"
            },
            "description": "Return only interactions with a relevance score above this value."
          },
          {
            "name": "relevance_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a relevance score below this value.",
              "default": 1,
              "title": "Relevance Max Score"
            },
            "description": "Return only interactions with a relevance score below this value."
          },
          {
            "name": "faithfulness_min_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score above this value.",
              "default": 0,
              "title": "Faithfulness Min Score"
            },
            "description": "Return only interactions with a faithfulness score above this value."
          },
          {
            "name": "faithfulness_max_score",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 1.0,
                  "minimum": 0.0
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with a faithfulness score below this value.",
              "default": 1,
              "title": "Faithfulness Max Score"
            },
            "description": "Return only interactions with a faithfulness score below this value."
          },
          {
            "name": "has_positive_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the positive feedback.",
              "title": "Has Positive Feedback"
            },
            "description": "Return only interactions with the positive feedback."
          },
          {
            "name": "has_negative_feedback",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the negative feedback.",
              "title": "Has Negative Feedback"
            },
            "description": "Return only interactions with the negative feedback."
          },
          {
            "name": "has_feedback_response",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the user has provided a feedback response.",
              "title": "Has Feedback Response"
            },
            "description": "Return only interactions where the user has provided a feedback response."
          },
          {
            "name": "guardrail_categories",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given guardrail categories.",
              "title": "Guardrail Categories"
            },
            "description": "Return only interactions with the given guardrail categories."
          },
          {
            "name": "has_guardrail_trigger",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions where the guardrail triggered.",
              "title": "Has Guardrail Trigger"
            },
            "description": "Return only interactions where the guardrail triggered."
          },
          {
            "name": "operation_status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationOperationStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Return only interactions with the given operation status.",
              "title": "Operation Status"
            },
            "description": "Return only interactions with the given operation status."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateDatasetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateDatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user-groups": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List user groups",
        "description": "This endpoint is used to list the user groups that are visibile to you in\nyour organization.",
        "operationId": "GET-V1-/user-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user-groups": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List user groups",
        "description": "This endpoint is used to list the user groups that are visibile to you in\nyour organization.",
        "operationId": "GET-V2-/user-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/user-groups": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List user groups",
        "description": "This endpoint is used to list the user groups that are visibile to you in\nyour organization.",
        "operationId": "GET-V3-/user-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/user-groups": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List user groups",
        "description": "This endpoint is used to list the user groups that are visibile to you in\nyour organization.",
        "operationId": "GET-V4-/user-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/user-groups/{group_id}/user-memberships": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List the users under a given group",
        "description": "This endpoint gets a list of users under a given group. The group must be\nunder your organization.",
        "operationId": "GET-V1-/user-groups/{group_id}/user-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroupUserMembership"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/user-groups/{group_id}/user-memberships": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List the users under a given group",
        "description": "This endpoint gets a list of users under a given group. The group must be\nunder your organization.",
        "operationId": "GET-V2-/user-groups/{group_id}/user-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroupUserMembership"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/user-groups/{group_id}/user-memberships": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List the users under a given group",
        "description": "This endpoint gets a list of users under a given group. The group must be\nunder your organization.",
        "operationId": "GET-V3-/user-groups/{group_id}/user-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroupUserMembership"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/user-groups/{group_id}/user-memberships": {
      "get": {
        "tags": [
          "user groups"
        ],
        "summary": "List the users under a given group",
        "description": "This endpoint gets a list of users under a given group. The group must be\nunder your organization.",
        "operationId": "GET-V4-/user-groups/{group_id}/user-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserGroupUserMembership"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List account groups accessible to the user",
        "description": "This endpoint is used to list all the account groups the user has access to\nvia general roles.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V1-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Create an account group",
        "description": "This endpoint is used to create an account group in your organization. Can\nonly be called by an organization admin.",
        "operationId": "POST-V1-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List account groups accessible to the user",
        "description": "This endpoint is used to list all the account groups the user has access to\nvia general roles.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V2-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Create an account group",
        "description": "This endpoint is used to create an account group in your organization. Can\nonly be called by an organization admin.",
        "operationId": "POST-V2-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List account groups accessible to the user",
        "description": "This endpoint is used to list all the account groups the user has access to\nvia general roles.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V3-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Create an account group",
        "description": "This endpoint is used to create an account group in your organization. Can\nonly be called by an organization admin.",
        "operationId": "POST-V3-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List account groups accessible to the user",
        "description": "This endpoint is used to list all the account groups the user has access to\nvia general roles.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V4-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Create an account group",
        "description": "This endpoint is used to create an account group in your organization. Can\nonly be called by an organization admin.",
        "operationId": "POST-V4-/account-groups",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/general-role-restrictions": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of account groups in\nyour organizations. Only available for organizations that have role\nrestrictions enabled.",
        "operationId": "GET-V1-/account-groups/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/general-role-restrictions": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of account groups in\nyour organizations. Only available for organizations that have role\nrestrictions enabled.",
        "operationId": "GET-V2-/account-groups/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/general-role-restrictions": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of account groups in\nyour organizations. Only available for organizations that have role\nrestrictions enabled.",
        "operationId": "GET-V3-/account-groups/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/general-role-restrictions": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of account groups in\nyour organizations. Only available for organizations that have role\nrestrictions enabled.",
        "operationId": "GET-V4-/account-groups/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V1-/account-groups/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V2-/account-groups/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V3-/account-groups/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGroupGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroupGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/{group_id}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get an account group",
        "description": "This endpoint gets details about an account group by ID.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V1-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account groups"
        ],
        "summary": "Update an account group",
        "description": "This endpoint updates account group metadata. Can only be called by an\naccount group admin or organization admin.",
        "operationId": "PATCH-V1-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/{group_id}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get an account group",
        "description": "This endpoint gets details about an account group by ID.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V2-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account groups"
        ],
        "summary": "Update an account group",
        "description": "This endpoint updates account group metadata. Can only be called by an\naccount group admin or organization admin.",
        "operationId": "PATCH-V2-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/{group_id}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get an account group",
        "description": "This endpoint gets details about an account group by ID.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V3-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account groups"
        ],
        "summary": "Update an account group",
        "description": "This endpoint updates account group metadata. Can only be called by an\naccount group admin or organization admin.",
        "operationId": "PATCH-V3-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/{group_id}": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get an account group",
        "description": "This endpoint gets details about an account group by ID.\n\nUsers have access to the account groups for which they have a general role\non a child account and the account groups they are admins of. Organization\nadmins have access to all account groups in their organization.",
        "operationId": "GET-V4-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account groups"
        ],
        "summary": "Update an account group",
        "description": "This endpoint updates account group metadata. Can only be called by an\naccount group admin or organization admin.",
        "operationId": "PATCH-V4-/account-groups/{group_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Group Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountGroupRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identities (currently just users) who have a general\nrole on this account group.",
        "operationId": "GET-V1-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change an identity's role on the account group",
        "description": "Add an identity to the specified account group. Currently, the only role is\naccount group admin.",
        "operationId": "POST-V1-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identities (currently just users) who have a general\nrole on this account group.",
        "operationId": "GET-V2-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change an identity's role on the account group",
        "description": "Add an identity to the specified account group. Currently, the only role is\naccount group admin.",
        "operationId": "POST-V2-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identities (currently just users) who have a general\nrole on this account group.",
        "operationId": "GET-V3-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change an identity's role on the account group",
        "description": "Add an identity to the specified account group. Currently, the only role is\naccount group admin.",
        "operationId": "POST-V3-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account groups"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identities (currently just users) who have a general\nrole on this account group.",
        "operationId": "GET-V4-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGroupGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change an identity's role on the account group",
        "description": "Add an identity to the specified account group. Currently, the only role is\naccount group admin.",
        "operationId": "POST-V4-/account-groups/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/{id}/general-role-memberships/batch-create": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change multiple identities' roles on the account group",
        "description": "Add multiple identities to the specified account group. Currently, the only\nrole is account group admin. Limit of 10 identities per request.",
        "operationId": "POST-V1-/account-groups/{id}/general-role-memberships/batch-create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/{id}/general-role-memberships/batch-create": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change multiple identities' roles on the account group",
        "description": "Add multiple identities to the specified account group. Currently, the only\nrole is account group admin. Limit of 10 identities per request.",
        "operationId": "POST-V2-/account-groups/{id}/general-role-memberships/batch-create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/{id}/general-role-memberships/batch-create": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change multiple identities' roles on the account group",
        "description": "Add multiple identities to the specified account group. Currently, the only\nrole is account group admin. Limit of 10 identities per request.",
        "operationId": "POST-V3-/account-groups/{id}/general-role-memberships/batch-create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/{id}/general-role-memberships/batch-create": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Add / change multiple identities' roles on the account group",
        "description": "Add multiple identities to the specified account group. Currently, the only\nrole is account group admin. Limit of 10 identities per request.",
        "operationId": "POST-V4-/account-groups/{id}/general-role-memberships/batch-create",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAccountGroupGeneralRoleMembershipRequest"
                },
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/account-groups/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Remove an identity from the specified account group.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the group",
        "operationId": "POST-V1-/account-groups/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/account-groups/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Remove an identity from the specified account group.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the group",
        "operationId": "POST-V2-/account-groups/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/account-groups/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Remove an identity from the specified account group.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the group",
        "operationId": "POST-V3-/account-groups/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/account-groups/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account groups"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Remove an identity from the specified account group.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the group",
        "operationId": "POST-V4-/account-groups/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGroupGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List accounts accessible to the user",
        "description": "This enpdoint is used to list all the accounts the user has access to via\ngeneral roles.\n\nOptionally, filter based on one or more parent account groups.",
        "operationId": "GET-V1-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of account group IDs to filter on.",
              "title": "Account Group Id"
            },
            "description": "Optional list of account group IDs to filter on."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "description": "This endpoint is used to create an account. Can only be called by\norganization admins or account group admins.",
        "operationId": "POST-V1-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List accounts accessible to the user",
        "description": "This enpdoint is used to list all the accounts the user has access to via\ngeneral roles.\n\nOptionally, filter based on one or more parent account groups.",
        "operationId": "GET-V2-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of account group IDs to filter on.",
              "title": "Account Group Id"
            },
            "description": "Optional list of account group IDs to filter on."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "description": "This endpoint is used to create an account. Can only be called by\norganization admins or account group admins.",
        "operationId": "POST-V2-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List accounts accessible to the user",
        "description": "This enpdoint is used to list all the accounts the user has access to via\ngeneral roles.\n\nOptionally, filter based on one or more parent account groups.",
        "operationId": "GET-V3-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of account group IDs to filter on.",
              "title": "Account Group Id"
            },
            "description": "Optional list of account group IDs to filter on."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "description": "This endpoint is used to create an account. Can only be called by\norganization admins or account group admins.",
        "operationId": "POST-V3-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List accounts accessible to the user",
        "description": "This enpdoint is used to list all the accounts the user has access to via\ngeneral roles.\n\nOptionally, filter based on one or more parent account groups.",
        "operationId": "GET-V4-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "account_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional list of account group IDs to filter on.",
              "title": "Account Group Id"
            },
            "description": "Optional list of account group IDs to filter on."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Create an account",
        "description": "This endpoint is used to create an account. Can only be called by\norganization admins or account group admins.",
        "operationId": "POST-V4-/accounts",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/general-role-restrictions": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of accounts in your\norganizations. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V1-/accounts/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts/general-role-restrictions": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of accounts in your\norganizations. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V2-/accounts/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts/general-role-restrictions": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of accounts in your\norganizations. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V3-/accounts/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts/general-role-restrictions": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "List General Role Restrictions",
        "description": "Return a list of role restrictions on general roles of accounts in your\norganizations. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V4-/accounts/general-role-restrictions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V1-/accounts/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V2-/accounts/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts/general-role-restrictions/{role}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get General Role Restriction",
        "description": "Get the role restriction on the specified general role in your organization\nif it exists. Only available for organizations that have role restrictions\nenabled.",
        "operationId": "GET-V3-/accounts/general-role-restrictions/{role}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AccountGeneralRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountGeneralRoleRestriction"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "description": "This endpoint get details about an account by ID.",
        "operationId": "GET-V1-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Update an account",
        "description": "This endoint updates the specified account.\n\nName updates can be performed by an account manager, account group admin, or\nan organization admin.\nParent account group updates can only be performed by an organization admin.",
        "operationId": "PATCH-V1-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "description": "This endpoint get details about an account by ID.",
        "operationId": "GET-V2-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Update an account",
        "description": "This endoint updates the specified account.\n\nName updates can be performed by an account manager, account group admin, or\nan organization admin.\nParent account group updates can only be performed by an organization admin.",
        "operationId": "PATCH-V2-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "description": "This endpoint get details about an account by ID.",
        "operationId": "GET-V3-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Update an account",
        "description": "This endoint updates the specified account.\n\nName updates can be performed by an account manager, account group admin, or\nan organization admin.\nParent account group updates can only be performed by an organization admin.",
        "operationId": "PATCH-V3-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts/{id}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get an account",
        "description": "This endpoint get details about an account by ID.",
        "operationId": "GET-V4-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountV2"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "summary": "Update an account",
        "description": "This endoint updates the specified account.\n\nName updates can be performed by an account manager, account group admin, or\nan organization admin.\nParent account group updates can only be performed by an organization admin.",
        "operationId": "PATCH-V4-/accounts/{id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccountRequestV2"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identies (currently just users) who have a general\nrole on this account.",
        "operationId": "GET-V1-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Add / change an identity's role on the account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by account managers, account group admins, and\norganization admins.",
        "operationId": "POST-V1-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identies (currently just users) who have a general\nrole on this account.",
        "operationId": "GET-V2-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Add / change an identity's role on the account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by account managers, account group admins, and\norganization admins.",
        "operationId": "POST-V2-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identies (currently just users) who have a general\nrole on this account.",
        "operationId": "GET-V3-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Add / change an identity's role on the account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by account managers, account group admins, and\norganization admins.",
        "operationId": "POST-V3-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts/{id}/general-role-memberships": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Get a list of identities with general roles",
        "description": "Return a list of the identies (currently just users) who have a general\nrole on this account.",
        "operationId": "GET-V4-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAccountGeneralRoleMembershipWithEntity"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Add / change an identity's role on the account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by account managers, account group admins, and\norganization admins.",
        "operationId": "POST-V4-/accounts/{id}/general-role-memberships",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/accounts/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the account",
        "operationId": "POST-V1-/accounts/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/accounts/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the account",
        "operationId": "POST-V2-/accounts/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/accounts/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the account",
        "operationId": "POST-V3-/accounts/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/accounts/{id}/general-role-memberships/remove-member": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Remove an identity's access to an account",
        "description": "Add an identity to the specified account or change their general role\nwithin the account.\n\nCan be performed by:\n- Account managers\n- Account group admins\n- Organization admins\n- Users removing themselves from the account",
        "operationId": "POST-V4-/accounts/{id}/general-role-memberships/remove-member",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountGeneralRoleMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invite a user to the organization",
        "description": "This endpoint is used to invite a user to the organization. Can only be called by\norganization admins.",
        "operationId": "POST-V1-/users/invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUserV2DetailsWithCreatedAt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v2/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invite a user to the organization",
        "description": "This endpoint is used to invite a user to the organization. Can only be called by\norganization admins.",
        "operationId": "POST-V2-/users/invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUserV2DetailsWithCreatedAt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v3/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invite a user to the organization",
        "description": "This endpoint is used to invite a user to the organization. Can only be called by\norganization admins.",
        "operationId": "POST-V3-/users/invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUserV2DetailsWithCreatedAt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v4/users/invite": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Invite a user to the organization",
        "description": "This endpoint is used to invite a user to the organization. Can only be called by\norganization admins.",
        "operationId": "POST-V4-/users/invite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullUserV2DetailsWithCreatedAt"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v1/organizations/{organization_id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get an organization by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V1-/organizations/{organization_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{organization_id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get an organization by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V2-/organizations/{organization_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/organizations/{organization_id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get an organization by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V3-/organizations/{organization_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/organizations/{organization_id}": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get an organization by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V4-/organizations/{organization_id}",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organization_id}/admin-group": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get the organization's admin group by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V1-/organizations/{organization_id}/admin-group",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{organization_id}/admin-group": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get the organization's admin group by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V2-/organizations/{organization_id}/admin-group",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/organizations/{organization_id}/admin-group": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get the organization's admin group by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V3-/organizations/{organization_id}/admin-group",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/organizations/{organization_id}/admin-group": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get organization by ID",
        "description": "Get the organization's admin group by ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V4-/organizations/{organization_id}/admin-group",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/organizations/{organization_id}/users": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get users by organization ID",
        "description": "Get users by organization ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V1-/organizations/{organization_id}/users",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserV2Details"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/organizations/{organization_id}/users": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get users by organization ID",
        "description": "Get users by organization ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V2-/organizations/{organization_id}/users",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserV2Details"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/organizations/{organization_id}/users": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get users by organization ID",
        "description": "Get users by organization ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V3-/organizations/{organization_id}/users",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserV2Details"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/organizations/{organization_id}/users": {
      "get": {
        "tags": [
          "organization"
        ],
        "summary": "Get users by organization ID",
        "description": "Get users by organization ID. Users can only access the organization\nthey are a member of.",
        "operationId": "GET-V4-/organizations/{organization_id}/users",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Organization Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserV2Details"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/questions": {
      "post": {
        "tags": [
          "Questions"
        ],
        "summary": "Create Question",
        "operationId": "POST-V5-/v5/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "List Questions",
        "operationId": "GET-V5-/v5/questions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/questions/{question_id}": {
      "get": {
        "tags": [
          "Questions"
        ],
        "summary": "Get Question",
        "operationId": "GET-V5-/v5/questions/question_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/question-sets": {
      "post": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Create Question Set",
        "operationId": "POST-V5-/v5/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "List Question Sets",
        "operationId": "GET-V5-/v5/question-sets",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QuestionSetViews"
              },
              "default": [],
              "title": "Views"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/question-sets/{question_set_id}": {
      "get": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Get Question Set",
        "operationId": "GET-V5-/v5/question-sets/question_set_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          },
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QuestionSetViews"
              },
              "default": [
                "questions"
              ],
              "title": "Views"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Update Question Set",
        "operationId": "PATCH-V5-/v5/question-sets/question_set_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuestionSetUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Question Sets"
        ],
        "summary": "Archive Question Set",
        "operationId": "DELETE-V5-/v5/question-sets/question_set_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "question_set_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Question Set Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionSetDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/knowledge-base-data-sources": {
      "post": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Create Knowledge Base Data Source",
        "operationId": "POST-V5-/v5/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseDataSourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "List Knowledge Base Data Sources",
        "operationId": "GET-V5-/v5/knowledge-base-data-sources",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Name"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/knowledge-base-data-sources/{knowledge_base_data_source_id}": {
      "get": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Get Knowledge Base Data Source",
        "operationId": "GET-V5-/v5/knowledge-base-data-sources/knowledge_base_data_source_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Update Knowledge Base Data Source",
        "operationId": "PATCH-V5-/v5/knowledge-base-data-sources/knowledge_base_data_source_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBaseDataSourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSource"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Delete Knowledge Base Data Source",
        "operationId": "DELETE-V5-/v5/knowledge-base-data-sources/knowledge_base_data_source_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBaseDataSourceDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/knowledge-base-data-sources/{knowledge_base_data_source_id}/verify": {
      "post": {
        "tags": [
          "Knowledge Base Data Sources"
        ],
        "summary": "Verify Knowledge Base Data Source Credentials",
        "operationId": "POST-V5-/v5/knowledge-base-data-sources/knowledge_base_data_source_id/verify",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "knowledge_base_data_source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Knowledge Base Data Source Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/beta/files/{file_id}/text": {
      "get": {
        "tags": [
          "Beta"
        ],
        "summary": "Get File Text",
        "operationId": "GET-V4-beta-/files/{file_id}/text",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get-V4-Beta-/Files/{File Id}/Text"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/files/{file_id}/text": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get File Text",
        "operationId": "GET-V5-/files/file_id/text",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get-V5-/Files/File Id/Text"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/applications": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application",
        "operationId": "POST-V5-/v5/applications",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Applications",
        "operationId": "GET-V5-/v5/applications",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApplicationViews"
              },
              "default": [],
              "title": "Views"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/applications/{application_id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application",
        "operationId": "GET-V5-/v5/applications/application_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Id"
            }
          },
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApplicationViews"
              },
              "default": [
                "variants"
              ],
              "title": "Views"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Application",
        "operationId": "PATCH-V5-/v5/applications/application_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationUpdateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RestoreRequest"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Archive Application",
        "operationId": "DELETE-V5-/v5/applications/application_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/application-variants": {
      "post": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Create Application Variant",
        "operationId": "POST-V5-/v5/application-variants",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVariantCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Application Variants"
        ],
        "summary": "List Application Variants",
        "operationId": "GET-V5-/v5/application-variants",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Id"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariantList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/application-variants/{application_variant_id}": {
      "get": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Get Application Variant",
        "operationId": "GET-V5-/v5/application-variants/application_variant_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Update Application Variant",
        "operationId": "PATCH-V5-/v5/application-variants/application_variant_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVariantUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Delete Application Variant",
        "operationId": "DELETE-V5-/v5/application-variants/application_variant_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariantDelete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/application-variants/{application_variant_id}/publish": {
      "post": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Publish Draft Application Variant",
        "operationId": "POST-V5-/v5/application-variants/application_variant_id/publish",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVariant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/application-variants/{application_variant_id}/process": {
      "post": {
        "tags": [
          "Application Variants"
        ],
        "summary": "Execute Application Variant",
        "operationId": "POST-V5-/v5/application-variants/application_variant_id/process",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "application_variant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Application Variant Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVariantProcessingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post-V5-/V5/Application-Variants/Application Variant Id/Process"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/test-case-outputs/batch": {
      "post": {
        "tags": [
          "Test Case Outputs"
        ],
        "summary": "Batch Create Test Case Output",
        "operationId": "POST-V5-/v5/test-case-outputs/batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/TestCaseOutputCreateRequest"
                },
                "type": "array",
                "title": "Requests"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIList_TestCaseOutput_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v5/test-case-outputs": {
      "get": {
        "tags": [
          "Test Case Outputs"
        ],
        "summary": "List Test Case Outputs",
        "operationId": "GET-V5-/v5/test-case-outputs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseOutputViews"
              },
              "default": [],
              "title": "Views"
            }
          },
          {
            "name": "include_archived",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Include Archived"
            }
          },
          {
            "name": "application_variant_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Application Variant Id"
            }
          },
          {
            "name": "evaluation_dataset_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Dataset Id"
            }
          },
          {
            "name": "evaluation_dataset_version_num",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Evaluation Dataset Version Num"
            }
          },
          {
            "name": "test_case_output_group_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Test Case Output Group Id"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Starting After"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Ending Before"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseOutputList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/test-case-outputs/{test_case_output_id}": {
      "get": {
        "tags": [
          "Test Case Outputs"
        ],
        "summary": "Get Test Case Output",
        "operationId": "GET-V5-/v5/test-case-outputs/test_case_output_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "test_case_output_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Output Id"
            }
          },
          {
            "name": "views",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseOutputViews"
              },
              "default": [],
              "title": "Views"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/test-case-output-groups/{test_case_output_group_id}/data-locs": {
      "get": {
        "tags": [
          "Test Case Output Groups"
        ],
        "summary": "Get Test Case Output Data Locations",
        "operationId": "GET-V5-/v5/test-case-output-groups/test_case_output_group_id/data-locs",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "test_case_output_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Test Case Output Group Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseOutputDataLocs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/agents/docs/nodes": {
      "get": {
        "tags": [
          "Agents Docs"
        ],
        "summary": "Get documentation for all Agents nodes",
        "operationId": "GET-V5-/nodes",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "agent_service_endpoint_override",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Agent Service Endpoint Override"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDocsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "List Permissions",
        "operationId": "GET-V5-/v5/permissions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "resource_type",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ResourcePermissionType"
            }
          },
          {
            "name": "permission",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "read",
              "title": "Permission"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResourceList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Create Permissions",
        "operationId": "POST-V5-/v5/permissions",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIList_UserResource_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/permissions/{resource_id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Permissions for Resource",
        "operationId": "GET-V5-/v5/permissions/resource_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Resource Id"
            }
          },
          {
            "name": "resource_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ResourcePermissionType",
              "default": "knowledge_base"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number for pagination to be returned by the given endpoint. Starts at page 1"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k.",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of artifacts to be returned by the given endpoint. Defaults to 100 and cannot be greater than 10k."
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResourceList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update Permissions for Resource",
        "operationId": "PUT-V5-/v5/permissions/resource_id",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Resource Id"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIList_UserResource_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v5/audit-tables": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit Tables",
        "operationId": "GET-V5-/v5/audit-tables",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Start Time"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "End Time"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/components/schemas/AuditTableType"
              },
              "minItems": 1,
              "title": "Type"
            }
          },
          {
            "name": "x-selected-account-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Selected-Account-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditTables"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIList_DatasetItem_": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/DatasetItem"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "items"
        ]
      },
      "APIList_ModelDefinition_": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelDefinition"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "items"
        ]
      },
      "APIList_TestCaseOutput_": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/TestCaseOutput"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "items"
        ]
      },
      "APIList_UserResource_": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserResource"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": [
          "items"
        ]
      },
      "AccessProfile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Access profile id."
          },
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "Id of the user in the access profile."
          },
          "role": {
            "$ref": "#/components/schemas/Role",
            "description": "The role of the user in the access profile."
          },
          "account": {
            "$ref": "#/components/schemas/Account",
            "description": "The account in the access profile."
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "role",
          "account"
        ],
        "title": "AccessProfile"
      },
      "AccessRoleIdentity": {
        "properties": {
          "identity_type": {
            "$ref": "#/components/schemas/AccessRoleIdentityType"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "identity_type",
          "id"
        ],
        "title": "AccessRoleIdentity"
      },
      "AccessRoleIdentityType": {
        "type": "string",
        "enum": [
          "user"
        ],
        "const": "user",
        "title": "AccessRoleIdentityType"
      },
      "AccessRoleIdentityWithEntity": {
        "properties": {
          "identity_type": {
            "$ref": "#/components/schemas/AccessRoleIdentityType"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "identity": {
            "$ref": "#/components/schemas/UserV2Details"
          }
        },
        "type": "object",
        "required": [
          "identity_type",
          "id",
          "identity"
        ],
        "title": "AccessRoleIdentityWithEntity"
      },
      "Account": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "Account"
      },
      "AccountGeneralRole": {
        "type": "string",
        "enum": [
          "manager",
          "member",
          "labeler"
        ],
        "title": "AccountGeneralRole"
      },
      "AccountGeneralRoleMembershipWithEntity": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "Account membership is for"
          },
          "identity": {
            "$ref": "#/components/schemas/AccessRoleIdentityWithEntity",
            "description": "Identity with role"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGeneralRole",
            "description": "General role level"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "identity",
          "role"
        ],
        "title": "AccountGeneralRoleMembershipWithEntity"
      },
      "AccountGeneralRoleRestriction": {
        "properties": {
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "The organization the restriction is for"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGeneralRole",
            "description": "The general account role being restricted"
          },
          "restriction": {
            "$ref": "#/components/schemas/RoleRestriction",
            "description": "The restriction"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At",
            "description": "ISO datetime of creation"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "User ID of creator",
            "type": "string"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At",
            "description": "ISO datetime of last modification"
          },
          "updated_by_user_id": {
            "title": "Updated By User Id",
            "description": "User ID of last modifier",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "role",
          "restriction",
          "created_at",
          "updated_at"
        ],
        "title": "AccountGeneralRoleRestriction"
      },
      "AccountGroup": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Account group ID"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "Parent organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Account group name"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At",
            "description": "ISO datetime of creation"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "User ID of creator",
            "type": "string"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At",
            "description": "ISO datetime of last modification"
          },
          "updated_by_user_id": {
            "title": "Updated By User Id",
            "description": "User ID of last modifier",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "name"
        ],
        "title": "AccountGroup"
      },
      "AccountGroupGeneralRole": {
        "type": "string",
        "enum": [
          "admin"
        ],
        "const": "admin",
        "title": "AccountGroupGeneralRole"
      },
      "AccountGroupGeneralRoleMembershipWithEntity": {
        "properties": {
          "account_group_id": {
            "type": "string",
            "title": "Account Group Id",
            "description": "Account group membership is for"
          },
          "identity": {
            "$ref": "#/components/schemas/AccessRoleIdentityWithEntity",
            "description": "Identity with role"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGroupGeneralRole",
            "description": "General role level"
          }
        },
        "type": "object",
        "required": [
          "account_group_id",
          "identity",
          "role"
        ],
        "title": "AccountGroupGeneralRoleMembershipWithEntity"
      },
      "AccountGroupGeneralRoleRestriction": {
        "properties": {
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "The organization the restriction is for"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGroupGeneralRole",
            "description": "The general account group role being restricted"
          },
          "restriction": {
            "$ref": "#/components/schemas/RoleRestriction",
            "description": "The restriction"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At",
            "description": "ISO datetime of creation"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "User ID of creator",
            "type": "string"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At",
            "description": "ISO datetime of last modification"
          },
          "updated_by_user_id": {
            "title": "Updated By User Id",
            "description": "User ID of last modifier",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "role",
          "restriction",
          "created_at",
          "updated_at"
        ],
        "title": "AccountGroupGeneralRoleRestriction"
      },
      "AccountV2": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Account ID"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "Parent organization ID"
          },
          "account_group_id": {
            "type": "string",
            "title": "Account Group Id",
            "description": "The account's parent account group. Optional for backwards compatibility"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Account name"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "account_group_id",
          "name"
        ],
        "title": "AccountV2"
      },
      "ActionContext": {
        "properties": {
          "content": {
            "title": "Content",
            "description": "The final output of the agent when it no longer needs any tools",
            "type": "string"
          },
          "tool_request": {
            "description": "The tool request if the agent needs more information.",
            "$ref": "#/components/schemas/ToolRequest"
          }
        },
        "type": "object",
        "title": "ActionContext"
      },
      "AdvancedProcessingOptions": {
        "properties": {
          "add_page_markers": {
            "type": "boolean",
            "title": "Add Page Markers"
          },
          "continue_hierarchy": {
            "type": "boolean",
            "title": "Continue Hierarchy"
          },
          "document_password": {
            "type": "string",
            "title": "Document Password"
          },
          "filter_line_numbers": {
            "type": "boolean",
            "title": "Filter Line Numbers"
          },
          "force_file_extension": {
            "type": "string",
            "title": "Force File Extension"
          },
          "keep_line_breaks": {
            "type": "boolean",
            "title": "Keep Line Breaks"
          },
          "large_table_chunking": {
            "$ref": "#/components/schemas/LargeTableChunking"
          },
          "merge_tables": {
            "type": "boolean",
            "title": "Merge Tables"
          },
          "ocr_system": {
            "type": "string",
            "enum": [
              "highres",
              "multilingual",
              "combined"
            ],
            "title": "Ocr System"
          },
          "page_range": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PageRange"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/PageRange"
                },
                "type": "array"
              }
            ],
            "title": "Page Range"
          },
          "remove_text_formatting": {
            "type": "boolean",
            "title": "Remove Text Formatting"
          },
          "return_ocr_data": {
            "type": "boolean",
            "title": "Return Ocr Data"
          },
          "spreadsheet_table_clustering": {
            "type": "string",
            "enum": [
              "default",
              "disabled"
            ],
            "title": "Spreadsheet Table Clustering"
          },
          "table_output_format": {
            "type": "string",
            "enum": [
              "html",
              "json",
              "md",
              "jsonbbox",
              "dynamic",
              "ai_json",
              "csv"
            ],
            "title": "Table Output Format"
          }
        },
        "type": "object",
        "title": "AdvancedProcessingOptions"
      },
      "AgentAction": {
        "type": "string",
        "enum": [
          "tool_request",
          "content"
        ],
        "title": "AgentAction"
      },
      "AgentMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "agent"
            ],
            "const": "agent",
            "title": "Role",
            "description": "The role of the message. Must be set to 'agent'.\n\nAn agent message is a message generated by an AI agent. It is different than an assistant message in that it can either contain a direct content output or a tool request that the client application must handle.",
            "default": "agent"
          },
          "content": {
            "title": "Content",
            "description": "Text output of the agent if no more tools are needed.",
            "type": "string"
          },
          "tool_request": {
            "description": "The tool request if the agent needs more information.",
            "$ref": "#/components/schemas/ToolRequest"
          }
        },
        "type": "object",
        "title": "Agent Message"
      },
      "AgentUserInputType": {
        "type": "string",
        "enum": [
          "ShortText",
          "SentenceText",
          "ParagraphText",
          "ArtifactId",
          "ArtifactIds",
          "KnowledgeBaseId",
          "KnowledgeBaseIds",
          "InputImageDir",
          "Message",
          "Messages",
          "integer",
          "number",
          "string",
          "boolean",
          "array",
          "object",
          "unknown"
        ],
        "title": "AgentUserInputType"
      },
      "AgenticApplicationOverrides": {
        "properties": {
          "concurrent": {
            "type": "boolean",
            "title": "Concurrent",
            "default": false
          },
          "use_channels": {
            "type": "boolean",
            "title": "Use Channels",
            "default": false
          },
          "initial_state": {
            "$ref": "#/components/schemas/MachineState"
          },
          "partial_trace": {
            "title": "Partial Trace",
            "items": {
              "$ref": "#/components/schemas/LegacySpan"
            },
            "type": "array"
          },
          "return_span": {
            "type": "boolean",
            "title": "Return Span",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "AgenticApplicationOverrides",
        "description": "Execution override options for agentic applications"
      },
      "AgentsServiceGraphDescriptor": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ApplicationAgentGraphNode"
            },
            "type": "array",
            "title": "Nodes"
          },
          "edges": {
            "items": {
              "$ref": "#/components/schemas/ApplicationAgentGraphEdge"
            },
            "type": "array",
            "title": "Edges"
          }
        },
        "type": "object",
        "required": [
          "nodes",
          "edges"
        ],
        "title": "AgentsServiceGraphDescriptor"
      },
      "Annotation": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "url_citation"
            ],
            "const": "url_citation",
            "title": "Type"
          },
          "url_citation": {
            "$ref": "#/components/schemas/AnnotationURLCitation"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "type",
          "url_citation"
        ],
        "title": "Annotation"
      },
      "AnnotationConfig": {
        "properties": {
          "annotation_config_type": {
            "$ref": "#/components/schemas/AnnotationConfigType",
            "default": "flexible"
          },
          "components": {
            "title": "Components",
            "items": {
              "items": {
                "$ref": "#/components/schemas/AnnotationItem"
              },
              "type": "array"
            },
            "type": "array"
          },
          "direction": {
            "$ref": "#/components/schemas/AnnotationConfigDirectionType",
            "default": "row"
          },
          "llm_prompt": {
            "$ref": "#/components/schemas/AutoEvaluationPrompt"
          }
        },
        "type": "object",
        "title": "AnnotationConfig"
      },
      "AnnotationConfigDirectionType": {
        "type": "string",
        "enum": [
          "col",
          "row"
        ],
        "title": "AnnotationConfigDirectionType"
      },
      "AnnotationConfigGenerationRequest": {
        "properties": {
          "llm_prompt_template": {
            "type": "string",
            "title": "Llm Prompt Template"
          }
        },
        "type": "object",
        "required": [
          "llm_prompt_template"
        ],
        "title": "AnnotationConfigGenerationRequest"
      },
      "AnnotationConfigMultiturnUseCaseRequest": {
        "properties": {
          "messages_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "llm_prompt": {
            "$ref": "#/components/schemas/AutoEvaluationPrompt"
          }
        },
        "type": "object",
        "required": [
          "messages_loc"
        ],
        "title": "AnnotationConfigMultiturnUseCaseRequest"
      },
      "AnnotationConfigRequestBase": {
        "properties": {
          "components": {
            "title": "Components",
            "items": {
              "items": {
                "$ref": "#/components/schemas/AnnotationItem"
              },
              "type": "array"
            },
            "type": "array"
          },
          "direction": {
            "$ref": "#/components/schemas/AnnotationConfigDirectionType",
            "default": "row"
          },
          "llm_prompt": {
            "$ref": "#/components/schemas/AutoEvaluationPrompt"
          }
        },
        "type": "object",
        "title": "AnnotationConfigRequestBase"
      },
      "AnnotationConfigSummarizationUseCaseRequest": {
        "properties": {
          "document_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "summary_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "expected_summary_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "llm_prompt": {
            "$ref": "#/components/schemas/AutoEvaluationPrompt"
          }
        },
        "type": "object",
        "required": [
          "document_loc",
          "summary_loc"
        ],
        "title": "AnnotationConfigSummarizationUseCaseRequest"
      },
      "AnnotationConfigTranslationUseCaseRequest": {
        "properties": {
          "original_text_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "translation_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "language_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "expected_translation_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "llm_prompt": {
            "$ref": "#/components/schemas/AutoEvaluationPrompt"
          }
        },
        "type": "object",
        "required": [
          "original_text_loc",
          "translation_loc"
        ],
        "title": "AnnotationConfigTranslationUseCaseRequest"
      },
      "AnnotationConfigType": {
        "type": "string",
        "enum": [
          "generation",
          "flexible",
          "summarization",
          "multiturn",
          "translation"
        ],
        "title": "AnnotationConfigType"
      },
      "AnnotationEmbedding": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "embedding": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Embedding"
          }
        },
        "type": "object",
        "required": [
          "text",
          "embedding"
        ],
        "title": "AnnotationEmbedding"
      },
      "AnnotationEmbeddingRequest": {
        "properties": {
          "texts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Texts"
          },
          "embedding_config": {
            "$ref": "#/components/schemas/EmbeddingConfig"
          }
        },
        "type": "object",
        "required": [
          "texts",
          "embedding_config"
        ],
        "title": "AnnotationEmbeddingRequest"
      },
      "AnnotationItem": {
        "properties": {
          "optional": {
            "type": "boolean",
            "title": "Optional",
            "default": false
          },
          "data_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "data_loc"
        ],
        "title": "AnnotationItem"
      },
      "AnnotationResultExpanded": {
        "properties": {
          "question_id": {
            "type": "string",
            "title": "Question Id"
          },
          "annotation_type": {
            "$ref": "#/components/schemas/AnnotationType",
            "description": "The type of annotation result."
          },
          "test_case_result_lineage_id": {
            "type": "string",
            "title": "Test Case Result Lineage Id"
          },
          "selected_choice": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CategoricalChoice"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/CategoricalChoice"
                },
                "type": "array"
              },
              {
                "type": "integer"
              },
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "title": "Selected Choice",
            "description": "The selected choices(s) for the annotation result, in JSON form. For categorical questions, this is an object or list of objects (depending on if multiple selections are allowed). For free text questions, this is a string. For numeric or rating questions, this is a number."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "llm_auto_eval_metadata": {
            "$ref": "#/components/schemas/LLMAutoEvalMetadata"
          }
        },
        "type": "object",
        "required": [
          "question_id",
          "annotation_type",
          "test_case_result_lineage_id",
          "selected_choice",
          "id",
          "created_at"
        ],
        "title": "AnnotationResultExpanded"
      },
      "AnnotationType": {
        "type": "string",
        "enum": [
          "llm_auto",
          "human"
        ],
        "title": "AnnotationType"
      },
      "AnnotationURLCitation": {
        "properties": {
          "end_index": {
            "type": "integer",
            "title": "End Index"
          },
          "start_index": {
            "type": "integer",
            "title": "Start Index"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "end_index",
          "start_index",
          "title",
          "url"
        ],
        "title": "AnnotationURLCitation"
      },
      "Application": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "object": {
            "type": "string",
            "enum": [
              "application"
            ],
            "const": "application",
            "title": "Object",
            "default": "application"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the application"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the application"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "variants": {
            "title": "Variants",
            "description": "The different variants of this application.",
            "items": {
              "$ref": "#/components/schemas/ApplicationVariant"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "created_at"
        ]
      },
      "ApplicationAgentGraphEdge": {
        "properties": {
          "from_node": {
            "type": "string",
            "title": "From Node"
          },
          "to_node": {
            "type": "string",
            "title": "To Node"
          }
        },
        "type": "object",
        "required": [
          "from_node",
          "to_node"
        ],
        "title": "ApplicationAgentGraphEdge"
      },
      "ApplicationAgentGraphInput": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "default": true
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AgentUserInputType"
          },
          "examples": {
            "title": "Examples",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "default": {
            "title": "Default",
            "type": "string"
          },
          "value_constraint": {
            "$ref": "#/components/schemas/ValueConstraint"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "ApplicationAgentGraphInput"
      },
      "ApplicationAgentGraphNode": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "operation_type": {
            "$ref": "#/components/schemas/ApplicationOperationType"
          },
          "config": {
            "title": "Config",
            "type": "object",
            "additionalProperties": true
          },
          "nodes": {
            "title": "Nodes",
            "items": {
              "$ref": "#/components/schemas/ApplicationAgentGraphNode"
            },
            "type": "array"
          },
          "edges": {
            "title": "Edges",
            "items": {
              "$ref": "#/components/schemas/ApplicationAgentGraphEdge"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type"
        ],
        "title": "ApplicationAgentGraphNode"
      },
      "ApplicationAgentsServiceConfiguration": {
        "properties": {
          "metadata": {
            "title": "Metadata",
            "description": "User defined metadata about the application",
            "type": "object",
            "additionalProperties": true
          },
          "guardrail_config": {
            "description": "Guardrail configuration for the application",
            "$ref": "#/components/schemas/GuardrailConfiguration"
          },
          "type": {
            "type": "string",
            "enum": [
              "WORKFLOW",
              "PLAN",
              "STATE_MACHINE"
            ],
            "title": "Type"
          },
          "params": {
            "title": "Params"
          },
          "graph": {
            "description": "The graph of the agents service configuration",
            "$ref": "#/components/schemas/AgentsServiceGraphDescriptor"
          },
          "inputs": {
            "title": "Inputs",
            "description": "The starting inputs that this agent configuration expects",
            "items": {
              "$ref": "#/components/schemas/ApplicationAgentGraphInput"
            },
            "type": "array"
          },
          "inputs_by_node": {
            "title": "Inputs By Node",
            "description": "The inputs that each node expects",
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/ApplicationAgentGraphInput"
              },
              "type": "array"
            },
            "type": "object"
          },
          "agent_service_errors": {
            "title": "Agent Service Errors",
            "description": "Errors that occurred when calling agent service",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "raw_configuration": {
            "title": "Raw Configuration",
            "description": "Raw configuration entered by the user. May be invalid if variant is in draft mode.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "type",
          "params"
        ],
        "title": "ApplicationAgentsServiceConfiguration"
      },
      "ApplicationCategoryScoreAccuracy": {
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "accuracy"
            ],
            "const": "accuracy",
            "title": "Category"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_scores": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreAnswerCorrectness"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreAnswerRelevance"
                }
              ]
            },
            "type": "array",
            "title": "Metric Scores"
          }
        },
        "type": "object",
        "required": [
          "category",
          "metric_scores"
        ],
        "title": "ApplicationCategoryScoreAccuracy"
      },
      "ApplicationCategoryScoreQuality": {
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "quality"
            ],
            "const": "quality",
            "title": "Category"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_scores": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreCoherence"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreGrammar"
                }
              ]
            },
            "type": "array",
            "title": "Metric Scores"
          }
        },
        "type": "object",
        "required": [
          "category",
          "metric_scores"
        ],
        "title": "ApplicationCategoryScoreQuality"
      },
      "ApplicationCategoryScoreRetrieval": {
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "retrieval"
            ],
            "const": "retrieval",
            "title": "Category"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_scores": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreFaithfulness"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreContextRecall"
                }
              ]
            },
            "type": "array",
            "title": "Metric Scores"
          }
        },
        "type": "object",
        "required": [
          "category",
          "metric_scores"
        ],
        "title": "ApplicationCategoryScoreRetrieval"
      },
      "ApplicationCategoryScoreTrustAndSafety": {
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_scores": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreSafety"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScoreModeration"
                }
              ]
            },
            "type": "array",
            "title": "Metric Scores"
          }
        },
        "type": "object",
        "required": [
          "category",
          "metric_scores"
        ],
        "title": "ApplicationCategoryScoreTrustAndSafety"
      },
      "ApplicationConfigurationV0": {
        "properties": {
          "metadata": {
            "title": "Metadata",
            "description": "User defined metadata about the application",
            "type": "object",
            "additionalProperties": true
          },
          "guardrail_config": {
            "description": "Guardrail configuration for the application",
            "$ref": "#/components/schemas/GuardrailConfiguration"
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ApplicationNode"
            },
            "type": "array",
            "title": "Nodes"
          },
          "edges": {
            "items": {
              "$ref": "#/components/schemas/ApplicationEdge"
            },
            "type": "array",
            "title": "Edges"
          }
        },
        "type": "object",
        "required": [
          "nodes",
          "edges"
        ],
        "title": "ApplicationConfigurationV0"
      },
      "ApplicationConfigurationValueType": {
        "type": "string",
        "enum": [
          "TEXT",
          "STRING_ARRAY",
          "NUMBER",
          "BOOL",
          "CHUNK_ARRAY",
          "DOCUMENT_ARRAY",
          "KNOWLEDGE_BASE_ID",
          "KNOWLEDGE_BASE_ID_ARRAY",
          "COMPLETION_MODEL_ID"
        ],
        "title": "ApplicationConfigurationValueType",
        "description": "Represents the possible types of values for an application configuration, inputs and outputs.\n\nThe available types are:\n- TEXT: Represents a single line of text.\n- STRING_ARRAY: Represents an array of strings.\n- NUMBER: Represents a numeric value.\n- BOOL: Represents a boolean value.\n- CHUNK_ARRAY: Represents an array of chunks.\n- DOCUMENT_ARRAY: Represents an array of documents.\n- KNOWLEDGE_BASE_ID: Represents the ID of a knowledge base.\n- KNOWLEDGE_BASE_ID_ARRAY: Represents an array of knowledge base IDs.\n- COMPLETION_MODEL_ID: Represents the ID of a completion model."
      },
      "ApplicationCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Application Spec"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Application Spec"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/ApplicationVariantNestedCreateRequest"
            },
            "type": "array",
            "maxItems": 1,
            "title": "Variants",
            "description": "The variant to create with the application"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ApplicationCreateRequest"
      },
      "ApplicationDeploymentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint",
            "can_patch": false
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "endpoint",
          "application_variant_id",
          "is_active",
          "account_id"
        ],
        "title": "ApplicationDeploymentRequest"
      },
      "ApplicationDeploymentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint",
            "can_patch": false
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "status": {
            "$ref": "#/components/schemas/ApplicationDeploymentStatus",
            "can_patch": false
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "endpoint",
          "application_variant_id",
          "status",
          "is_active",
          "account_id",
          "created_by_user_id",
          "created_at"
        ],
        "title": "ApplicationDeploymentResponse"
      },
      "ApplicationDeploymentStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "READY",
          "FAILED",
          "STOPPED"
        ],
        "title": "ApplicationDeploymentStatus",
        "description": "An enum representing the status of an application deployment.\nAttributes:\n    PENDING: The deployment is pending.\n    READY: The deployment is ready.\n    FAILED: The deployment has failed.\n    STOPPED: The deployment has stopped."
      },
      "ApplicationEdge": {
        "properties": {
          "from_node": {
            "type": "string",
            "title": "From Node"
          },
          "to_node": {
            "type": "string",
            "title": "To Node"
          },
          "from_field": {
            "type": "string",
            "title": "From Field"
          },
          "to_field": {
            "type": "string",
            "title": "To Field"
          }
        },
        "type": "object",
        "required": [
          "from_node",
          "to_node",
          "from_field",
          "to_field"
        ],
        "title": "ApplicationEdge"
      },
      "ApplicationFileResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "file_size_bytes": {
            "type": "integer",
            "title": "File Size Bytes"
          },
          "file_artifact_blob_path": {
            "title": "File Artifact Blob Path",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "file_name",
          "file_size_bytes",
          "account_id",
          "created_by_user_id",
          "created_at"
        ],
        "title": "ApplicationFileResponse"
      },
      "ApplicationInteractionEntry": {
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/ApplicationInteractionResponse"
          },
          "guardrail_results": {
            "title": "Guardrail Results",
            "items": {
              "$ref": "#/components/schemas/GuardrailCheckResultWithPolicy"
            },
            "type": "array"
          },
          "details": {
            "$ref": "#/components/schemas/InteractionDetail"
          },
          "metrics": {
            "title": "Metrics",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "grader": {
            "title": "Grader",
            "type": "string"
          },
          "variant_name": {
            "title": "Variant Name",
            "type": "string"
          },
          "evaluation": {
            "$ref": "#/components/schemas/ApplicationInteractionEvaluationResponse"
          },
          "trace_id": {
            "title": "Trace Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "interaction"
        ],
        "title": "ApplicationInteractionEntry"
      },
      "ApplicationInteractionEvaluationResponse": {
        "properties": {
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "can_patch": false
          },
          "faithfulness_score": {
            "title": "Faithfulness Score",
            "type": "number"
          },
          "answer_relevance_score": {
            "title": "Answer Relevance Score",
            "type": "number"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "application_interaction_id",
          "id",
          "created_at"
        ],
        "title": "ApplicationInteractionEvaluationResponse"
      },
      "ApplicationInteractionExportResponse": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "The name of the exported file"
          },
          "signed_url": {
            "title": "Signed Url",
            "description": "Pre-signed URL to download the file from object storage, if applicable",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "description": "The raw file content as bytes, used when direct download is enabled",
            "type": "string",
            "format": "binary"
          }
        },
        "type": "object",
        "required": [
          "filename"
        ],
        "title": "ApplicationInteractionExportResponse",
        "description": "Response model for exporting application interactions.\n\nThis class represents the response when users export application interaction data.\nIt contains either a signed URL to download the exported data from object storage,\nor the actual content bytes when direct download is used (in environments where object storage is not configured)."
      },
      "ApplicationInteractionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "input": {
            "type": "object",
            "title": "Input",
            "additionalProperties": true
          },
          "output": {
            "type": "object",
            "title": "Output",
            "additionalProperties": true
          },
          "aggregated": {
            "type": "boolean",
            "title": "Aggregated",
            "description": "Boolean of whether this interaction has been uploaded to s3 bucket yet, default is false",
            "can_patch": false
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp"
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "How much time the step took in milliseconds(ms)"
          },
          "operation_status": {
            "$ref": "#/components/schemas/ApplicationOperationStatus",
            "description": "The outcome of the operation"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted through the execution. This can differ based on different types of operations",
            "type": "object",
            "additionalProperties": true
          },
          "chat_thread_id": {
            "title": "Chat Thread Id",
            "can_patch": false,
            "type": "string"
          },
          "interaction_source": {
            "$ref": "#/components/schemas/ApplicationInteractionSource"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "input",
          "output",
          "aggregated",
          "application_spec_id",
          "application_variant_id",
          "start_timestamp",
          "duration_ms",
          "operation_status",
          "created_at"
        ],
        "title": "ApplicationInteractionResponse"
      },
      "ApplicationInteractionSource": {
        "type": "string",
        "enum": [
          "EXTERNAL_AI",
          "EVALUATION",
          "SGP_CHAT",
          "AGENTS_SERVICE"
        ],
        "title": "ApplicationInteractionSource"
      },
      "ApplicationInteractionWithFeedback": {
        "properties": {
          "entry": {
            "$ref": "#/components/schemas/ApplicationInteractionResponse"
          },
          "spans": {
            "title": "Spans",
            "items": {
              "$ref": "#/components/schemas/ApplicationTraceSpanResponse"
            },
            "type": "array"
          },
          "feedback": {
            "$ref": "#/components/schemas/ChatThreadFeedbackResponse"
          }
        },
        "type": "object",
        "required": [
          "entry"
        ],
        "title": "ApplicationInteractionWithFeedback"
      },
      "ApplicationInteractionWithSpansResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "input": {
            "type": "object",
            "title": "Input",
            "additionalProperties": true
          },
          "output": {
            "type": "object",
            "title": "Output",
            "additionalProperties": true
          },
          "aggregated": {
            "type": "boolean",
            "title": "Aggregated",
            "description": "Boolean of whether this interaction has been uploaded to s3 bucket yet, default is false",
            "can_patch": false
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp"
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "How much time the step took in milliseconds(ms)"
          },
          "operation_status": {
            "$ref": "#/components/schemas/ApplicationOperationStatus",
            "description": "The outcome of the operation"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted through the execution. This can differ based on different types of operations",
            "type": "object",
            "additionalProperties": true
          },
          "chat_thread_id": {
            "title": "Chat Thread Id",
            "can_patch": false,
            "type": "string"
          },
          "interaction_source": {
            "$ref": "#/components/schemas/ApplicationInteractionSource"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "trace_spans": {
            "title": "Trace Spans",
            "items": {
              "$ref": "#/components/schemas/EvaluationTraceSpanResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "id",
          "input",
          "output",
          "aggregated",
          "application_spec_id",
          "application_variant_id",
          "start_timestamp",
          "duration_ms",
          "operation_status",
          "created_at"
        ],
        "title": "ApplicationInteractionWithSpansResponse"
      },
      "ApplicationMetricScoreAnswerCorrectness": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "answer-correctness"
            ],
            "const": "answer-correctness",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "accuracy"
            ],
            "const": "accuracy",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreAnswerCorrectness"
      },
      "ApplicationMetricScoreAnswerRelevance": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "answer-relevance"
            ],
            "const": "answer-relevance",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "accuracy"
            ],
            "const": "accuracy",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreAnswerRelevance"
      },
      "ApplicationMetricScoreCoherence": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "coherence"
            ],
            "const": "coherence",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "quality"
            ],
            "const": "quality",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreCoherence"
      },
      "ApplicationMetricScoreContextRecall": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "context-recall"
            ],
            "const": "context-recall",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "retrieval"
            ],
            "const": "retrieval",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreContextRecall"
      },
      "ApplicationMetricScoreFaithfulness": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "faithfulness"
            ],
            "const": "faithfulness",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "retrieval"
            ],
            "const": "retrieval",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreFaithfulness"
      },
      "ApplicationMetricScoreGrammar": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "grammar"
            ],
            "const": "grammar",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "quality"
            ],
            "const": "quality",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreGrammar"
      },
      "ApplicationMetricScoreModeration": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "moderation"
            ],
            "const": "moderation",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreModeration"
      },
      "ApplicationMetricScoreSafety": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety"
            ],
            "const": "safety",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          },
          "sub_metric_scores": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_BIAS_AND_STEREOTYPING__"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_OPINIONS_DISPUTED_TOPICS__"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_UNETHICAL_HARMFUL_ACTIVITIES__"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_COPYRIGHT_VIOLATIONS__"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_HARMFUL_CONTENT__"
                },
                {
                  "$ref": "#/components/schemas/ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_PRIVACY_VIOLATIONS__"
                }
              ]
            },
            "type": "array",
            "title": "Sub Metric Scores"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category",
          "sub_metric_scores"
        ],
        "title": "ApplicationMetricScoreSafety"
      },
      "ApplicationMetricScoreWithMetadata": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationScoreMetricTypeEnum"
              },
              {
                "$ref": "#/components/schemas/SafetySubMetricTypeEnum"
              }
            ],
            "title": "Metric Type"
          },
          "category": {
            "$ref": "#/components/schemas/ApplicationScoreCategoryEnum"
          },
          "llm_metadata": {
            "$ref": "#/components/schemas/GenericApplicationScorerMetadata"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScoreWithMetadata"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_BIAS_AND_STEREOTYPING__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-bias-and-stereotyping"
            ],
            "const": "safety-bias-and-stereotyping",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.BIAS_AND_STEREOTYPING: 'safety-bias-and-stereotyping'>]]"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_COPYRIGHT_VIOLATIONS__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-copyright-violations"
            ],
            "const": "safety-copyright-violations",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.COPYRIGHT_VIOLATIONS: 'safety-copyright-violations'>]]"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_HARMFUL_CONTENT__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-harmful-content"
            ],
            "const": "safety-harmful-content",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.HARMFUL_CONTENT: 'safety-harmful-content'>]]"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_OPINIONS_DISPUTED_TOPICS__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-opinions-disputed-topics"
            ],
            "const": "safety-opinions-disputed-topics",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.OPINIONS_DISPUTED_TOPICS: 'safety-opinions-disputed-topics'>]]"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_PRIVACY_VIOLATIONS__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-privacy-violations"
            ],
            "const": "safety-privacy-violations",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.PRIVACY_VIOLATIONS: 'safety-privacy-violations'>]]"
      },
      "ApplicationMetricScore_Literal_TRUST_AND_SAFETY__Literal_UNETHICAL_HARMFUL_ACTIVITIES__": {
        "properties": {
          "score": {
            "title": "Score",
            "type": "number"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "safety-unethical-harmful-activities"
            ],
            "const": "safety-unethical-harmful-activities",
            "title": "Metric Type"
          },
          "category": {
            "type": "string",
            "enum": [
              "trust-and-safety"
            ],
            "const": "trust-and-safety",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "metric_type",
          "category"
        ],
        "title": "ApplicationMetricScore[Literal[<ApplicationScoreCategoryEnum.TRUST_AND_SAFETY: 'trust-and-safety'>], Literal[<SafetySubMetricTypeEnum.UNETHICAL_HARMFUL_ACTIVITIES: 'safety-unethical-harmful-activities'>]]"
      },
      "ApplicationNode": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "application_node_schema_id": {
            "$ref": "#/components/schemas/NodeSchemaId"
          },
          "configuration": {
            "title": "Configuration",
            "default": {},
            "additionalProperties": {
              "$ref": "#/components/schemas/ConfigurationFieldValue"
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "id",
          "application_node_schema_id"
        ],
        "title": "ApplicationNode"
      },
      "ApplicationNodeSchema": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/NumberConfigurationFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/StringConfigurationFieldSchema"
                },
                {
                  "$ref": "#/components/schemas/BoolConfigurationFieldSchema"
                }
              ]
            },
            "type": "object",
            "title": "Configuration"
          },
          "inputs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeInput"
            },
            "type": "object",
            "title": "Inputs"
          },
          "outputs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeOutput"
            },
            "type": "object",
            "title": "Outputs"
          }
        },
        "type": "object",
        "required": [
          "configuration",
          "inputs",
          "outputs"
        ],
        "title": "ApplicationNodeSchema"
      },
      "ApplicationNodeSchemaRegistryRecord": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationNodeType"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationSchemaVersion"
          },
          "nodeSchema": {
            "$ref": "#/components/schemas/ApplicationNodeSchema"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/ApplicationNodeTagType"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "version",
          "nodeSchema",
          "tags"
        ],
        "title": "ApplicationNodeSchemaRegistryRecord"
      },
      "ApplicationNodeTagType": {
        "type": "string",
        "enum": [
          "INPUT_NODE",
          "OUTPUT_NODE",
          "RAG_NODE"
        ],
        "title": "ApplicationNodeTagType"
      },
      "ApplicationNodeType": {
        "type": "string",
        "enum": [
          "TEXT_INPUT_NODE",
          "TEXT_OUTPUT_NODE",
          "KNOWLEDGE_BASE_INPUT_NODE",
          "KNOWLEDGE_BASE_NODE",
          "MULTI_KNOWLEDGE_BASE_INPUT_NODE",
          "MULTI_KNOWLEDGE_BASE_NODE",
          "RERANKER_NODE",
          "PROMPT_ENGINEERING_NODE",
          "COMPLETION_MODEL_INPUT_NODE",
          "COMPLETION_MODEL_NODE",
          "EXTERNAL_ENDPOINT_NODE",
          "DOCUMENT_INPUT_NODE",
          "MAP_REDUCE_NODE",
          "DOCUMENT_SEARCH_NODE",
          "DOCUMENT_PROMPT_NODE"
        ],
        "title": "ApplicationNodeType"
      },
      "ApplicationOnlineEvaluationDetails": {
        "properties": {
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "description": "Application Interaction ID"
          },
          "evaluation_status": {
            "description": "Evaluation job status",
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum"
          },
          "evaluation_results": {
            "title": "Evaluation Results",
            "description": "Evaluation results",
            "items": {
              "$ref": "#/components/schemas/ApplicationInteractionEvaluationResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "application_interaction_id"
        ],
        "title": "ApplicationOnlineEvaluationDetails"
      },
      "ApplicationOperationStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "ERROR"
        ],
        "title": "ApplicationOperationStatus"
      },
      "ApplicationOperationType": {
        "type": "string",
        "enum": [
          "TEXT_INPUT",
          "TEXT_OUTPUT",
          "COMPLETION_INPUT",
          "COMPLETION",
          "KB_RETRIEVAL",
          "KB_INPUT",
          "RERANKING",
          "EXTERNAL_ENDPOINT",
          "PROMPT_ENGINEERING",
          "DOCUMENT_INPUT",
          "MAP_REDUCE",
          "DOCUMENT_SEARCH",
          "DOCUMENT_PROMPT",
          "CUSTOM",
          "INPUT_GUARDRAIL",
          "OUTPUT_GUARDRAIL",
          "CODE_EXECUTION",
          "DATA_MANIPULATION",
          "EVALUATION",
          "FILE_RETRIEVAL",
          "KB_ADD_CHUNK",
          "KB_MANAGEMENT",
          "TRACER",
          "STANDALONE"
        ],
        "title": "ApplicationOperationType"
      },
      "ApplicationProcessingErrorCode": {
        "type": "string",
        "enum": [
          "APPLICATION_PROCESSING_MISSING_REQUIRED_CONFIGURATION",
          "APPLICATION_PROCESSING_MISSING_REQUIRED_INPUT",
          "APPLICATION_PROCESSING_INVALID_USER_INPUT",
          "APPLICATION_PROCESSING_MISSING_REQUIRED_APPLICATION_OUTPUT",
          "APPLICATION_PROCESSING_NODE_PROCESSOR_MISSING",
          "APPLICATION_PROCESSING_EXTERNAL_REQUEST_TIMED_OUT",
          "APPLICATION_PROCESSING_EXTERNAL_REQUEST_ERRORED",
          "APPLICATION_PROCESSING_EXCEEDING_CONTEXT_WINDOW",
          "APPLICATION_PROCESSING_UNEXPECTED"
        ],
        "title": "ApplicationProcessingErrorCode"
      },
      "ApplicationProcessingErrorResponse": {
        "properties": {
          "sgp_error_code": {
            "type": "string",
            "enum": [
              "APPLICATION_PROCESSING_ERROR"
            ],
            "const": "APPLICATION_PROCESSING_ERROR",
            "title": "Sgp Error Code",
            "default": "APPLICATION_PROCESSING_ERROR"
          },
          "error_code": {
            "$ref": "#/components/schemas/ApplicationProcessingErrorCode"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "detail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Detail"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "title": "ApplicationProcessingErrorResponse"
      },
      "ApplicationProcessingRequest": {
        "properties": {
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "Input data for the application. For agents service variants, you must provide inputs as a mapping from `{input_name: input_value}`. For V0 variants, you must specify the node your input should be passed to, structuring your input as `{node_id: {input_name: input_value}}`.",
            "additionalProperties": true
          },
          "history": {
            "title": "History",
            "description": "History of the application",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ApplicationRequestResponsePair"
            },
            "type": "array"
          },
          "overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgenticApplicationOverrides"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KnowledgeBaseNodeOverride"
                },
                "type": "object"
              }
            ],
            "title": "Overrides",
            "description": "Optional overrides for the application"
          },
          "stream": {
            "title": "Stream",
            "description": "Control to have streaming of the endpoint. If the last node before the output is a completion node, you can set this to true to get the output as soon as the completion node has a token",
            "default": false,
            "type": "boolean"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "Arbitrary user-defined metadata that can be attached to the process operations and will be registered in the interaction.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "inputs"
        ],
        "title": "ApplicationProcessingRequest"
      },
      "ApplicationRequestResponsePair": {
        "properties": {
          "request": {
            "type": "string",
            "title": "Request",
            "description": "Request inputs"
          },
          "response": {
            "type": "string",
            "title": "Response",
            "description": "Response outputs"
          },
          "session_data": {
            "title": "Session Data",
            "description": "Session data corresponding to the request response pair",
            "default": {},
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "request",
          "response"
        ],
        "title": "ApplicationRequestResponsePair"
      },
      "ApplicationSchemaVersion": {
        "type": "string",
        "enum": [
          "OFFLINE",
          "V0",
          "AGENTS_SERVICE"
        ],
        "title": "ApplicationSchemaVersion",
        "description": "An enum representing the version states of an application and its nodes' schemas.\nAttributes:\n    V0: The initial version of an application schema.\n    AGENTS_SERVICE: Application schema references egp_services definition.\n    OFFLINE: Application schema for applications that do not run on SGP directly."
      },
      "ApplicationScoreCategoryEnum": {
        "type": "string",
        "enum": [
          "accuracy",
          "quality",
          "retrieval",
          "trust-and-safety"
        ],
        "title": "ApplicationScoreCategoryEnum"
      },
      "ApplicationScoreMetricTypeEnum": {
        "type": "string",
        "enum": [
          "answer-correctness",
          "answer-relevance",
          "faithfulness",
          "context-recall",
          "coherence",
          "grammar",
          "moderation",
          "safety"
        ],
        "title": "ApplicationScoreMetricTypeEnum"
      },
      "ApplicationScorerBaseModelName": {
        "type": "string",
        "enum": [
          "gpt-4-turbo-2024-04-09",
          "gpt-3.5-turbo-0125",
          "gpt-4o-2024-05-13"
        ],
        "title": "ApplicationScorerBaseModelName"
      },
      "ApplicationSpecRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Application Spec"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Application Spec"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application spec should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "account_id"
        ],
        "title": "ApplicationSpecRequest"
      },
      "ApplicationSpecWithActiveDeployment": {
        "properties": {
          "application_spec": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationSpecResponse"
          },
          "application_variant": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationVariantResponse"
          },
          "application_deployment": {
            "$ref": "#/components/schemas/ApplicationDeploymentResponse"
          },
          "theme": {
            "$ref": "#/components/schemas/ThemeResponse"
          },
          "supports_multi_turn": {
            "type": "boolean",
            "title": "Supports Multi Turn"
          }
        },
        "type": "object",
        "required": [
          "application_spec",
          "application_variant",
          "application_deployment",
          "theme",
          "supports_multi_turn"
        ],
        "title": "ApplicationSpecWithActiveDeployment"
      },
      "ApplicationSpecWithEvaluationCount": {
        "properties": {
          "application_spec": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationSpecResponse"
          },
          "evaluation_count": {
            "type": "integer",
            "title": "Evaluation Count"
          },
          "application_variant_count": {
            "type": "integer",
            "title": "Application Variant Count"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "application_spec",
          "evaluation_count",
          "application_variant_count",
          "updated_at"
        ],
        "title": "ApplicationSpecWithEvaluationCount"
      },
      "ApplicationTestCaseFlexibleOutputResponse": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "$ref": "#/components/schemas/ResultSchemaFlexible"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "FLEXIBLE"
            ],
            "const": "FLEXIBLE",
            "title": "Schema Type",
            "default": "FLEXIBLE"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_id",
          "output",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationTestCaseFlexibleOutputResponse"
      },
      "ApplicationTestCaseFlexibleOutputResponseWithViews": {
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/ApplicationInteractionWithSpansResponse"
          },
          "test_case_version": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
          },
          "metric_scores": {
            "title": "Metric Scores",
            "items": {
              "$ref": "#/components/schemas/ApplicationMetricScoreWithMetadata"
            },
            "type": "array"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "$ref": "#/components/schemas/ResultSchemaFlexible"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "FLEXIBLE"
            ],
            "const": "FLEXIBLE",
            "title": "Schema Type",
            "default": "FLEXIBLE"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_id",
          "output",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationTestCaseFlexibleOutputResponseWithViews"
      },
      "ApplicationTestCaseGenerationOutputResponse": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "$ref": "#/components/schemas/ResultSchemaGeneration"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_id",
          "output",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationTestCaseGenerationOutputResponse"
      },
      "ApplicationTestCaseGenerationOutputResponseWithViews": {
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/ApplicationInteractionWithSpansResponse"
          },
          "test_case_version": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
          },
          "metric_scores": {
            "title": "Metric Scores",
            "items": {
              "$ref": "#/components/schemas/ApplicationMetricScoreWithMetadata"
            },
            "type": "array"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "$ref": "#/components/schemas/ResultSchemaGeneration"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_id",
          "output",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationTestCaseGenerationOutputResponseWithViews"
      },
      "ApplicationTestCaseOutputRequest": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResultSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/ResultSchemaFlexible"
              }
            ],
            "title": "Output"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "evaluation_dataset_version_num": {
            "type": "integer",
            "title": "Evaluation Dataset Version Num"
          },
          "trace_spans": {
            "title": "Trace Spans",
            "description": "List of trace spans associated with the application's execution. These spans provide insight into the individual steps taken by nodes involved in generating the output.",
            "items": {
              "$ref": "#/components/schemas/EvaluationTraceSpanRequest"
            },
            "type": "array"
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          },
          "ignore_missing": {
            "title": "Ignore Missing",
            "description": "If set to true, the output batch will be saved even if there are missing outputs for some test cases.",
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "test_case_id",
          "output",
          "account_id",
          "evaluation_dataset_version_num"
        ],
        "title": "ApplicationTestCaseOutputRequest"
      },
      "ApplicationTestCaseOutputResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationTestCaseGenerationOutputResponse"
          },
          {
            "$ref": "#/components/schemas/ApplicationTestCaseFlexibleOutputResponse"
          }
        ],
        "title": "ApplicationTestCaseOutputResponse",
        "discriminator": {
          "propertyName": "schema_type",
          "mapping": {
            "FLEXIBLE": "#/components/schemas/ApplicationTestCaseFlexibleOutputResponse",
            "GENERATION": "#/components/schemas/ApplicationTestCaseGenerationOutputResponse"
          }
        }
      },
      "ApplicationTestCaseOutputResponseWithViews": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationTestCaseGenerationOutputResponseWithViews"
          },
          {
            "$ref": "#/components/schemas/ApplicationTestCaseFlexibleOutputResponseWithViews"
          }
        ],
        "title": "ApplicationTestCaseOutputResponseWithViews",
        "discriminator": {
          "propertyName": "schema_type",
          "mapping": {
            "FLEXIBLE": "#/components/schemas/ApplicationTestCaseFlexibleOutputResponseWithViews",
            "GENERATION": "#/components/schemas/ApplicationTestCaseGenerationOutputResponseWithViews"
          }
        }
      },
      "ApplicationTestCaseOutputViewsOptions": {
        "type": "string",
        "enum": [
          "MetricScores",
          "TestCaseVersion",
          "Trace"
        ],
        "title": "ApplicationTestCaseOutputViewsOptions"
      },
      "ApplicationTestCaseOutputWithTraces": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_version_id": {
            "type": "string",
            "title": "Test Case Version Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResultSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/ResultSchemaFlexible"
              }
            ],
            "title": "Output"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "can_patch": false
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "interaction": {
            "$ref": "#/components/schemas/ApplicationInteractionWithSpansResponse"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_version_id",
          "test_case_id",
          "output",
          "schema_type",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationTestCaseOutputWithTraces"
      },
      "ApplicationThreadForkInputStateRequest": {
        "properties": {
          "initial_state": {
            "type": "object",
            "title": "Initial State",
            "description": "State of the the agent",
            "additionalProperties": true
          },
          "interaction_id": {
            "type": "string",
            "title": "Interaction Id",
            "description": "ID of the interaction to update"
          }
        },
        "type": "object",
        "required": [
          "initial_state",
          "interaction_id"
        ],
        "title": "ApplicationThreadForkInputStateRequest"
      },
      "ApplicationThreadForkInputsRequest": {
        "properties": {
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "New set of inputs to process",
            "additionalProperties": true
          },
          "interaction_id": {
            "type": "string",
            "title": "Interaction Id",
            "description": "ID of the interaction to update"
          }
        },
        "type": "object",
        "required": [
          "inputs",
          "interaction_id"
        ],
        "title": "ApplicationThreadForkInputsRequest"
      },
      "ApplicationThreadForkSpanUpdateRequest": {
        "properties": {
          "span_id": {
            "type": "string",
            "title": "Span Id",
            "description": "ID of the span to update"
          },
          "outputs": {
            "type": "object",
            "title": "Outputs",
            "description": "New set of outputs from the span",
            "additionalProperties": true
          },
          "interaction_id": {
            "type": "string",
            "title": "Interaction Id",
            "description": "ID of the interaction to update"
          }
        },
        "type": "object",
        "required": [
          "span_id",
          "outputs",
          "interaction_id"
        ],
        "title": "ApplicationThreadForkSpanUpdateRequest"
      },
      "ApplicationThreadForkingRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ApplicationThreadForkInputsRequest"
          },
          {
            "$ref": "#/components/schemas/ApplicationThreadForkSpanUpdateRequest"
          },
          {
            "$ref": "#/components/schemas/ApplicationThreadForkInputStateRequest"
          }
        ],
        "title": "ApplicationThreadForkingRequest",
        "description": "Either provide new inputs or a span ID to update"
      },
      "ApplicationThreadForkingResponse": {
        "properties": {
          "thread_id": {
            "type": "string",
            "title": "Thread Id",
            "description": "ID of the new thread"
          },
          "processing_response": {
            "title": "Processing Response",
            "description": "Response from the processing request (the same shape as the response from calling the process endpoint)"
          }
        },
        "type": "object",
        "required": [
          "thread_id",
          "processing_response"
        ],
        "title": "ApplicationThreadForkingResponse"
      },
      "ApplicationTraceDetail": {
        "properties": {
          "interaction": {
            "$ref": "#/components/schemas/ApplicationInteractionResponse",
            "description": "Interaction details"
          },
          "interaction_guardrail_results": {
            "title": "Interaction Guardrail Results",
            "description": "Input guardrail results",
            "items": {
              "$ref": "#/components/schemas/GuardrailCheckResultWithPolicy"
            },
            "type": "array"
          },
          "application_variant": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationVariantResponse",
            "description": "Application variant"
          },
          "thread_interactions": {
            "title": "Thread Interactions",
            "description": "List of interactions in the same thread",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ApplicationInteractionResponse"
            },
            "type": "array"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Trace metadata",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "spans": {
            "title": "Spans",
            "description": "List of Span IDs belonging to this trace",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ApplicationTraceSpanResponse"
            },
            "type": "array"
          },
          "feedback": {
            "description": "Feedback sentiment",
            "$ref": "#/components/schemas/FeedbackSentiment"
          },
          "feedback_comment": {
            "title": "Feedback Comment",
            "description": "Feedback comment",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "interaction",
          "application_variant"
        ],
        "title": "ApplicationTraceDetail"
      },
      "ApplicationTraceSpanResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Identifies the application step"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "description": "The interaction ID this span belongs to",
            "type": "string"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "description": "The id of the application variant this span belongs to",
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "The id of the node in the application_variant config that emitted this insight"
          },
          "operation_type": {
            "$ref": "#/components/schemas/ApplicationOperationType",
            "description": "Type of the operation, e.g. RERANKING"
          },
          "operation_status": {
            "$ref": "#/components/schemas/ApplicationOperationStatus",
            "description": "The outcome of the operation"
          },
          "operation_input": {
            "title": "Operation Input",
            "description": "The JSON representation of the input that this step received",
            "type": "object",
            "additionalProperties": true
          },
          "operation_output": {
            "title": "Operation Output",
            "description": "The JSON representation of the output that this step emitted",
            "type": "object",
            "additionalProperties": true
          },
          "operation_expected": {
            "title": "Operation Expected",
            "description": "The JSON representation of the expected output for this step",
            "type": "object",
            "additionalProperties": true
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted through the execution. This can differ based on different types of operations",
            "type": "object",
            "additionalProperties": true
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "The start time of the step"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "description": "The end time of the step, nullable, since it can be set to done at a later point in time.",
            "type": "string",
            "format": "date-time"
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "How much time the step took in milliseconds(ms)"
          },
          "trace_id": {
            "title": "Trace Id",
            "description": "The root-level ID where this span belongs to",
            "type": "string"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "Who is the parent span of this current span, null if span is root parent.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "node_id",
          "operation_type",
          "operation_status",
          "start_timestamp",
          "duration_ms"
        ],
        "title": "ApplicationTraceSpanResponse"
      },
      "ApplicationUpdateRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "The name of the Application Spec",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "The description of the Application Spec",
            "type": "string"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application should run online evaluation, default is `false`",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ApplicationUpdateRequest"
      },
      "ApplicationValidationRequest": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ApplicationNode"
            },
            "type": "array",
            "title": "Nodes",
            "description": "List of nodes in the application graph"
          },
          "edges": {
            "items": {
              "$ref": "#/components/schemas/ApplicationEdge"
            },
            "type": "array",
            "title": "Edges",
            "description": "List of edges in the application graph"
          },
          "version": {
            "type": "string",
            "enum": [
              "V0"
            ],
            "const": "V0",
            "title": "Version",
            "description": "Version of the application schema"
          },
          "overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgenticApplicationOverrides"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KnowledgeBaseNodeOverride"
                },
                "type": "object"
              }
            ],
            "title": "Overrides",
            "description": "Optional overrides for the application"
          }
        },
        "type": "object",
        "required": [
          "nodes",
          "edges",
          "version"
        ],
        "title": "ApplicationValidationRequest"
      },
      "ApplicationVariant": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "application_variant"
            ],
            "const": "application_variant",
            "title": "Object",
            "default": "application_variant"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationConfigurationV0"
              },
              {
                "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
              },
              {
                "$ref": "#/components/schemas/OfflineApplicationConfiguration"
              }
            ],
            "title": "Configuration"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationSchemaVersion"
          },
          "application_id": {
            "type": "string",
            "title": "Application Id"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time when the entity was published in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "configuration",
          "draft",
          "version",
          "application_id",
          "created_at"
        ]
      },
      "ApplicationVariantAgentsServiceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "AGENTS_SERVICE"
            ],
            "const": "AGENTS_SERVICE",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "account_id"
        ],
        "title": "ApplicationVariantAgentsServiceRequest"
      },
      "ApplicationVariantAgentsServiceRequestWithoutSpecId": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "AGENTS_SERVICE"
            ],
            "const": "AGENTS_SERVICE",
            "title": "Version"
          },
          "application_spec_id": {
            "title": "Application Spec Id",
            "type": "string"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "account_id"
        ],
        "title": "ApplicationVariantAgentsServiceRequestWithoutSpecId"
      },
      "ApplicationVariantAgentsServiceResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "AGENTS_SERVICE"
            ],
            "const": "AGENTS_SERVICE",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "draft",
          "account_id",
          "created_at",
          "updated_at"
        ],
        "title": "ApplicationVariantAgentsServiceResponse"
      },
      "ApplicationVariantCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationSchemaVersion"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationConfigurationV0"
              },
              {
                "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
              },
              {
                "$ref": "#/components/schemas/OfflineApplicationConfiguration"
              }
            ],
            "title": "Configuration"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Whether the application variant is in draft mode",
            "default": false
          },
          "application_id": {
            "type": "string",
            "title": "Application Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version",
          "configuration",
          "application_id"
        ],
        "title": "ApplicationVariantCreateRequest"
      },
      "ApplicationVariantNestedCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationSchemaVersion"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationConfigurationV0"
              },
              {
                "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
              },
              {
                "$ref": "#/components/schemas/OfflineApplicationConfiguration"
              }
            ],
            "title": "Configuration"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Whether the application variant is in draft mode",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "version",
          "configuration"
        ],
        "title": "ApplicationVariantNestedCreateRequest"
      },
      "ApplicationVariantProcessingRequest": {
        "properties": {
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "Input data for the application. For agents service variants, you must provide inputs as a mapping from `{input_name: input_value}`. For V0 variants, you must specify the node your input should be passed to, structuring your input as `{node_id: {input_name: input_value}}`.",
            "additionalProperties": true
          },
          "history": {
            "title": "History",
            "description": "History of the application",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ApplicationRequestResponsePair"
            },
            "type": "array"
          },
          "overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgenticApplicationOverrides"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KnowledgeBaseNodeOverride"
                },
                "type": "object"
              }
            ],
            "title": "Overrides",
            "description": "Optional overrides for the application"
          },
          "stream": {
            "title": "Stream",
            "description": "Control to have streaming of the endpoint. If the last node before the output is a completion node, you can set this to true to get the output as soon as the completion node has a token",
            "default": false,
            "type": "boolean"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "Arbitrary user-defined metadata that can be attached to the process operations and will be registered in the interaction.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "inputs"
        ],
        "title": "ApplicationVariantProcessingRequest"
      },
      "ApplicationVariantReportAsyncJob": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "job_type": {
            "type": "string",
            "enum": [
              "application-variant-report-generation"
            ],
            "const": "application-variant-report-generation",
            "title": "Job Type"
          },
          "status": {
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum"
          },
          "progress": {
            "$ref": "#/components/schemas/GenericAsyncJobProgressSchema"
          },
          "job_metadata": {
            "title": "Job Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the job was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the job was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "job_type",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "ApplicationVariantReportAsyncJob"
      },
      "ApplicationVariantReportGenerationRequest": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true,
            "type": "string"
          },
          "evaluation_dataset_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1,
            "title": "Evaluation Dataset Ids"
          },
          "application_test_case_output_group_ids": {
            "title": "Application Test Case Output Group Ids",
            "items": {
              "type": "string"
            },
            "type": "array",
            "minItems": 1
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_ids"
        ],
        "title": "ApplicationVariantReportGenerationRequest"
      },
      "ApplicationVariantReportViewsOptions": {
        "type": "string",
        "enum": [
          "AsyncJobs"
        ],
        "const": "AsyncJobs",
        "title": "ApplicationVariantReportViewsOptions"
      },
      "ApplicationVariantReportWithScoresResponse": {
        "properties": {
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id",
            "can_patch": false
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "evaluation_datasets": {
            "title": "Evaluation Datasets",
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetReportGeneration"
            },
            "type": "array"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "category_scores": {
            "title": "Category Scores",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreAccuracy"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreRetrieval"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreQuality"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreTrustAndSafety"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "application_spec_id",
          "application_variant_id",
          "id",
          "created_at",
          "account_id",
          "updated_at"
        ],
        "title": "ApplicationVariantReportWithScoresResponse"
      },
      "ApplicationVariantReportWithScoresResponseWithViews": {
        "properties": {
          "async_jobs": {
            "title": "Async Jobs",
            "items": {
              "$ref": "#/components/schemas/ApplicationVariantReportAsyncJob"
            },
            "type": "array"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id",
            "can_patch": false
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "evaluation_datasets": {
            "title": "Evaluation Datasets",
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetReportGeneration"
            },
            "type": "array"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "category_scores": {
            "title": "Category Scores",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreAccuracy"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreRetrieval"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreQuality"
                },
                {
                  "$ref": "#/components/schemas/ApplicationCategoryScoreTrustAndSafety"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "application_spec_id",
          "application_variant_id",
          "id",
          "created_at",
          "account_id",
          "updated_at"
        ],
        "title": "ApplicationVariantReportWithScoresResponseWithViews"
      },
      "ApplicationVariantRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationVariantV0Request"
          },
          {
            "$ref": "#/components/schemas/ApplicationVariantAgentsServiceRequest"
          },
          {
            "$ref": "#/components/schemas/OfflineApplicationVariantRequest"
          }
        ],
        "title": "ApplicationVariantRequest",
        "discriminator": {
          "propertyName": "version",
          "mapping": {
            "AGENTS_SERVICE": "#/components/schemas/ApplicationVariantAgentsServiceRequest",
            "OFFLINE": "#/components/schemas/OfflineApplicationVariantRequest",
            "V0": "#/components/schemas/ApplicationVariantV0Request"
          }
        }
      },
      "ApplicationVariantRequestWithoutSpecId": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationVariantV0RequestWithoutSpecId"
          },
          {
            "$ref": "#/components/schemas/ApplicationVariantAgentsServiceRequestWithoutSpecId"
          },
          {
            "$ref": "#/components/schemas/OfflineApplicationVariantRequestWithoutSpecId"
          }
        ],
        "title": "ApplicationVariantRequestWithoutSpecId",
        "discriminator": {
          "propertyName": "version",
          "mapping": {
            "AGENTS_SERVICE": "#/components/schemas/ApplicationVariantAgentsServiceRequestWithoutSpecId",
            "OFFLINE": "#/components/schemas/OfflineApplicationVariantRequestWithoutSpecId",
            "V0": "#/components/schemas/ApplicationVariantV0RequestWithoutSpecId"
          }
        }
      },
      "ApplicationVariantUpdateRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/PatchApplicationVariantConfiguration"
          }
        },
        "type": "object",
        "title": "ApplicationVariantUpdateRequest"
      },
      "ApplicationVariantV0Request": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationConfigurationV0"
          },
          "version": {
            "type": "string",
            "enum": [
              "V0"
            ],
            "const": "V0",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "account_id"
        ],
        "title": "ApplicationVariantV0Request"
      },
      "ApplicationVariantV0RequestWithoutSpecId": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationConfigurationV0"
          },
          "version": {
            "type": "string",
            "enum": [
              "V0"
            ],
            "const": "V0",
            "title": "Version"
          },
          "application_spec_id": {
            "title": "Application Spec Id",
            "type": "string"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "account_id"
        ],
        "title": "ApplicationVariantV0RequestWithoutSpecId"
      },
      "ApplicationVariantV0Response": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationConfigurationV0"
          },
          "version": {
            "type": "string",
            "enum": [
              "V0"
            ],
            "const": "V0",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "draft",
          "account_id",
          "created_at",
          "updated_at"
        ],
        "title": "ApplicationVariantV0Response"
      },
      "ApplicationVariantV1EvaluationTask": {
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "application_variant"
            ],
            "const": "application_variant",
            "title": "Task Type",
            "default": "application_variant"
          },
          "alias": {
            "title": "Alias",
            "description": "Alias to title the results column. Defaults to the `task_type`",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ApplicationVariantV1RequestWithItemLocator"
          }
        },
        "type": "object",
        "required": [
          "configuration"
        ],
        "title": "ApplicationVariantV1EvaluationTask"
      },
      "ApplicationVariantV1RequestWithItemLocator": {
        "properties": {
          "inputs": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Inputs"
          },
          "history": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ApplicationRequestResponsePair"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "History",
            "default": []
          },
          "overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgenticApplicationOverrides"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Overrides"
          },
          "operation_metadata": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Operation Metadata"
          },
          "application_variant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Application Variant Id"
          }
        },
        "type": "object",
        "required": [
          "inputs",
          "application_variant_id"
        ],
        "title": "ApplicationVariantV1RequestWithItemLocator"
      },
      "ApplicationViews": {
        "type": "string",
        "enum": [
          "variants"
        ],
        "const": "variants",
        "title": "ApplicationViews"
      },
      "ApproveAutoGeneratedDraftTestCaseResponse": {
        "properties": {
          "autogenerated_draft_test_case_id": {
            "type": "string",
            "title": "Autogenerated Draft Test Case Id",
            "description": "Draft test_case_id that has chunk_ids missing"
          },
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether or not the test case was successfully approved"
          },
          "failed_chunks": {
            "items": {
              "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseMissingChunkInfo"
            },
            "type": "array",
            "title": "Failed Chunks"
          }
        },
        "type": "object",
        "required": [
          "autogenerated_draft_test_case_id",
          "success",
          "failed_chunks"
        ],
        "title": "ApproveAutoGeneratedDraftTestCaseResponse"
      },
      "Artifact": {
        "properties": {
          "artifact_id": {
            "title": "Artifact Id",
            "type": "string"
          },
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id"
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name"
          },
          "artifact_uri": {
            "type": "string",
            "title": "Artifact Uri"
          },
          "artifact_uri_public": {
            "title": "Artifact Uri Public",
            "type": "string"
          },
          "content_modification_identifier": {
            "title": "Content Modification Identifier",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "status": {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ArtifactUploadStatus"
          },
          "status_reason": {
            "title": "Status Reason",
            "type": "string"
          },
          "checkpoint": {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ArtifactUploadStatus"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Deleted At"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_id",
          "artifact_name",
          "artifact_uri",
          "source",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "Artifact"
      },
      "ArtifactChunk": {
        "properties": {
          "chunk_id": {
            "type": "string",
            "title": "Chunk Id",
            "description": "Unique ID of the chunk."
          },
          "upload_status": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ChunkUploadStatus",
            "description": "Upload status of the chunk."
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Reason for the chunk's upload status.",
            "type": "string"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Associated text of the chunk."
          },
          "chunk_position": {
            "type": "integer",
            "title": "Chunk Position",
            "description": "Position of the chunk in the artifact."
          },
          "embedding": {
            "title": "Embedding",
            "description": "Vector embedding of the chunk's text. Null if not embedded yet.",
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata associated with the chunk.",
            "default": {},
            "additionalProperties": true
          },
          "user_supplied_metadata": {
            "title": "User Supplied Metadata",
            "description": "Additional metadata associated with the chunk generated by custom chunking",
            "default": {},
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "chunk_id",
          "upload_status",
          "text",
          "chunk_position"
        ],
        "title": "ArtifactChunk"
      },
      "ArtifactChunkUpload": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Associated text of the chunk."
          },
          "chunk_position": {
            "type": "integer",
            "title": "Chunk Position",
            "description": "Position of the chunk in the artifact."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata associated with the chunk.",
            "default": {},
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "text",
          "chunk_position"
        ],
        "title": "ArtifactChunkUpload"
      },
      "ArtifactSchemaGeneration": {
        "properties": {
          "input": {
            "type": "string",
            "title": "Input"
          },
          "expected_output": {
            "title": "Expected Output",
            "type": "string"
          },
          "expected_extra_info": {
            "$ref": "#/components/schemas/ExtraInfoSchema"
          },
          "artifact_ids_filter": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Artifact Ids Filter"
          }
        },
        "type": "object",
        "required": [
          "input",
          "artifact_ids_filter"
        ],
        "title": "ArtifactSchemaGeneration"
      },
      "ArtifactSource": {
        "type": "string",
        "enum": [
          "S3",
          "Confluence",
          "SharePoint",
          "GoogleDrive",
          "AzureBlobStorage",
          "Slack",
          "LocalFile",
          "LocalChunks"
        ],
        "title": "ArtifactSource"
      },
      "ArtifactsStatus": {
        "properties": {
          "artifacts_chunking": {
            "type": "integer",
            "title": "Artifacts Chunking",
            "description": "Number of artifacts in the chunking state"
          },
          "artifacts_embedding": {
            "type": "integer",
            "title": "Artifacts Embedding",
            "description": "Number of artifacts in the embedding state"
          },
          "artifacts_completed": {
            "type": "integer",
            "title": "Artifacts Completed",
            "description": "Number of artifacts uploaded successfully."
          },
          "artifacts_pending": {
            "type": "integer",
            "title": "Artifacts Pending",
            "description": "Previously: Number of artifacts awaiting upload. Note that this status will be deprecated soon and should show 0"
          },
          "artifacts_uploading": {
            "type": "integer",
            "title": "Artifacts Uploading",
            "description": "Number of artifacts with upload in progress."
          },
          "artifacts_failed": {
            "type": "integer",
            "title": "Artifacts Failed",
            "description": "Number of artifacts that failed while being processed."
          }
        },
        "type": "object",
        "required": [
          "artifacts_chunking",
          "artifacts_embedding",
          "artifacts_completed",
          "artifacts_pending",
          "artifacts_uploading",
          "artifacts_failed"
        ],
        "title": "ArtifactsStatus"
      },
      "AssumeProfileRequest": {
        "properties": {
          "access_profile_id": {
            "type": "string",
            "title": "Access Profile Id",
            "description": "The ID of the access profile to assume."
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "access_profile_id"
        ],
        "title": "AssumeProfileRequest"
      },
      "AsyncEvaluationAutoEvalResult": {
        "properties": {
          "auto_eval_id": {
            "type": "string",
            "title": "Auto Eval Id"
          },
          "num_test_cases": {
            "type": "integer",
            "title": "Num Test Cases"
          }
        },
        "type": "object",
        "required": [
          "auto_eval_id",
          "num_test_cases"
        ],
        "title": "AsyncEvaluationAutoEvalResult"
      },
      "AsyncJobAPIStatusEnum": {
        "type": "string",
        "enum": [
          "Active",
          "All"
        ],
        "title": "AsyncJobAPIStatusEnum"
      },
      "AsyncJobForView": {
        "properties": {
          "job_type": {
            "title": "Job Type",
            "type": "string"
          },
          "parent_job_id": {
            "title": "Parent Job Id",
            "type": "string"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "title": "Progress",
            "type": "object",
            "additionalProperties": true
          },
          "job_metadata": {
            "title": "Job Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          }
        },
        "type": "object",
        "required": [
          "status",
          "created_at",
          "updated_at",
          "id"
        ],
        "title": "AsyncJobForView"
      },
      "AsyncJobType": {
        "type": "string",
        "enum": [
          "evaluation-auto-eval",
          "evaluation-test-cases-result-gen",
          "evaluation-metrics-gen",
          "evaluation-builder",
          "evaluation-dataset-generation",
          "knowledge_base_upload",
          "application-variant-report-generation",
          "application-interaction-evaluation",
          "deploy-inference-model",
          "update-inference-model",
          "evaluation-task-execution",
          "evaluation-task-runner",
          "parse-document"
        ],
        "title": "AsyncJobType"
      },
      "AsyncJobsEntity": {
        "properties": {
          "job_type": {
            "$ref": "#/components/schemas/AsyncJobType"
          },
          "parent_job_id": {
            "title": "Parent Job Id",
            "type": "string"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress": {
            "title": "Progress",
            "type": "object",
            "additionalProperties": true
          },
          "job_metadata": {
            "title": "Job Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "idempotency_key": {
            "title": "Idempotency Key",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "job_type",
          "status",
          "id",
          "created_at",
          "account_id",
          "updated_at"
        ],
        "title": "AsyncJobsEntity"
      },
      "AttackCategory": {
        "type": "string",
        "enum": [
          "Cybersecurity & Hacking",
          "Model Vulnerabilities",
          "PII - Name",
          "PII - Address",
          "PII - Phone Number",
          "PII - IP Address",
          "PII - Driver's License",
          "PII - National ID",
          "PII - Email",
          "PII",
          "Financial Harm",
          "Reputational Harm",
          "Societal Harm",
          "User Harm",
          "Intellectual Property Theft"
        ],
        "title": "AttackCategory"
      },
      "AttestationRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DatasetUploadAttestationRequest"
          },
          {
            "$ref": "#/components/schemas/OutputUploadAttestationRequest"
          }
        ],
        "title": "AttestationRequest",
        "discriminator": {
          "propertyName": "attestation_type",
          "mapping": {
            "dataset_upload": "#/components/schemas/DatasetUploadAttestationRequest",
            "output_upload": "#/components/schemas/OutputUploadAttestationRequest"
          }
        }
      },
      "AuditORMStatusEnum": {
        "type": "string",
        "enum": [
          "UNAUDITED",
          "FIXED",
          "APPROVED"
        ],
        "title": "AuditORMStatusEnum"
      },
      "AuditTable": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AuditTableType"
          },
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Columns"
          },
          "rows": {
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array",
            "title": "Rows"
          }
        },
        "type": "object",
        "required": [
          "type",
          "columns",
          "rows"
        ],
        "title": "AuditTable"
      },
      "AuditTableType": {
        "type": "string",
        "enum": [
          "access",
          "login",
          "users",
          "evaluations",
          "feature_flags"
        ],
        "title": "AuditTableType"
      },
      "AuditTables": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "audit.tables"
            ],
            "const": "audit.tables",
            "title": "Object",
            "default": "audit.tables"
          },
          "start_time": {
            "title": "Start Time",
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "title": "End Time",
            "type": "string",
            "format": "date-time"
          },
          "tables": {
            "items": {
              "$ref": "#/components/schemas/AuditTable"
            },
            "type": "array",
            "title": "Tables"
          }
        },
        "type": "object",
        "required": [
          "start_time",
          "end_time",
          "tables"
        ]
      },
      "AuthorizationPrinciple": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AuthorizationPrincipleType"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "title": "AuthorizationPrinciple"
      },
      "AuthorizationPrincipleType": {
        "type": "string",
        "enum": [
          "identity",
          "account"
        ],
        "title": "AuthorizationPrincipleType"
      },
      "AuthorizationResource": {
        "properties": {
          "resource": {
            "type": "string",
            "title": "Resource"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "resource",
          "id"
        ],
        "title": "AuthorizationResource"
      },
      "AutoEvalBaseModelName": {
        "type": "string",
        "enum": [
          "gpt-4-32k-0613",
          "gpt-4-turbo-preview",
          "gpt-4-turbo-2024-04-09",
          "gpt-4o-2024-05-13",
          "gpt-4o",
          "gpt-4o-mini-2024-07-18",
          "gpt-4o-mini",
          "o1",
          "o1-mini",
          "o3-mini-2025-01-31",
          "llama-3-70b-instruct",
          "llama-3-1-70b-instruct",
          "llama-3-70b-instruct-bedrock"
        ],
        "title": "AutoEvalBaseModelName"
      },
      "AutoEvalEvaluationConfigRequest": {
        "properties": {
          "evaluation_type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "llm_auto"
                ],
                "const": "llm_auto"
              },
              {
                "type": "string",
                "enum": [
                  "llm_benchmark"
                ],
                "const": "llm_benchmark"
              }
            ],
            "title": "Evaluation Type",
            "description": "Evaluation type",
            "default": "llm_auto"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "auto_evaluation_model": {
            "type": "string",
            "enum": [
              "llama-3-1-70b-instruct",
              "gpt-4-turbo-2024-04-09",
              "llama-3-70b-instruct-bedrock",
              "gpt-4o",
              "gpt-4o-mini",
              "o1"
            ],
            "title": "Auto Evaluation Model",
            "description": "The name of the model to be used for auto-evaluation",
            "default": "gpt-4-turbo-2024-04-09"
          },
          "auto_evaluation_parameters": {
            "description": "Execution parameters for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvaluationParameters"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "question_set_id",
          "account_id"
        ],
        "title": "AutoEvalEvaluationConfigRequest"
      },
      "AutoEvaluationParameters": {
        "properties": {
          "temperature": {
            "title": "Temperature",
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "batch_size": {
            "title": "Batch Size",
            "type": "integer",
            "maximum": 25.0,
            "minimum": 1.0
          }
        },
        "type": "object",
        "title": "AutoEvaluationParameters"
      },
      "AutoEvaluationPrompt": {
        "properties": {
          "variables": {
            "items": {
              "$ref": "#/components/schemas/PromptVariable"
            },
            "type": "array",
            "title": "Variables"
          },
          "template": {
            "type": "string",
            "title": "Template"
          }
        },
        "type": "object",
        "required": [
          "variables",
          "template"
        ],
        "title": "AutoEvaluationPrompt"
      },
      "AutoGeneratedDraftTestCaseApproveBatchRequest": {
        "properties": {
          "autogenerated_draft_test_cases": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Autogenerated Draft Test Cases",
            "description": "Ids of auto generated draft test cases to be approved."
          }
        },
        "type": "object",
        "required": [
          "autogenerated_draft_test_cases"
        ],
        "title": "AutoGeneratedDraftTestCaseApproveBatchRequest"
      },
      "AutoGeneratedDraftTestCaseApproveBatchResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether or not the batch approval was successful"
          },
          "autogenerated_draft_test_cases": {
            "items": {
              "$ref": "#/components/schemas/ApproveAutoGeneratedDraftTestCaseResponse"
            },
            "type": "array",
            "title": "Autogenerated Draft Test Cases",
            "description": "List of responses for each of the input draft test cases."
          }
        },
        "type": "object",
        "required": [
          "success",
          "autogenerated_draft_test_cases"
        ],
        "title": "AutoGeneratedDraftTestCaseApproveBatchResponse"
      },
      "AutoGeneratedDraftTestCaseMissingChunkInfo": {
        "properties": {
          "chunk_text": {
            "type": "string",
            "title": "Chunk Text",
            "description": "Text of chunk_id that is missing"
          },
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "Artifact ID of the missing chunk"
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name",
            "description": "Artifact Name of the missing chunk"
          },
          "artifact_content_modification_identifier": {
            "type": "string",
            "title": "Artifact Content Modification Identifier",
            "description": "Artifact Content Modification Identifier of the missing chunk"
          }
        },
        "type": "object",
        "required": [
          "chunk_text",
          "artifact_id",
          "artifact_name",
          "artifact_content_modification_identifier"
        ],
        "title": "AutoGeneratedDraftTestCaseMissingChunkInfo"
      },
      "AutoGeneratedDraftTestCaseRequest": {
        "properties": {
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              }
            ],
            "title": "Test Case Data",
            "description": "The data for the test case in a format matching the provided schema_type"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Boolean to track whether or not the draft test case is approved"
          },
          "topic_str": {
            "title": "Topic Str",
            "can_patch": false,
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "test_case_data",
          "approved",
          "account_id"
        ],
        "title": "AutoGeneratedDraftTestCaseRequest"
      },
      "AutoGeneratedDraftTestCaseResponse": {
        "properties": {
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset.",
            "can_patch": false
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              }
            ],
            "title": "Test Case Data",
            "description": "The data for the test case in a format matching the provided schema_type"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Boolean to track whether or not the draft test case is approved"
          },
          "topic_str": {
            "title": "Topic Str",
            "can_patch": false,
            "type": "string"
          },
          "content_metadata": {
            "type": "object",
            "title": "Content Metadata",
            "description": "Metadata for the chunks and artifacts that were used to generate this draft test case.",
            "can_patch": false,
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "evaluation_dataset_id",
          "test_case_data",
          "approved",
          "content_metadata",
          "id",
          "account_id",
          "created_at",
          "updated_at",
          "created_by_user_id"
        ],
        "title": "AutoGeneratedDraftTestCaseResponse"
      },
      "AutoGeneratedDraftTestCaseWithChunkInfoResponse": {
        "properties": {
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset.",
            "can_patch": false
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset.",
            "can_patch": false
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              }
            ],
            "title": "Test Case Data",
            "description": "The data for the test case in a format matching the provided schema_type"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Boolean to track whether or not the draft test case is approved"
          },
          "topic_str": {
            "title": "Topic Str",
            "can_patch": false,
            "type": "string"
          },
          "content_metadata": {
            "type": "object",
            "title": "Content Metadata",
            "description": "Metadata for the chunks and artifacts that were used to generate this draft test case.",
            "can_patch": false,
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "missing_chunks": {
            "title": "Missing Chunks",
            "items": {
              "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseMissingChunkInfo"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "evaluation_dataset_id",
          "schema_type",
          "test_case_data",
          "approved",
          "content_metadata",
          "id",
          "account_id",
          "created_at",
          "updated_at",
          "created_by_user_id"
        ],
        "title": "AutoGeneratedDraftTestCaseWithChunkInfoResponse"
      },
      "AutoGeneratedEvaluationDatasetRequest": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "autogenerated"
            ],
            "const": "autogenerated",
            "title": "Type",
            "description": "Manually or automatically generated dataset",
            "default": "autogenerated"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "description": "The schema type of the dataset. Only GENERATION is currently supported."
          },
          "knowledge_base_id": {
            "title": "Knowledge Base Id",
            "description": "ID of the knowledge base to generate the evaluation dataset from.",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "knowledge_base_id",
          "account_id"
        ],
        "title": "AutoGeneratedEvaluationDatasetRequest"
      },
      "AzureAIFoundryRankParams": {
        "properties": {
          "endpoint_url": {
            "type": "string",
            "title": "Endpoint Url",
            "description": "Azure AI Foundry model endpoint to use for reranking. Example url: https://cohere-rerank-v3-multilingual-xyz.eastus.models.ai.azure.com/v2/rerank"
          },
          "endpoint_api_key": {
            "type": "string",
            "title": "Endpoint Api Key",
            "description": "Azure AI Foundry Endpoint API key to use for reranking."
          }
        },
        "type": "object",
        "required": [
          "endpoint_url",
          "endpoint_api_key"
        ],
        "title": "AzureAIFoundryRankParams"
      },
      "AzureAIFoundryRankStrategy": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "azure_ai_foundry"
            ],
            "const": "azure_ai_foundry",
            "title": "Method",
            "description": "Use a model from Azure AI Foundry for ranking.",
            "default": "azure_ai_foundry"
          },
          "params": {
            "$ref": "#/components/schemas/AzureAIFoundryRankParams",
            "description": "The parameters needed for ranking."
          }
        },
        "type": "object",
        "required": [
          "params"
        ],
        "title": "AzureAIFoundryRankStrategy"
      },
      "AzureBlobStorageDataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "AzureBlobStorage"
            ],
            "const": "AzureBlobStorage",
            "title": "Source"
          },
          "blob_sas_token": {
            "type": "string",
            "title": "Blob Sas Token",
            "description": "Shared Access Signature token for the Azure Blob Storage container"
          }
        },
        "type": "object",
        "required": [
          "source",
          "blob_sas_token"
        ],
        "title": "Azure DataSource Auth Config"
      },
      "AzureBlobStorageDataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "AzureBlobStorage"
            ],
            "const": "AzureBlobStorage",
            "title": "Source"
          },
          "container_url": {
            "type": "string",
            "title": "Container Url",
            "description": "The full URL of the container such as 'https://your-account-name.blob.core.windows.net/your-container-name'"
          }
        },
        "type": "object",
        "required": [
          "source",
          "container_url"
        ],
        "title": "Azure Blob Storage DataSource Config"
      },
      "BaseModelDetails": {
        "properties": {
          "number_of_parameters": {
            "title": "Number Of Parameters",
            "type": "integer"
          },
          "token_context_window": {
            "title": "Token Context Window",
            "type": "integer"
          },
          "languages": {
            "title": "Languages",
            "type": "integer"
          },
          "alignments": {
            "title": "Alignments",
            "type": "integer"
          }
        },
        "type": "object",
        "title": "BaseModelDetails"
      },
      "BaseModelMetadata": {
        "properties": {
          "ui_model_section_type": {
            "$ref": "#/components/schemas/UiModelSectionType"
          },
          "model_developer": {
            "title": "Model Developer",
            "type": "string"
          },
          "model_license_url": {
            "title": "Model License Url",
            "type": "string"
          },
          "delivery_date": {
            "title": "Delivery Date",
            "type": "string"
          },
          "modelDetails": {
            "$ref": "#/components/schemas/BaseModelDetails"
          }
        },
        "type": "object",
        "title": "BaseModelMetadata"
      },
      "BaseProcessingOptions": {
        "properties": {
          "chunking": {
            "$ref": "#/components/schemas/Chunking"
          },
          "extraction_mode": {
            "type": "string",
            "enum": [
              "ocr",
              "metadata",
              "hybrid"
            ],
            "title": "Extraction Mode"
          },
          "figure_summary": {
            "$ref": "#/components/schemas/FigureSummary"
          },
          "filter_blocks": {
            "items": {
              "type": "string",
              "enum": [
                "Header",
                "Footer",
                "Title",
                "Section Header",
                "Page Number",
                "List Item",
                "Figure",
                "Table",
                "Key Value",
                "Text",
                "Comment",
                "Discard"
              ]
            },
            "type": "array",
            "title": "Filter Blocks"
          },
          "force_url_result": {
            "type": "boolean",
            "title": "Force Url Result"
          },
          "ocr_mode": {
            "type": "string",
            "enum": [
              "standard",
              "agentic"
            ],
            "title": "Ocr Mode"
          },
          "table_summary": {
            "$ref": "#/components/schemas/TableSummary"
          }
        },
        "type": "object",
        "title": "BaseProcessingOptions"
      },
      "BaseSpanCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "trace_id": {
            "type": "string",
            "maxLength": 38,
            "title": "Trace Id",
            "description": "id for grouping traces together, uuid is recommended"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "Reference to a parent span_id",
            "type": "string"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "input": {
            "title": "Input",
            "type": "object",
            "additionalProperties": true
          },
          "output": {
            "title": "Output",
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "default": "SUCCESS",
            "$ref": "#/components/schemas/ApplicationOperationStatus"
          },
          "type": {
            "title": "Type",
            "default": "STANDALONE",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "trace_id",
          "start_timestamp"
        ],
        "title": "BaseSpanCreateRequest"
      },
      "BaseValidationRule": {
        "properties": {
          "required": {
            "title": "Required",
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "required"
        ],
        "title": "BaseValidationRule"
      },
      "BatchAssignTaskRequest": {
        "properties": {
          "task_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Task Ids",
            "description": "Tasks to be assigned"
          },
          "assigned_to": {
            "title": "Assigned To",
            "description": "The ID of the user that the task is assigned to.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "task_ids"
        ],
        "title": "BatchAssignTaskRequest"
      },
      "BatchCompletionsVendorConfiguration": {
        "$ref": "#/components/schemas/LLMEngineBatchCompletionsVendorConfiguration",
        "title": "BatchCompletionsVendorConfiguration"
      },
      "BleuScorerConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bleu"
            ],
            "const": "bleu",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "BleuScorerConfigWithItemLocator"
      },
      "Body_POST-V3-_knowledge-bases__knowledge_base_id__upload_files": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "data_source_config": {
            "type": "string",
            "title": "Data Source Config"
          },
          "chunking_strategy_config": {
            "type": "string",
            "title": "Chunking Strategy Config"
          },
          "force_reupload": {
            "title": "Force Reupload",
            "type": "boolean"
          },
          "tagging_information": {
            "title": "Tagging Information",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "files",
          "data_source_config",
          "chunking_strategy_config",
          "force_reupload"
        ],
        "title": "Body_POST-V3-/knowledge-bases/{knowledge_base_id}/upload_files"
      },
      "Body_POST-V3-_training-datasets": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/TrainingDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset, currently only GENERATION is supported"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The file to upload as the training dataset"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "name",
          "schema_type",
          "file"
        ],
        "title": "Body_POST-V3-/training-datasets"
      },
      "Body_POST-V4-_applications_upload-files": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files",
            "description": "Upload files to be used in an application."
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_POST-V4-/applications/upload-files"
      },
      "Body_POST-V4-_knowledge-bases__knowledge_base_id__upload_files": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          },
          "data_source_config": {
            "type": "string",
            "title": "Data Source Config"
          },
          "chunking_strategy_config": {
            "type": "string",
            "title": "Chunking Strategy Config"
          },
          "force_reupload": {
            "title": "Force Reupload",
            "type": "boolean"
          },
          "tagging_information": {
            "title": "Tagging Information",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "files",
          "data_source_config",
          "chunking_strategy_config",
          "force_reupload"
        ],
        "title": "Body_POST-V4-/knowledge-bases/{knowledge_base_id}/upload_files"
      },
      "Body_POST-V4-_training-datasets": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/TrainingDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset, currently only GENERATION is supported"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "The file to upload as the training dataset"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "name",
          "schema_type",
          "file"
        ],
        "title": "Body_POST-V4-/training-datasets"
      },
      "Body_POST-V4-_v4_evaluation-datasets_generate-harms": {
        "properties": {
          "harm_category": {
            "type": "string",
            "title": "Harm Category"
          }
        },
        "type": "object",
        "required": [
          "harm_category"
        ],
        "title": "Body_POST-V4-/v4/evaluation-datasets/generate-harms"
      },
      "Body_POST-V4-beta-_files": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_POST-V4-beta-/files"
      },
      "BoolConfigurationFieldSchema": {
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "docs": {
            "title": "Docs",
            "type": "string"
          },
          "default": {
            "title": "Default",
            "type": "boolean"
          },
          "is_advanced_configuration": {
            "title": "Is Advanced Configuration",
            "default": false,
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOL"
            ],
            "const": "BOOL",
            "title": "Type",
            "default": "BOOL"
          },
          "validation_rules": {
            "$ref": "#/components/schemas/BaseValidationRule"
          }
        },
        "type": "object",
        "required": [
          "label",
          "docs",
          "validation_rules"
        ],
        "title": "BoolConfigurationFieldSchema"
      },
      "BulkDeleteKnowledgeBaseV2LocalArtifactRequest": {
        "properties": {
          "artifact_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "title": "Artifact Ids",
            "description": "List of artifact ids to delete"
          }
        },
        "type": "object",
        "required": [
          "artifact_ids"
        ],
        "title": "BulkDeleteKnowledgeBaseV2LocalArtifactRequest"
      },
      "BulkDeleteKnowledgeBaseV2LocalArtifactResponse": {
        "properties": {
          "artifact_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Artifact Ids",
            "description": "List of artifact ids that were deleted"
          }
        },
        "type": "object",
        "required": [
          "artifact_ids"
        ],
        "title": "BulkDeleteKnowledgeBaseV2LocalArtifactResponse"
      },
      "CancelKnowledgeBaseV2UploadResponse": {
        "properties": {
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the knowledge base upload job that was cancelled."
          },
          "canceled": {
            "type": "boolean",
            "title": "Canceled",
            "description": "Whether cancellation was successful."
          }
        },
        "type": "object",
        "required": [
          "upload_id",
          "canceled"
        ],
        "title": "CancelKnowledgeBaseV2UploadResponse"
      },
      "CatalogDeploymentDependency": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "dependency_package_id": {
            "type": "string",
            "title": "Dependency Package Id"
          },
          "version_constraint": {
            "$ref": "#/components/schemas/PackageVersionConstraint"
          },
          "deleted_at": {
            "title": "Deleted At",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "id",
          "dependency_package_id"
        ],
        "title": "CatalogDeploymentDependency"
      },
      "CatalogDeploymentPackageWithInstalledVersions": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "deployment_package_type": {
            "$ref": "#/components/schemas/DeploymentPackageType"
          },
          "is_installable_from_ui": {
            "title": "Is Installable From Ui",
            "type": "boolean"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "deleted_at": {
            "title": "Deleted At",
            "type": "string",
            "format": "date-time"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/CatalogPackageVersionWithInstalledVersions"
            },
            "type": "array",
            "title": "Versions"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "deployment_package_type",
          "updated_at",
          "versions"
        ],
        "title": "CatalogDeploymentPackageWithInstalledVersions"
      },
      "CatalogPackageVersionWithInstalledVersions": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "release_notes": {
            "title": "Release Notes",
            "type": "string"
          },
          "arguments": {
            "title": "Arguments",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "deleted_at": {
            "title": "Deleted At",
            "type": "string",
            "format": "date-time"
          },
          "prerequisites": {
            "title": "Prerequisites",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "dependencies": {
            "items": {
              "$ref": "#/components/schemas/CatalogDeploymentDependency"
            },
            "type": "array",
            "title": "Dependencies"
          },
          "installations": {
            "items": {
              "$ref": "#/components/schemas/InstallationSummary"
            },
            "type": "array",
            "title": "Installations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "version",
          "created_at",
          "dependencies",
          "installations"
        ],
        "title": "CatalogPackageVersionWithInstalledVersions"
      },
      "CategoricalChoice": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ],
            "title": "Value"
          },
          "audit_required": {
            "type": "boolean",
            "title": "Audit Required",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "title": "CategoricalChoice"
      },
      "ChangeBackendRequest": {
        "properties": {
          "new_model_deployment_id": {
            "type": "string",
            "title": "New Model Deployment Id"
          }
        },
        "type": "object",
        "required": [
          "new_model_deployment_id"
        ],
        "title": "ChangeBackendRequest"
      },
      "ChangeBackendResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_server_id": {
            "type": "string",
            "title": "Model Server Id"
          },
          "model_deployment_id": {
            "title": "Model Deployment Id",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "alias": {
            "title": "Alias",
            "type": "string"
          },
          "new_model_deployment_id": {
            "type": "string",
            "title": "New Model Deployment Id"
          },
          "old_model_deployment_id": {
            "title": "Old Model Deployment Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_server_id",
          "account_id",
          "new_model_deployment_id"
        ],
        "title": "ChangeBackendResponse",
        "description": "Point the model server to a new model deployment.\n\nArgs:\n    old_model_deployment_id(str): The ID of the model deployment to use as the new backend."
      },
      "CharacterChunkingStrategyConfig": {
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "character"
            ],
            "const": "character",
            "title": "Strategy"
          },
          "separator": {
            "title": "Separator",
            "description": "Character designating breaks in input data. Text data will first be split into sections by this separator, then each section will be split into chunks of size `chunk_size`.",
            "default": "\n\n",
            "type": "string"
          },
          "chunk_size": {
            "title": "Chunk Size",
            "description": "Maximum number of characters in each chunk. If not specified, a chunk size of 1000 will be used.",
            "default": 1000,
            "type": "integer",
            "minimum": 1.0
          },
          "chunk_overlap": {
            "title": "Chunk Overlap",
            "description": "Number of characters to overlap between chunks. If not specified, an overlap of 200 will be used. For example if the chunk size is 3 and the overlap size is 1, and the text to chunk is 'abcde', the chunks will be 'abc', 'cde'.",
            "default": 200,
            "type": "integer",
            "minimum": 0.0
          }
        },
        "type": "object",
        "required": [
          "strategy"
        ],
        "title": "CharacterChunkingStrategyConfig"
      },
      "CharacterLimit": {
        "properties": {
          "min": {
            "type": "integer",
            "title": "Min",
            "description": "Minimum number of characters",
            "default": 50
          },
          "max": {
            "type": "integer",
            "title": "Max",
            "description": "Maximum number of characters",
            "default": 1000
          }
        },
        "type": "object",
        "title": "CharacterLimit"
      },
      "ChatCompletionAudio": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "data": {
            "type": "string",
            "title": "Data"
          },
          "expires_at": {
            "type": "integer",
            "title": "Expires At"
          },
          "transcript": {
            "type": "string",
            "title": "Transcript"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "data",
          "expires_at",
          "transcript"
        ],
        "title": "ChatCompletionAudio"
      },
      "ChatCompletionChunk": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "chat.completion.chunk"
            ],
            "const": "chat.completion.chunk",
            "title": "Object",
            "default": "chat.completion.chunk"
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_chunk__Choice"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "service_tier": {
            "title": "Service Tier",
            "type": "string",
            "enum": [
              "scale",
              "default"
            ]
          },
          "system_fingerprint": {
            "title": "System Fingerprint",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "choices",
          "created",
          "model"
        ]
      },
      "ChatCompletionEvaluationTask": {
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "chat_completion"
            ],
            "const": "chat_completion",
            "title": "Task Type",
            "default": "chat_completion"
          },
          "alias": {
            "title": "Alias",
            "description": "Alias to title the results column. Defaults to the `task_type`",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/ChatCompletionRequestWithItemLocator_"
          }
        },
        "type": "object",
        "required": [
          "configuration"
        ],
        "title": "ChatCompletionEvaluationTask"
      },
      "ChatCompletionMessage": {
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "refusal": {
            "title": "Refusal",
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "const": "assistant",
            "title": "Role"
          },
          "annotations": {
            "title": "Annotations",
            "items": {
              "$ref": "#/components/schemas/Annotation"
            },
            "type": "array"
          },
          "audio": {
            "$ref": "#/components/schemas/ChatCompletionAudio"
          },
          "function_call": {
            "$ref": "#/components/schemas/FunctionCall"
          },
          "tool_calls": {
            "title": "Tool Calls",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "role"
        ],
        "title": "ChatCompletionMessage"
      },
      "ChatCompletionMessageToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "function": {
            "$ref": "#/components/schemas/Function"
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "function",
          "type"
        ],
        "title": "ChatCompletionMessageToolCall"
      },
      "ChatCompletionRequestWithItemLocator_": {
        "properties": {
          "top_k": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Top K"
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Frequency Penalty"
          },
          "function_call": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Function Call"
          },
          "functions": {
            "anyOf": [
              {
                "items": {
                  "type": "object",
                  "additionalProperties": true
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Functions"
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Logit Bias"
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Logprobs"
          },
          "max_completion_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Max Completion Tokens"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Max Tokens"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Metadata"
          },
          "modalities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Modalities"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "N"
          },
          "parallel_tool_calls": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Parallel Tool Calls"
          },
          "prediction": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Prediction"
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Presence Penalty"
          },
          "reasoning_effort": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reasoning Effort"
          },
          "response_format": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Response Format"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Stop"
          },
          "store": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Store"
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Temperature"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Tool Choice"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "object",
                  "additionalProperties": true
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Tools"
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Top Logprobs"
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Top P"
          },
          "audio": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Audio"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Model"
          },
          "messages": {
            "anyOf": [
              {
                "items": {
                  "type": "object",
                  "additionalProperties": true
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Messages"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "ChatCompletionRequestWithItemLocator_"
      },
      "ChatMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__UserMessage"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__AssistantMessage"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__SystemMessage"
          }
        ],
        "title": "ChatMessage",
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "assistant": "#/components/schemas/egp_api_backend__server__api__models__egp_models__AssistantMessage",
            "system": "#/components/schemas/egp_api_backend__server__api__models__egp_models__SystemMessage",
            "user": "#/components/schemas/egp_api_backend__server__api__models__egp_models__UserMessage"
          }
        }
      },
      "ChatMessageV2": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__UserMessage"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__AssistantMessage"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__SystemMessage"
          }
        ],
        "title": "ChatMessageV2",
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "assistant": "#/components/schemas/egp_api_backend__server__internal__entities__AssistantMessage",
            "system": "#/components/schemas/egp_api_backend__server__internal__entities__SystemMessage",
            "user": "#/components/schemas/egp_api_backend__server__internal__entities__UserMessage"
          }
        }
      },
      "ChatThreadEntity": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "thread_metadata": {
            "title": "Thread Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "title",
          "application_variant_id",
          "account_id",
          "created_by_user_id",
          "created_at",
          "updated_at"
        ],
        "title": "ChatThreadEntity",
        "description": "Chat Thread represents the top-level information of an application chat conversation,\nallowing users to see previous conversations."
      },
      "ChatThreadFeedbackRequest": {
        "properties": {
          "chat_thread_id": {
            "type": "string",
            "title": "Chat Thread Id",
            "can_patch": false
          },
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "can_patch": false
          },
          "sentiment": {
            "$ref": "#/components/schemas/FeedbackSentiment"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "chat_thread_id",
          "application_interaction_id",
          "sentiment",
          "description"
        ],
        "title": "ChatThreadFeedbackRequest"
      },
      "ChatThreadFeedbackResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "chat_thread_id": {
            "type": "string",
            "title": "Chat Thread Id",
            "can_patch": false
          },
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "can_patch": false
          },
          "sentiment": {
            "$ref": "#/components/schemas/FeedbackSentiment"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "chat_thread_id",
          "application_interaction_id",
          "sentiment",
          "description",
          "created_at"
        ],
        "title": "ChatThreadFeedbackResponse"
      },
      "ChatThreadHistory": {
        "properties": {
          "thread": {
            "$ref": "#/components/schemas/ChatThreadResponse"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ApplicationInteractionWithFeedback"
            },
            "type": "array",
            "title": "Messages"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id",
            "description": "The ID of the application spec that the thread belongs to."
          }
        },
        "type": "object",
        "required": [
          "thread",
          "messages",
          "application_spec_id"
        ],
        "title": "ChatThreadHistory"
      },
      "ChatThreadRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "thread_metadata": {
            "title": "Thread Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "title",
          "application_variant_id",
          "account_id"
        ],
        "title": "ChatThreadRequest"
      },
      "ChatThreadResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "can_patch": false
          },
          "thread_metadata": {
            "title": "Thread Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "application_variant_id",
          "account_id",
          "created_by_user_id",
          "created_at",
          "updated_at"
        ],
        "title": "ChatThreadResponse"
      },
      "ChoiceDelta": {
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "function_call": {
            "$ref": "#/components/schemas/ChoiceDeltaFunctionCall"
          },
          "refusal": {
            "title": "Refusal",
            "type": "string"
          },
          "role": {
            "title": "Role",
            "type": "string",
            "enum": [
              "developer",
              "system",
              "user",
              "assistant",
              "tool"
            ]
          },
          "tool_calls": {
            "title": "Tool Calls",
            "items": {
              "$ref": "#/components/schemas/ChoiceDeltaToolCall"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ChoiceDelta"
      },
      "ChoiceDeltaFunctionCall": {
        "properties": {
          "arguments": {
            "title": "Arguments",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ChoiceDeltaFunctionCall"
      },
      "ChoiceDeltaToolCall": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/ChoiceDeltaToolCallFunction"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "index"
        ],
        "title": "ChoiceDeltaToolCall"
      },
      "ChoiceDeltaToolCallFunction": {
        "properties": {
          "arguments": {
            "title": "Arguments",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ChoiceDeltaToolCallFunction"
      },
      "ChunkData": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "ChunkData"
      },
      "ChunkExtraInfoSchema": {
        "properties": {
          "schema_type": {
            "type": "string",
            "enum": [
              "CHUNKS"
            ],
            "const": "CHUNKS",
            "title": "Schema Type",
            "default": "CHUNKS"
          },
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkData"
            },
            "type": "array",
            "title": "Chunks"
          }
        },
        "type": "object",
        "required": [
          "chunks"
        ],
        "title": "ChunkExtraInfoSchema"
      },
      "ChunkV2": {
        "properties": {
          "chunk_id": {
            "type": "string",
            "title": "Chunk Id",
            "description": "The unique ID of the chunk with embedding"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text associated with the chunk"
          },
          "embedding": {
            "title": "Embedding",
            "description": "The vector embedding of the text associated with the chunk",
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional key value pairs of information stored by you on the chunk with embedding",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "user_supplied_metadata": {
            "title": "User Supplied Metadata",
            "description": "Any additional key value pairs of information returned from the custom chunking.",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "attachment_url": {
            "title": "Attachment Url",
            "description": "Original attachment URL from which this chunk got its data from",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "description": "Title for this chunk, for example the file name",
            "type": "string"
          },
          "score": {
            "type": "number",
            "title": "Score",
            "description": "A number between 0 and 1 representing how similar a chunk's embedding is to the query embedding. Higher numbers mean that this chunk with embedding is more similar."
          }
        },
        "type": "object",
        "required": [
          "chunk_id",
          "text",
          "score"
        ],
        "title": "ChunkV2"
      },
      "ChunkV2WithoutScore": {
        "properties": {
          "chunk_id": {
            "type": "string",
            "title": "Chunk Id",
            "description": "The unique ID of the chunk with embedding"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text associated with the chunk"
          },
          "embedding": {
            "title": "Embedding",
            "description": "The vector embedding of the text associated with the chunk",
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Any additional key value pairs of information stored by you on the chunk with embedding",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "user_supplied_metadata": {
            "title": "User Supplied Metadata",
            "description": "Any additional key value pairs of information returned from the custom chunking.",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "attachment_url": {
            "title": "Attachment Url",
            "description": "Original attachment URL from which this chunk got its data from",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "description": "Title for this chunk, for example the file name",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "chunk_id",
          "text"
        ],
        "title": "ChunkV2WithoutScore"
      },
      "ChunkWithStatus": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the chunk"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the chunk as stored in the database"
          },
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "The id of the artifact"
          },
          "chunk_position": {
            "type": "integer",
            "title": "Chunk Position",
            "description": "Chunk position"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata of the chunk which is stored in OpenSearch",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "user_supplied_metadata": {
            "title": "User Supplied Metadata",
            "description": "Metadata of the chunk which is stored in the database only provided via custom chunking.",
            "default": {},
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ChunkUploadStatus",
            "description": "Status of the chunk. If Failed or Pending, its possible that the chunk does not reflect in OpenSearch"
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Status reason of the chunk. May be successful",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "description": "Date and time of chunk creation",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "id",
          "text",
          "artifact_id",
          "chunk_position",
          "status"
        ],
        "title": "ChunkWithStatus"
      },
      "Chunking": {
        "properties": {
          "chunk_mode": {
            "type": "string",
            "enum": [
              "variable",
              "section",
              "page",
              "block",
              "disabled",
              "page_sections"
            ],
            "title": "Chunk Mode"
          },
          "chunk_size": {
            "type": "integer",
            "title": "Chunk Size"
          }
        },
        "type": "object",
        "title": "Chunking"
      },
      "ChunkingStrategyConfig": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CharacterChunkingStrategyConfig"
          },
          {
            "$ref": "#/components/schemas/TokenChunkingStrategyConfig"
          },
          {
            "$ref": "#/components/schemas/CustomChunkingStrategyConfig"
          },
          {
            "$ref": "#/components/schemas/PreChunkedStrategyConfig"
          }
        ],
        "title": "ChunkingStrategyConfig",
        "discriminator": {
          "propertyName": "strategy",
          "mapping": {
            "character": "#/components/schemas/CharacterChunkingStrategyConfig",
            "custom": "#/components/schemas/CustomChunkingStrategyConfig",
            "pre_chunked": "#/components/schemas/PreChunkedStrategyConfig",
            "token": "#/components/schemas/TokenChunkingStrategyConfig"
          }
        }
      },
      "ChunksRankRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Natural language query to re-rank chunks against. If a vector store query was originally used to retrieve these chunks, please use the same query for this ranking"
          },
          "relevant_chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkV2"
            },
            "type": "array",
            "title": "Relevant Chunks",
            "description": "List of chunks to rank"
          },
          "rank_strategy": {
            "$ref": "#/components/schemas/RankStrategy",
            "description": "The ranking strategy to use.\n\nRank strategies determine how the ranking is done, They consist of the ranking method name and additional params needed to compute the ranking.\n\nUse the built-in `cross_encoder` or `rouge` strategies or create a custom one with the Models API."
          },
          "top_k": {
            "title": "Top K",
            "description": "Number of chunks to return. Must be greater than 0 if specified. If not specified, all chunks will be returned.",
            "type": "integer",
            "exclusiveMinimum": 0.0
          },
          "account_id": {
            "title": "Account Id",
            "description": "Account to rank chunks with. If you have access to more than one account, you must specify an account_id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "query",
          "relevant_chunks",
          "rank_strategy"
        ],
        "title": "ChunksRankRequest"
      },
      "ChunksRankResponse": {
        "properties": {
          "relevant_chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkV2"
            },
            "type": "array",
            "title": "Relevant Chunks",
            "description": "List of chunks ranked by the requested rank strategy"
          }
        },
        "type": "object",
        "required": [
          "relevant_chunks"
        ],
        "title": "ChunksRankResponse"
      },
      "ClaimTaskRequest": {
        "properties": {
          "skip_current": {
            "type": "boolean",
            "title": "Skip Current",
            "default": false
          }
        },
        "type": "object",
        "title": "ClaimTaskRequest"
      },
      "CompletionChoice": {
        "properties": {
          "finish_reason": {
            "type": "string",
            "enum": [
              "stop",
              "length",
              "content_filter"
            ],
            "title": "Finish Reason"
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "logprobs": {
            "$ref": "#/components/schemas/Logprobs"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "finish_reason",
          "index",
          "text"
        ],
        "title": "CompletionChoice"
      },
      "CompletionRequestV2": {
        "properties": {
          "model_request_parameters": {
            "$ref": "#/components/schemas/ParameterBindings"
          },
          "temperature": {
            "title": "Temperature",
            "description": "What sampling temperature to use, between [0, 2]. Higher values like 1.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Setting temperature=0.0 will enable fully deterministic (greedy) sampling.NOTE: The temperature parameter range for some model is limited to [0, 1] if the given value is above the available range, it defaults to the max value. Temperature is ignored for OpenAI reasoning models.",
            "default": 0.2,
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "stop_sequences": {
            "title": "Stop Sequences",
            "description": "List of up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 4
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. If not, specified, max_tokens will be determined based on the model used: \n| Model API family | Model API default | EGP applied default |\n| --- | --- | --- |\n| OpenAI Completions | [`16`](https://platform.openai.com/docs/api-reference/completions/create#max_tokens) | `context window - prompt size` |\n| OpenAI Chat Completions | [`context window - prompt size`](https://platform.openai.com/docs/api-reference/chat/create#max_tokens) | `context window - prompt size` |\n| LLM Engine | [`max_new_tokens`](https://github.com/scaleapi/launch-python-client/blob/207adced1c88c1c2907266fa9dd1f1ff3ec0ea5b/launch/client.py#L2910) parameter is required | `100` |\n| Anthropic Claude 2 | [`max_tokens_to_sample`](https://docs.anthropic.com/claude/reference/complete_post) parameter is required | `10000` |\n",
            "type": "integer"
          },
          "top_p": {
            "title": "Top P",
            "description": "The cumulative probability cutoff for token selection. Lower values mean sampling from a smaller, more top-weighted nucleus. Available for models provided by Google, LLM Engine, and OpenAI.",
            "type": "number"
          },
          "top_k": {
            "title": "Top K",
            "description": "Sample from the k most likely next tokens at each step. Lower k focuses on higher probability tokens. Available for models provided by Google and LLM Engine.",
            "type": "number"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Penalize tokens based on how much they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Penalize tokens based on if they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "stream": {
            "title": "Stream",
            "description": "Flag indicating whether to stream the completion response",
            "default": false,
            "type": "boolean"
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Whether to return logprobs. Currently only supported for llmengine chat models.",
            "type": "boolean"
          },
          "top_logprobs": {
            "title": "Top Logprobs",
            "description": "Number of top logprobs to return. Currently only supported for llmengine chat models.",
            "type": "integer"
          },
          "chat_template": {
            "title": "Chat Template",
            "description": "The chat template to use for the completion. Currently only supported for llmengine chat models.",
            "type": "string"
          },
          "chat_template_kwargs": {
            "title": "Chat Template Kwargs",
            "description": "Additional keyword arguments for the chat template. Currently only supported for llmengine chat models.",
            "type": "object",
            "additionalProperties": true
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "The reasoning effort to use for the completion. Currently only supported for openai models.",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "CompletionRequestV2"
      },
      "CompletionResponse": {
        "properties": {
          "finish_reason": {
            "title": "Finish Reason",
            "type": "string"
          },
          "prompt_tokens": {
            "title": "Prompt Tokens",
            "default": 0,
            "type": "integer"
          },
          "response_tokens": {
            "title": "Response Tokens",
            "default": 0,
            "type": "integer"
          },
          "completions": {
            "items": {
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              ],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Completions"
          },
          "choices": {
            "title": "Choices",
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__Choice"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "completions"
        ],
        "title": "CompletionResponse"
      },
      "CompletionTokensDetails": {
        "properties": {
          "accepted_prediction_tokens": {
            "title": "Accepted Prediction Tokens",
            "type": "integer"
          },
          "audio_tokens": {
            "title": "Audio Tokens",
            "type": "integer"
          },
          "reasoning_tokens": {
            "title": "Reasoning Tokens",
            "type": "integer"
          },
          "rejected_prediction_tokens": {
            "title": "Rejected Prediction Tokens",
            "type": "integer"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "CompletionTokensDetails"
      },
      "CompletionUsage": {
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens"
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens"
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens"
          },
          "completion_tokens_details": {
            "$ref": "#/components/schemas/CompletionTokensDetails"
          },
          "prompt_tokens_details": {
            "$ref": "#/components/schemas/PromptTokensDetails"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "completion_tokens",
          "prompt_tokens",
          "total_tokens"
        ],
        "title": "CompletionUsage"
      },
      "ConfigurationFieldValue": {
        "properties": {
          "value": {
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "value"
        ],
        "title": "ConfigurationFieldValue"
      },
      "ConfluenceDataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "Confluence"
            ],
            "const": "Confluence",
            "title": "Source"
          },
          "client_email": {
            "type": "string",
            "title": "Client Email",
            "description": "Client email to use for Confluence, set to override client email set in env vars."
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "API key to use for Confluence, set this to override api key configured in env vars."
          },
          "atlassian_domain": {
            "type": "string",
            "title": "Atlassian Domain",
            "description": "Your Confluence API server's full domain, set to override domain configured in env vars. E.g. 'https://[your-company].atlassian.net'"
          }
        },
        "type": "object",
        "required": [
          "source",
          "client_email",
          "api_key",
          "atlassian_domain"
        ],
        "title": "Confluence DataSource Auth Config"
      },
      "ConfluenceDataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "Confluence"
            ],
            "const": "Confluence",
            "title": "Source"
          },
          "space_key": {
            "type": "string",
            "title": "Space Key",
            "description": "Confluence space key to retrieve contents from. See https://support.atlassian.com/confluence-cloud/docs/choose-a-space-key"
          }
        },
        "type": "object",
        "required": [
          "source",
          "space_key"
        ],
        "title": "Confluence DataSource Config"
      },
      "ContributorMetricsResponse": {
        "properties": {
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id",
            "description": "The ID of the evaluation."
          },
          "annotated_by_user_id": {
            "type": "string",
            "title": "Annotated By User Id",
            "description": "The ID of the user who annotated the test case."
          },
          "total_time_spent_labeling_sec": {
            "title": "Total Time Spent Labeling Sec",
            "description": "Total time spent labeling in seconds.",
            "type": "integer"
          },
          "avg_time_spent_labeling_sec": {
            "title": "Avg Time Spent Labeling Sec",
            "description": "Average time spent labeling per test case in seconds.",
            "type": "number"
          },
          "total_num_test_cases_labeled": {
            "type": "integer",
            "title": "Total Num Test Cases Labeled",
            "description": "Total number of test cases labeled."
          },
          "num_test_cases_fixed": {
            "type": "integer",
            "title": "Num Test Cases Fixed",
            "description": "Number of test cases that were fixed."
          },
          "percentage_test_cases_fixed": {
            "type": "number",
            "title": "Percentage Test Cases Fixed",
            "description": "Percentage of test cases done by this contributor that were fixed."
          }
        },
        "type": "object",
        "required": [
          "evaluation_id",
          "annotated_by_user_id",
          "total_num_test_cases_labeled",
          "num_test_cases_fixed",
          "percentage_test_cases_fixed"
        ],
        "title": "ContributorMetricsResponse"
      },
      "CopyDeploymentPackageToControlPlaneHookRequest": {
        "properties": {
          "deployment_package_id": {
            "title": "Deployment Package Id",
            "type": "string"
          },
          "deployment_package_name": {
            "title": "Deployment Package Name",
            "type": "string"
          },
          "deployment_package_type": {
            "$ref": "#/components/schemas/DeploymentPackageType"
          },
          "version_constraint": {
            "$ref": "#/components/schemas/PackageVersionConstraint"
          },
          "workspace": {
            "type": "string",
            "title": "Workspace"
          }
        },
        "type": "object",
        "required": [
          "workspace"
        ],
        "title": "CopyDeploymentPackageToControlPlaneHookRequest"
      },
      "CopyDeploymentPackageToControlPlaneHookResponse": {
        "properties": {
          "package_id": {
            "type": "string",
            "title": "Package Id"
          },
          "package_name": {
            "type": "string",
            "title": "Package Name"
          },
          "result": {
            "$ref": "#/components/schemas/CopyToControlPlaneHookResult"
          },
          "error": {
            "title": "Error",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "package_id",
          "package_name"
        ],
        "title": "CopyDeploymentPackageToControlPlaneHookResponse"
      },
      "CopyToControlPlaneHookResult": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CopyToControlPlaneHookStatus"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "CopyToControlPlaneHookResult"
      },
      "CopyToControlPlaneHookStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILED",
          "SKIPPED",
          "NO_HOOK_DEFINED"
        ],
        "title": "CopyToControlPlaneHookStatus"
      },
      "CosineSimilarityScorerConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cosine_similarity"
            ],
            "const": "cosine_similarity",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "CosineSimilarityScorerConfigWithItemLocator"
      },
      "CreateAccountGeneralRoleMembershipRequest": {
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/AccessRoleIdentity",
            "description": "Identity to add to account"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGeneralRole",
            "description": "Role to assign identity to"
          }
        },
        "type": "object",
        "required": [
          "identity",
          "role"
        ],
        "title": "CreateAccountGeneralRoleMembershipRequest"
      },
      "CreateAccountGroupGeneralRoleMembershipRequest": {
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/AccessRoleIdentity",
            "description": "Identity to add to account group"
          },
          "role": {
            "$ref": "#/components/schemas/AccountGroupGeneralRole",
            "description": "Role to assign identity to"
          }
        },
        "type": "object",
        "required": [
          "identity",
          "role"
        ],
        "title": "CreateAccountGroupGeneralRoleMembershipRequest"
      },
      "CreateAccountGroupRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Account group name. Must be between 1 and 50 characters after stripping leading and trailing whitespace."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CreateAccountGroupRequest"
      },
      "CreateAccountRequest": {
        "properties": {
          "account_name": {
            "type": "string",
            "title": "Account Name",
            "description": "The name of the account. This will be displayed in the Scale GenAI Platform UI."
          }
        },
        "type": "object",
        "required": [
          "account_name"
        ],
        "title": "CreateAccountRequest"
      },
      "CreateAccountRequestV2": {
        "properties": {
          "account_group_id": {
            "type": "string",
            "title": "Account Group Id",
            "description": "ID of the account group the account lives under"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Account group name. Must be between 1 and 50 characters after stripping leading and trailing whitespace."
          }
        },
        "type": "object",
        "required": [
          "account_group_id",
          "name"
        ],
        "title": "CreateAccountRequestV2"
      },
      "CreateAccountResponse": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the created account."
          }
        },
        "type": "object",
        "required": [
          "account_id"
        ],
        "title": "CreateAccountResponse"
      },
      "CreateApplicationWithVariantRequest": {
        "properties": {
          "application_spec_name": {
            "type": "string",
            "title": "Application Spec Name"
          },
          "application_spec_description": {
            "type": "string",
            "title": "Application Spec Description"
          },
          "variant": {
            "$ref": "#/components/schemas/ApplicationVariantRequestWithoutSpecId"
          }
        },
        "type": "object",
        "required": [
          "application_spec_name",
          "application_spec_description",
          "variant"
        ],
        "title": "CreateApplicationWithVariantRequest"
      },
      "CreateBatchCompletionRequest": {
        "properties": {
          "vendor_configuration": {
            "$ref": "#/components/schemas/BatchCompletionsVendorConfiguration"
          },
          "account_id": {
            "title": "Account Id",
            "description": "The account ID to use for usage tracking. This will be gradually enforced.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "vendor_configuration"
        ],
        "title": "CreateBatchCompletionRequest"
      },
      "CreateBatchCompletionResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id"
          }
        },
        "type": "object",
        "required": [
          "job_id"
        ],
        "title": "CreateBatchCompletionResponse"
      },
      "CreateBatchCompletionsV1ModelConfig": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "ID of the model to use.",
            "examples": [
              "mixtral-8x7b-instruct"
            ]
          },
          "checkpoint_path": {
            "title": "Checkpoint Path",
            "description": "Path to the checkpoint to load the model from.",
            "type": "string"
          },
          "num_shards": {
            "title": "Num Shards",
            "description": "\nSuggested number of shards to distribute the model. When not specified, will infer the number of shards based on model config.\nSystem may decide to use a different number than the given value.\n",
            "default": 1,
            "type": "integer",
            "minimum": 1.0
          },
          "max_context_length": {
            "title": "Max Context Length",
            "description": "Maximum context length to use for the model. Defaults to the max allowed by the model",
            "type": "integer",
            "minimum": 1.0
          },
          "seed": {
            "title": "Seed",
            "description": "Random seed for the model.",
            "type": "integer"
          },
          "response_role": {
            "title": "Response Role",
            "description": "Role of the response in the conversation. Only supported in chat completions.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Labels",
            "description": "Labels to attach to the batch inference job.",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "model"
        ],
        "title": "CreateBatchCompletionsV1ModelConfig"
      },
      "CreateBatchCompletionsV1RequestContent": {
        "properties": {
          "prompts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Prompts"
          },
          "max_new_tokens": {
            "type": "integer",
            "title": "Max New Tokens"
          },
          "temperature": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Temperature"
          },
          "stop_sequences": {
            "title": "Stop Sequences",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "return_token_log_probs": {
            "title": "Return Token Log Probs",
            "default": false,
            "type": "boolean"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "top_k": {
            "title": "Top K",
            "type": "integer",
            "minimum": -1.0
          },
          "top_p": {
            "title": "Top P",
            "type": "number",
            "maximum": 1.0,
            "exclusiveMinimum": 0.0
          },
          "skip_special_tokens": {
            "title": "Skip Special Tokens",
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "prompts",
          "max_new_tokens",
          "temperature"
        ],
        "title": "CreateBatchCompletionsV1RequestContent"
      },
      "CreateChatCompletionRequest": {
        "properties": {
          "account_id": {
            "title": "Account Id",
            "description": "The account ID to use for usage tracking. This will be gradually enforced.",
            "type": "string"
          },
          "model": {
            "type": "string",
            "enum": [
              "o1",
              "o1-mini",
              "o3-mini",
              "gpt-4",
              "gpt-4-0613",
              "gpt-4-32k",
              "gpt-4-32k-0613",
              "gpt-4o",
              "gpt-4o-mini",
              "gpt-4o-2024-08-06",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0613",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-16k-0613",
              "gemini-pro",
              "gemini-1.5-pro-001",
              "gemini-1.5-pro-002",
              "gemini-1.5-pro-preview-0409",
              "gemini-1.5-pro-preview-0514",
              "llama-2-7b-chat",
              "llama-2-13b-chat",
              "llama-2-70b-chat",
              "llama-3-8b-instruct",
              "llama-3-70b-instruct",
              "llama-3-1-8b-instruct",
              "llama-3-1-70b-instruct",
              "llama-3-2-1b-instruct",
              "llama-3-2-3b-instruct",
              "llama-3-3-70b-instruct",
              "Meta-Llama-3-8B-Instruct-RMU",
              "Meta-Llama-3-8B-Instruct-RR",
              "Meta-Llama-3-8B-Instruct-DERTA",
              "Meta-Llama-3-8B-Instruct-LAT",
              "mixtral-8x7b-instruct",
              "mixtral-8x22b-instruct",
              "claude-3-opus-20240229",
              "claude-3-sonnet-20240229",
              "claude-3-haiku-20240307",
              "claude-3-5-sonnet-20240620",
              "claude-3-5-sonnet-20241022",
              "mistral-large-latest",
              "phi-3-mini-4k-instruct",
              "phi-3-cat-merged",
              "zephyr-cat-merged",
              "dolphin-2.9-llama3-8b",
              "dolphin-2.9-llama3-70b",
              "defense-llama-3-8b-instruct",
              "donovan-combat-llama",
              "llama3-1-405b-instruct-v1"
            ],
            "title": "Model",
            "description": "The ID of the model to use for chat completions. We only support the models listed here so far."
          },
          "memory_strategy": {
            "description": "The memory strategy to use for the agent. A memory strategy is a way to prevent the underlying LLM's context limit from being exceeded. Each memory strategy uses a different technique to condense the input message list into a smaller payload for the underlying LLM.\n\nWe only support the Last K memory strategy right now, but will be adding new strategies soon.",
            "$ref": "#/components/schemas/MemoryStrategy"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The list of messages in the conversation.\n\nExpand each message type to see how it works and when to use it. Most conversations should begin with a single `user` message."
          },
          "model_parameters": {
            "description": "Configuration parameters for the chat completion model, such as temperature, max_tokens, and stop_sequences.\n\nIf not specified, the default value are:\n- temperature: 0.2\n- max_tokens: None (limited by the model's max tokens)\n- stop_sequences: None",
            "default": {
              "temperature": 0.2
            },
            "$ref": "#/components/schemas/ModelParameters"
          },
          "instructions": {
            "title": "Instructions",
            "description": "The initial instructions to provide to the chat completion model.\n\nUse this to guide the model to act in more specific ways. For example, if you have specific rules you want to restrict the model to follow you can specify them here.\n\nGood prompt engineering is crucial to getting performant results from the model. If you are having trouble getting the model to perform well, try writing more specific instructions here before trying more expensive techniques such as swapping in other models or finetuning the underlying LLM.",
            "default": "You are an AI assistant that helps users with their questions by chatting back and forth with them. When asked a question, you should answer it as best as you can with the information you have. If you need more information, you can ask the user for it.",
            "type": "string"
          },
          "chat_template": {
            "title": "Chat Template",
            "description": "Currently only supported for LLM-Engine models. A Jinja template string that defines how the chat completion API formats the string prompt. For Llama models, the template must take in at most a `messages` object, `bos_token` string, and `eos_token` string. The `messages` object is a list of dictionaries, each with keys `role` and `content`. For Mixtral models, the template must take in at most a `messages` object and `eos_token` string. The `messages` object looks identical to the Llama model's `messages` object, but the template can assume the `role` key takes on the values `user` or `assistant`, or `system` for the first message. The chat template either needs to handle this system message (which gets set via the `instructions` field or by the messages), or the `instructions` field must be set to `null` and the `messages` object must not contain any system messages.See the default chat template present in the Llama and Mixtral tokenizers for examples.",
            "type": "string"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "Whether or not to stream the response.\n\nSetting this to True will stream the completion in real-time.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "CreateChatCompletionRequest"
      },
      "CreateChatCompletionResponse": {
        "properties": {
          "chat_completion": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ChatCompletion"
          },
          "token_usage": {
            "$ref": "#/components/schemas/TokenUsage"
          }
        },
        "type": "object",
        "required": [
          "chat_completion"
        ],
        "title": "CreateChatCompletionResponse"
      },
      "CreateCompletionRequest": {
        "properties": {
          "account_id": {
            "title": "Account Id",
            "description": "The account ID to use for usage tracking. This will be gradually enforced.",
            "type": "string"
          },
          "model": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "gpt-4",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0613",
                  "gpt-4-vision-preview",
                  "gpt-4o",
                  "gpt-4o-mini",
                  "gpt-4o-2024-08-06",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-16k-0613",
                  "gemini-pro",
                  "gemini-1.5-pro-001",
                  "gemini-1.5-pro-002",
                  "gemini-1.5-pro-preview-0409",
                  "gemini-1.5-pro-preview-0514",
                  "text-davinci-003",
                  "text-davinci-002",
                  "text-curie-001",
                  "text-babbage-001",
                  "text-ada-001",
                  "claude-instant-1",
                  "claude-instant-1.1",
                  "claude-2",
                  "claude-2.0",
                  "llama-7b",
                  "llama-2-7b",
                  "llama-2-7b-chat",
                  "llama-2-13b",
                  "llama-2-13b-chat",
                  "llama-2-70b",
                  "llama-2-70b-chat",
                  "llama-3-8b",
                  "llama-3-8b-instruct",
                  "llama-3-1-8b-instruct",
                  "llama-3-1-70b-instruct",
                  "llama-3-70b-instruct",
                  "llama-3-2-1b-instruct",
                  "llama-3-2-3b-instruct",
                  "llama-3-3-70b-instruct",
                  "Meta-Llama-3-8B-Instruct-RMU",
                  "Meta-Llama-3-8B-Instruct-RR",
                  "Meta-Llama-3-8B-Instruct-DERTA",
                  "Meta-Llama-3-8B-Instruct-LAT",
                  "falcon-7b",
                  "falcon-7b-instruct",
                  "falcon-40b",
                  "falcon-40b-instruct",
                  "mpt-7b",
                  "mpt-7b-instruct",
                  "flan-t5-xxl",
                  "mistral-7b",
                  "mistral-7b-instruct",
                  "mixtral-8x7b",
                  "mixtral-8x7b-instruct",
                  "mixtral-8x22b-instruct",
                  "llm-jp-13b-instruct-full",
                  "llm-jp-13b-instruct-full-dolly",
                  "zephyr-7b-alpha",
                  "zephyr-7b-beta",
                  "zephyr-cat-merged",
                  "codellama-7b",
                  "codellama-7b-instruct",
                  "codellama-13b",
                  "codellama-13b-instruct",
                  "codellama-34b",
                  "codellama-34b-instruct",
                  "phi-3-mini-4k-instruct",
                  "phi-3-cat-merged",
                  "dolphin-2.9-llama3-8b",
                  "dolphin-2.9-llama3-70b",
                  "defense-llama-3-8b-instruct",
                  "donovan-combat-llama"
                ]
              },
              {
                "type": "string"
              }
            ],
            "title": "Model",
            "description": "The ID of the model to use for completions.\n\nUsers have two options:\n- Option 1: Use one of the supported models from the dropdown.\n- Option 2: Enter the ID of a custom model.\n\nNote: For custom models we currently only support models finetuned using using the Scale-hosted LLM-Engine API."
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "Prompt for which to generate the completion.\n\nGood prompt engineering is crucial to getting performant results from the model. If you are having trouble getting the model to perform well, try writing a more specific prompt here before trying more expensive techniques such as swapping in other models or finetuning the underlying LLM."
          },
          "images": {
            "title": "Images",
            "description": "List of image urls to be used for image based completions. Leave empty for text based completions.",
            "items": {
              "$ref": "#/components/schemas/ImageCompletionRequests"
            },
            "type": "array"
          },
          "model_parameters": {
            "description": "Configuration parameters for the completion model, such as temperature, max_tokens, and stop_sequences.\n\nIf not specified, the default value are:\n- temperature: 0.2\n- max_tokens: None (limited by the model's max tokens)\n- stop_sequences: None",
            "default": {
              "temperature": 0.2
            },
            "$ref": "#/components/schemas/ModelParameters"
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "Whether or not to stream the response.\n\nSetting this to True will stream the completion in real-time.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "title": "CreateCompletionRequest"
      },
      "CreateCompletionResponse": {
        "properties": {
          "completion": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__Completion",
            "description": "The actual completion text and the finish reason."
          },
          "token_usage": {
            "description": "Token usage numbers. If streaming, this field is null until the stream completes, at which point it will be populated (if supported).",
            "$ref": "#/components/schemas/TokenUsage"
          }
        },
        "type": "object",
        "required": [
          "completion"
        ],
        "title": "CreateCompletionResponse"
      },
      "CreateEvaluationDatasetGenerationJobRequest": {
        "properties": {
          "num_test_cases": {
            "title": "Num Test Cases",
            "description": "Number of test cases to generate for the evaluation dataset",
            "type": "integer"
          },
          "group_by_artifact_id": {
            "title": "Group By Artifact Id",
            "description": "If this flag is true, for every generated test case, the chunks used to generate it will be guaranteed to be from the same document (artifact).",
            "default": false,
            "type": "boolean"
          },
          "harms_list": {
            "title": "Harms List",
            "description": "List of harms to be used for the evaluation dataset generation. If not provided, generation will use the knowledge base id.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "advanced_config": {
            "title": "Advanced Config",
            "description": "Advanced configuration for the evaluation dataset generation job.",
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object"
          },
          "custom_instructions": {
            "title": "Custom Instructions",
            "description": "Custom instructions for test case generation",
            "type": "string"
          }
        },
        "type": "object",
        "title": "CreateEvaluationDatasetGenerationJobRequest"
      },
      "CreateEvaluationDatasetGenerationJobResponse": {
        "properties": {
          "generation_job_id": {
            "type": "string",
            "title": "Generation Job Id",
            "description": "ID of the async job associated with this evaluation dataset generation"
          },
          "status": {
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum",
            "description": "Status of the async job"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The timestamp at which the upload job started."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The timestamp at which the upload job was last updated."
          },
          "num_test_cases": {
            "title": "Num Test Cases",
            "description": "Optional number of test cases input to the job",
            "type": "integer"
          },
          "num_completed_test_cases": {
            "title": "Num Completed Test Cases",
            "description": "Number of test cases that have been generated",
            "type": "integer"
          },
          "total_chunk_count": {
            "title": "Total Chunk Count",
            "description": "Number of chunks in the knowledge base",
            "type": "integer"
          },
          "failure_reason": {
            "title": "Failure Reason",
            "description": "Reason for the job's failure, if applicable",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "generation_job_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "CreateEvaluationDatasetGenerationJobResponse"
      },
      "CreateEvaluationDatasetRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ManualEvaluationDatasetRequest"
          },
          {
            "$ref": "#/components/schemas/AutoGeneratedEvaluationDatasetRequest"
          },
          {
            "$ref": "#/components/schemas/SafetyEvaluationDatasetRequest"
          }
        ],
        "title": "CreateEvaluationDatasetRequest",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "autogenerated": "#/components/schemas/AutoGeneratedEvaluationDatasetRequest",
            "manual": "#/components/schemas/ManualEvaluationDatasetRequest",
            "safety": "#/components/schemas/SafetyEvaluationDatasetRequest"
          }
        }
      },
      "CreateGuardrailsWithPoliciesRequest": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description"
          },
          "check_type": {
            "$ref": "#/components/schemas/GuardrailCheckType"
          },
          "guardrail_metadata": {
            "title": "Guardrail Metadata",
            "description": "Guardrail metadata",
            "type": "object",
            "additionalProperties": true
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/GuardrailPolicyRequest"
            },
            "type": "array",
            "title": "Policies"
          }
        },
        "type": "object",
        "required": [
          "description",
          "check_type",
          "policies"
        ],
        "title": "CreateGuardrailsWithPoliciesRequest"
      },
      "CreateKnowledgeBaseRequestV2": {
        "properties": {
          "embedding_config": {
            "$ref": "#/components/schemas/EmbeddingConfig",
            "description": "The configuration of the embedding"
          },
          "account_id": {
            "title": "Account Id",
            "description": "Account to create knowledge base in. If you have access to more than one account, you must specify an account_id",
            "type": "string"
          },
          "knowledge_base_name": {
            "type": "string",
            "title": "Knowledge Base Name",
            "description": "A unique name for the knowledge base"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata associated with the knowledge base",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "embedding_config",
          "knowledge_base_name"
        ],
        "title": "CreateKnowledgeBaseRequestV2"
      },
      "CreateKnowledgeBaseResponse": {
        "properties": {
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "description": "The unique ID of the created knowledge base"
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_id"
        ],
        "title": "CreateKnowledgeBaseResponse"
      },
      "CreateKnowledgeBaseV2UploadFromDataSourceIdRequest": {
        "properties": {
          "data_source_id": {
            "type": "string",
            "title": "Data Source Id",
            "description": "Id of the data source to fetch."
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig",
            "description": "Configuration for the chunking strategy which describes how to chunk the data."
          },
          "force_reupload": {
            "title": "Force Reupload",
            "description": "Force reingest, regardless the change of the source file.",
            "default": false,
            "type": "boolean"
          },
          "tagging_information": {
            "description": "A dictionary of tags to apply to all artifacts added from the data source.",
            "$ref": "#/components/schemas/TaggingInformation"
          }
        },
        "type": "object",
        "required": [
          "data_source_id",
          "chunking_strategy_config"
        ],
        "title": "DataSource Upload Request"
      },
      "CreateKnowledgeBaseV2UploadFromDataSourceRequest": {
        "properties": {
          "data_source_config": {
            "$ref": "#/components/schemas/RemoteDataSourceConfig",
            "description": "Configuration for the data source which describes where to find the data."
          },
          "data_source_auth_config": {
            "description": "Configuration for the data source which describes how to authenticate to the data source.",
            "$ref": "#/components/schemas/DataSourceAuthConfig"
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig",
            "description": "Configuration for the chunking strategy which describes how to chunk the data."
          },
          "force_reupload": {
            "title": "Force Reupload",
            "description": "Force reingest, regardless the change of the source file.",
            "default": false,
            "type": "boolean"
          },
          "tagging_information": {
            "description": "A dictionary of tags to apply to all artifacts added from the data source.",
            "$ref": "#/components/schemas/TaggingInformation"
          }
        },
        "type": "object",
        "required": [
          "data_source_config"
        ],
        "title": "DataSource Upload Request"
      },
      "CreateKnowledgeBaseV2UploadFromLocalChunksRequest": {
        "properties": {
          "data_source_config": {
            "$ref": "#/components/schemas/LocalChunksSourceConfig",
            "description": "Configuration for the data source which describes where to find the data."
          },
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ArtifactChunkUpload"
            },
            "type": "array",
            "title": "Chunks",
            "description": "List of chunks."
          },
          "force_reupload": {
            "title": "Force Reupload",
            "description": "Force reingest, regardless the change of the source file.",
            "default": false,
            "type": "boolean"
          },
          "tagging_information": {
            "description": "A dictionary of tags to apply to all artifacts added from the data source.",
            "$ref": "#/components/schemas/TaggingInformation"
          }
        },
        "type": "object",
        "required": [
          "data_source_config"
        ],
        "title": "Local Chunks Upload Request"
      },
      "CreateKnowledgeBaseV2UploadRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadFromDataSourceRequest"
          },
          {
            "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadFromLocalChunksRequest"
          },
          {
            "$ref": "#/components/schemas/CreateKnowledgeBaseV2UploadFromDataSourceIdRequest"
          }
        ],
        "title": "CreateKnowledgeBaseV2UploadRequest"
      },
      "CreateKnowledgeBaseV2UploadResponse": {
        "properties": {
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "ID of the created knowledge base upload job."
          }
        },
        "type": "object",
        "required": [
          "upload_id"
        ],
        "title": "CreateKnowledgeBaseV2UploadResponse"
      },
      "CreateKnowledgeBaseV2UploadsFromFilesResponse": {
        "properties": {
          "upload_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Upload Ids",
            "description": "List of upload IDs that have been kicked off by the upload API"
          }
        },
        "type": "object",
        "required": [
          "upload_ids"
        ],
        "title": "CreateKnowledgeBaseV2UploadsFromFilesResponse"
      },
      "CreateModelEndpointConfig": {
        "properties": {
          "cpus": {
            "type": "integer",
            "title": "Cpus",
            "default": 3
          },
          "memory": {
            "type": "string",
            "title": "Memory",
            "default": "8Gi"
          },
          "storage": {
            "type": "string",
            "title": "Storage",
            "default": "16Gi"
          },
          "gpus": {
            "type": "integer",
            "title": "Gpus",
            "default": 0
          },
          "gpu_type": {
            "$ref": "#/components/schemas/GPUType"
          },
          "min_workers": {
            "type": "integer",
            "title": "Min Workers",
            "default": 0
          },
          "max_workers": {
            "type": "integer",
            "title": "Max Workers",
            "default": 1
          },
          "per_worker": {
            "type": "integer",
            "title": "Per Worker",
            "description": "The maximum number of concurrent requests that an individual worker can\nservice. Launch automatically scales the number of workers for the endpoint so that\neach worker is processing ``per_worker`` requests, subject to the limits defined by\n``min_workers`` and ``max_workers``.\n\n- If the average number of concurrent requests per worker is lower than\n``per_worker``, then the number of workers will be reduced. - Otherwise,\nif the average number of concurrent requests per worker is higher than\n``per_worker``, then the number of workers will be increased to meet the elevated\ntraffic.\n\nHere is our recommendation for computing ``per_worker``:\n\n1. Compute ``min_workers`` and ``max_workers`` per your minimum and maximum\nthroughput requirements. 2. Determine a value for the maximum number of\nconcurrent requests in the workload. Divide this number by ``max_workers``. Doing\nthis ensures that the number of workers will \"climb\" to ``max_workers``.",
            "default": 10
          },
          "endpoint_type": {
            "$ref": "#/components/schemas/ModelEndpointType",
            "default": "ASYNC"
          },
          "high_priority": {
            "title": "High Priority",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "title": "CreateModelEndpointConfig"
      },
      "CreateModelServerRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_deployment_id": {
            "type": "string",
            "title": "Model Deployment Id"
          },
          "alias": {
            "title": "Alias",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_deployment_id"
        ],
        "title": "CreateModelServerRequest",
        "description": "Create a new model server with an initial backend configuration.\n\nArgs:\n    name (str): The name of the model server. Only used for display purposes.\n    model_deployment_id (str): The ID of the model deployment to use as the initial backend.\n    alias (str, optional): An alias for the model server. Defaults to None. If configured the model\n        server can be accessed via the alias instead of the model server ID. i.e /models/server/alias/{alias}/execute"
      },
      "CrossEncoderRankParams": {
        "properties": {
          "cross_encoder_model": {
            "type": "string",
            "enum": [
              "cross-encoder/ms-marco-MiniLM-L-12-v2",
              "cross-encoder/mmarco-mMiniLMv2-L12-H384-v1"
            ],
            "title": "Cross Encoder Model",
            "description": "Cross encoder model to use when ranking. Currently supports [cross-encoder/ms-marco-MiniLM-L-12-v2](https://huggingface.co/cross-encoder/ms-marco-MiniLM-L-12-v2) and [cross-encoder/mmarco-mMiniLMv2-L12-H384-v1](https://huggingface.co/cross-encoder/mmarco-mMiniLMv2-L12-H384-v1).",
            "default": "cross-encoder/ms-marco-MiniLM-L-12-v2"
          }
        },
        "type": "object",
        "title": "CrossEncoderRankParams"
      },
      "CrossEncoderRankStrategy": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "cross_encoder"
            ],
            "const": "cross_encoder",
            "title": "Method",
            "description": "The name of the rank strategy. Must be `cross_encoder`.",
            "default": "cross_encoder"
          },
          "params": {
            "$ref": "#/components/schemas/CrossEncoderRankParams",
            "description": "The parameters needed for ranking.",
            "default": {
              "cross_encoder_model": "cross-encoder/ms-marco-MiniLM-L-12-v2"
            }
          }
        },
        "type": "object",
        "title": "CrossEncoderRankStrategy"
      },
      "CustomChunkingStrategyConfig": {
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "custom"
            ],
            "const": "custom",
            "title": "Strategy"
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint",
            "description": "Endpoint path to call for custom chunking"
          },
          "params": {
            "title": "Params",
            "description": "Parameters that will be appended to the body of the request for the chunk.",
            "default": {},
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "strategy",
          "endpoint"
        ],
        "title": "CustomChunkingStrategyConfig"
      },
      "Dashboard": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "visualizations": {
            "items": {
              "$ref": "#/components/schemas/VisualizationDescriptor"
            },
            "type": "array",
            "title": "Visualizations"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "visualizations"
        ],
        "title": "Dashboard"
      },
      "DashboardID": {
        "type": "string",
        "enum": [
          "top_level_dashboard",
          "engagements_dashboard",
          "executions_dashboard",
          "guardrails_dashboard",
          "variant_overview_dashboard"
        ],
        "title": "DashboardID"
      },
      "DataLoc": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "title": "DataLoc"
      },
      "DataLocWithCount": {
        "properties": {
          "data_loc": {
            "$ref": "#/components/schemas/DataLoc"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          }
        },
        "type": "object",
        "required": [
          "data_loc",
          "count"
        ],
        "title": "DataLocWithCount"
      },
      "DataPoint": {
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date",
            "description": "The start date of the data point"
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens",
            "description": "The number of prompt tokens used"
          },
          "response_tokens": {
            "type": "integer",
            "title": "Response Tokens",
            "description": "The number of response tokens used"
          },
          "summary_tokens": {
            "type": "integer",
            "title": "Summary Tokens",
            "description": "The number of all the tokens used"
          }
        },
        "type": "object",
        "required": [
          "date",
          "prompt_tokens",
          "response_tokens",
          "summary_tokens"
        ],
        "title": "DataPoint"
      },
      "DataSource": {
        "type": "string",
        "enum": [
          "S3",
          "SharePoint",
          "LocalFile",
          "LocalChunks",
          "GoogleDrive",
          "AzureBlobStorage",
          "Confluence",
          "Slack"
        ],
        "title": "DataSource"
      },
      "DataSourceAuthConfig": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SharePointDataSourceAuthConfig"
          },
          {
            "$ref": "#/components/schemas/AzureBlobStorageDataSourceAuthConfig"
          },
          {
            "$ref": "#/components/schemas/GoogleDriveDataSourceAuthConfig"
          },
          {
            "$ref": "#/components/schemas/S3DataSourceAuthConfig"
          },
          {
            "$ref": "#/components/schemas/ConfluenceDataSourceAuthConfig"
          },
          {
            "$ref": "#/components/schemas/SlackDataSourceAuthConfig"
          }
        ],
        "title": "DataSourceAuthConfig",
        "discriminator": {
          "propertyName": "source",
          "mapping": {
            "AzureBlobStorage": "#/components/schemas/AzureBlobStorageDataSourceAuthConfig",
            "Confluence": "#/components/schemas/ConfluenceDataSourceAuthConfig",
            "GoogleDrive": "#/components/schemas/GoogleDriveDataSourceAuthConfig",
            "S3": "#/components/schemas/S3DataSourceAuthConfig",
            "SharePoint": "#/components/schemas/SharePointDataSourceAuthConfig",
            "Slack": "#/components/schemas/SlackDataSourceAuthConfig"
          }
        }
      },
      "DataSourceConfig": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/S3DataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/SharePointDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/GoogleDriveDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/AzureBlobStorageDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/LocalChunksSourceConfig"
          },
          {
            "$ref": "#/components/schemas/LocalFileSourceConfig"
          },
          {
            "$ref": "#/components/schemas/ConfluenceDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/SlackDataSourceConfig"
          }
        ],
        "title": "DataSourceConfig",
        "discriminator": {
          "propertyName": "source",
          "mapping": {
            "AzureBlobStorage": "#/components/schemas/AzureBlobStorageDataSourceConfig",
            "Confluence": "#/components/schemas/ConfluenceDataSourceConfig",
            "GoogleDrive": "#/components/schemas/GoogleDriveDataSourceConfig",
            "LocalChunks": "#/components/schemas/LocalChunksSourceConfig",
            "LocalFile": "#/components/schemas/LocalFileSourceConfig",
            "S3": "#/components/schemas/S3DataSourceConfig",
            "SharePoint": "#/components/schemas/SharePointDataSourceConfig",
            "Slack": "#/components/schemas/SlackDataSourceConfig"
          }
        }
      },
      "Dataset": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "dataset"
            ],
            "const": "dataset",
            "title": "Object",
            "default": "dataset"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "archived_at": {
            "title": "Archived At",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "current_version_num": {
            "type": "integer",
            "title": "Current Version Num"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "created_by_user_id",
          "tags",
          "current_version_num"
        ]
      },
      "DatasetCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "data": {
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "Items to be included in the dataset"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data"
        ],
        "title": "DatasetCreateRequest"
      },
      "DatasetFromEvaluationCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keys": {
            "title": "Keys",
            "description": "Keys from items in the `data` field that should be included in the dataset. If not provided, all keys will be included.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DatasetFromEvaluationCreateRequest"
      },
      "DatasetItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "dataset.item"
            ],
            "const": "dataset.item",
            "title": "Object",
            "default": "dataset.item"
          },
          "dataset_id": {
            "title": "Dataset Id",
            "type": "string"
          },
          "data": {
            "title": "Data"
          },
          "content_hash": {
            "type": "string",
            "title": "Content Hash"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "archived_at": {
            "title": "Archived At",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "data",
          "content_hash",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "DatasetItemBatchCreateRequest": {
        "properties": {
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id",
            "description": "Identifier of the target dataset"
          },
          "data": {
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "Items to be added to the dataset"
          }
        },
        "type": "object",
        "required": [
          "dataset_id",
          "data"
        ],
        "title": "DatasetItemBatchCreateRequest"
      },
      "DatasetItemReference": {
        "properties": {
          "dataset_item_id": {
            "type": "string",
            "title": "Dataset Item Id"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "dataset_item_id"
        ],
        "title": "DatasetItemReference"
      },
      "DatasetItemUpdateRequest": {
        "properties": {
          "data": {
            "type": "object",
            "title": "Data",
            "description": "Updated dataset item data",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "DatasetItemUpdateRequest"
      },
      "DatasetUpdateRequest": {
        "$ref": "#/components/schemas/PartialDatasetRequestBase",
        "title": "DatasetUpdateRequest"
      },
      "DatasetUploadAttestationRequest": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "attestation_type": {
            "type": "string",
            "enum": [
              "dataset_upload"
            ],
            "const": "dataset_upload",
            "title": "Attestation Type"
          },
          "evaluation_dataset_name": {
            "type": "string",
            "title": "Evaluation Dataset Name"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "attestation_type",
          "evaluation_dataset_name"
        ],
        "title": "DatasetUploadAttestationRequest"
      },
      "DeduplicationStrategy": {
        "type": "string",
        "enum": [
          "Overwrite",
          "Fail"
        ],
        "title": "DeduplicationStrategy"
      },
      "DefaultEvaluationRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "metric_config": {
            "description": "Specifies the config for the metrics to be computed.",
            "can_patch": false,
            "$ref": "#/components/schemas/MetricConfig"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "annotation_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationConfigRequestBase"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigGenerationRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigMultiturnUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigSummarizationUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigTranslationUseCaseRequest"
              }
            ],
            "title": "Annotation Config",
            "description": "Annotation configuration for tasking"
          },
          "type": {
            "type": "string",
            "enum": [
              "default"
            ],
            "const": "default",
            "title": "Type",
            "description": "create standalone evaluation or build evaluation which will auto generate test case results",
            "default": "default"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "application_spec_id",
          "account_id"
        ],
        "title": "DefaultEvaluationRequest"
      },
      "DefaultModelPatchRequest": {
        "properties": {
          "model_metadata": {
            "title": "Model Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "DefaultModelPatchRequest"
      },
      "DeleteChunkFromLocalArtifactResponse": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether or not the artifact was successfully deleted"
          },
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "The ID of the artifact from which the chunk was deleted"
          },
          "chunk_id": {
            "type": "string",
            "title": "Chunk Id",
            "description": "The ID of the chunk that was deleted"
          }
        },
        "type": "object",
        "required": [
          "deleted",
          "artifact_id",
          "chunk_id"
        ],
        "title": "DeleteChunkFromLocalArtifactResponse"
      },
      "DeleteEvaluationDatasetDraftResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether or not the draft evaluation dataset version was successfully deleted"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "DeleteEvaluationDatasetDraftResponse"
      },
      "DeleteKnowledgeBaseDataSourceConnectionResponse": {
        "properties": {
          "artifacts_to_delete": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Artifacts To Delete"
          },
          "deletion_workflow_id": {
            "title": "Deletion Workflow Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "artifacts_to_delete"
        ],
        "title": "DeleteKnowledgeBaseDataSourceConnectionResponse"
      },
      "DeleteKnowledgeBaseResponseV2": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether or not the knowledge base was successfully deleted"
          },
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "description": "The ID of the knowledge base that was deleted"
          }
        },
        "type": "object",
        "required": [
          "deleted",
          "knowledge_base_id"
        ],
        "title": "DeleteKnowledgeBaseResponseV2"
      },
      "DeleteKnowledgeBaseV2LocalArtifactResponse": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether or not the artifact was successfully deleted"
          },
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "The ID of the artifact that was deleted"
          }
        },
        "type": "object",
        "required": [
          "deleted",
          "artifact_id"
        ],
        "title": "DeleteKnowledgeBaseV2LocalArtifactResponse"
      },
      "DeleteModelResponseV2": {
        "properties": {
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether or not the model base was successfully deleted"
          },
          "model_id": {
            "type": "string",
            "title": "Model Id",
            "description": "The ID of the model that was deleted"
          }
        },
        "type": "object",
        "required": [
          "deleted",
          "model_id"
        ],
        "title": "DeleteModelResponseV2"
      },
      "DeleteResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          }
        },
        "type": "object",
        "required": [
          "success",
          "count"
        ],
        "title": "DeleteResponse"
      },
      "ApplicationVariantDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "application_variant"
            ],
            "const": "application_variant",
            "title": "Object",
            "default": "application_variant"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "ApplicationVariantDelete"
      },
      "ApplicationDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "application"
            ],
            "const": "application",
            "title": "Object",
            "default": "application"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "ApplicationDelete"
      },
      "DatasetItemDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "dataset.item"
            ],
            "const": "dataset.item",
            "title": "Object",
            "default": "dataset.item"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DatasetItemDelete"
      },
      "DatasetDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "dataset"
            ],
            "const": "dataset",
            "title": "Object",
            "default": "dataset"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DatasetDelete"
      },
      "EvaluationDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "evaluation"
            ],
            "const": "evaluation",
            "title": "Object",
            "default": "evaluation"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "EvaluationDelete"
      },
      "FileDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "file"
            ],
            "const": "file",
            "title": "Object",
            "default": "file"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "FileDelete"
      },
      "InferenceModelDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "model"
            ],
            "const": "model",
            "title": "Object",
            "default": "model"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "InferenceModelDelete"
      },
      "KnowledgeBaseDataSourceDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "knowledge_base_data_source"
            ],
            "const": "knowledge_base_data_source",
            "title": "Object",
            "default": "knowledge_base_data_source"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "KnowledgeBaseDataSourceDelete"
      },
      "QuestionSetDelete": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "question_set"
            ],
            "const": "question_set",
            "title": "Object",
            "default": "question_set"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted"
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "QuestionSetDelete"
      },
      "DeployedApplication": {
        "properties": {
          "application_spec": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationSpecResponse"
          },
          "application_variant": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
          },
          "application_deployment": {
            "$ref": "#/components/schemas/ApplicationDeploymentResponse"
          }
        },
        "type": "object",
        "required": [
          "application_spec",
          "application_variant",
          "application_deployment"
        ],
        "title": "DeployedApplication"
      },
      "DeploymentJobLogEntryPublic": {
        "properties": {
          "level": {
            "type": "integer",
            "title": "Level"
          },
          "entry": {
            "type": "object",
            "title": "Entry",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "level",
          "entry",
          "created_at"
        ],
        "title": "DeploymentJobLogEntryPublic"
      },
      "DeploymentJobPollResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DeploymentJobStatus"
          },
          "job_type": {
            "type": "string",
            "title": "Job Type"
          },
          "request": {
            "title": "Request",
            "description": "Arguments of the requested deployment job",
            "type": "object",
            "additionalProperties": true
          },
          "result": {
            "title": "Result",
            "description": "Result of the package deployment job",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity for account-level jobs.",
            "can_patch": false,
            "type": "string"
          },
          "organization_id": {
            "title": "Organization Id",
            "description": "The ID of the organization for organization-scoped jobs.",
            "can_patch": false,
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "logs": {
            "title": "Logs",
            "items": {
              "$ref": "#/components/schemas/DeploymentJobLogEntryPublic"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "status",
          "job_type",
          "id",
          "created_at"
        ],
        "title": "DeploymentJobPollResponse"
      },
      "DeploymentJobStatus": {
        "type": "string",
        "enum": [
          "QUEUED",
          "IN_PROGRESS",
          "COMPLETED",
          "FAILED"
        ],
        "title": "DeploymentJobStatus"
      },
      "DeploymentPackageInstallationEntity": {
        "properties": {
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "The identifier of the organization."
          },
          "package_version_id": {
            "type": "string",
            "title": "Package Version Id",
            "description": "The package version which is installed"
          },
          "status": {
            "$ref": "#/components/schemas/InstallationStatus"
          },
          "install_log": {
            "title": "Install Log",
            "description": "output of installation step",
            "type": "string"
          },
          "state": {
            "title": "State",
            "description": "Properties of the installation, must match schema of the package type.",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account to which the installed package belongs. Unset for non-EGP entity deployment packages.",
            "type": "string"
          },
          "deleted_at": {
            "title": "Deleted At",
            "description": "The date and time when the entity was deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "organization_id",
          "package_version_id",
          "id",
          "created_at",
          "created_by_user_id"
        ],
        "title": "DeploymentPackageInstallationEntity"
      },
      "DeploymentPackageJobResponse": {
        "properties": {
          "deployment_package_job_id": {
            "type": "string",
            "title": "Deployment Package Job Id"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "deployment_package_job_id"
        ],
        "title": "DeploymentPackageJobResponse"
      },
      "DeploymentPackageType": {
        "type": "string",
        "enum": [
          "EGP_CONFIGURATION",
          "BLOB_STORAGE_FILE",
          "DOCKER_IMAGE",
          "EGP_ENTITY",
          "EGP_USER",
          "INTERNAL_MODEL_INFO",
          "EVALUATION_DATASET",
          "MODEL",
          "KNOWLEDGE_BASE",
          "AGENTS_CONFIG"
        ],
        "title": "DeploymentPackageType"
      },
      "DeploymentVendorConfiguration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LaunchDeploymentVendorConfiguration"
          },
          {
            "$ref": "#/components/schemas/LLMEngineDeploymentVendorConfiguration"
          }
        ],
        "title": "DeploymentVendorConfiguration",
        "discriminator": {
          "propertyName": "vendor",
          "mapping": {
            "LAUNCH": "#/components/schemas/LaunchDeploymentVendorConfiguration",
            "LLMENGINE": "#/components/schemas/LLMEngineDeploymentVendorConfiguration"
          }
        }
      },
      "EmbeddingConfig": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/EmbeddingConfigModelsAPI"
          },
          {
            "$ref": "#/components/schemas/EmbeddingConfigBase"
          }
        ],
        "title": "EmbeddingConfig"
      },
      "EmbeddingConfigBase": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "base"
            ],
            "const": "base",
            "title": "Type",
            "description": "The type of the embedding configuration.",
            "default": "base"
          },
          "embedding_model": {
            "$ref": "#/components/schemas/EmbeddingModelName",
            "description": "The name of the base embedding model to use. To use custom models, change to type 'models'."
          }
        },
        "type": "object",
        "required": [
          "embedding_model"
        ],
        "title": "EmbeddingConfigBase"
      },
      "EmbeddingConfigModelsAPI": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "models_api"
            ],
            "const": "models_api",
            "title": "Type",
            "description": "The type of the embedding configuration."
          },
          "model_deployment_id": {
            "type": "string",
            "title": "Model Deployment Id",
            "description": "The ID of the deployment of the created model in the Models API V3."
          }
        },
        "type": "object",
        "required": [
          "type",
          "model_deployment_id"
        ],
        "title": "EmbeddingConfigModelsAPI"
      },
      "EmbeddingModelName": {
        "type": "string",
        "enum": [
          "sentence-transformers/all-MiniLM-L12-v2",
          "sentence-transformers/all-mpnet-base-v2",
          "sentence-transformers/multi-qa-distilbert-cos-v1",
          "sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
          "openai/text-embedding-ada-002",
          "openai/text-embedding-3-small",
          "openai/text-embedding-3-large",
          "embed-english-v3.0",
          "embed-english-light-v3.0",
          "embed-multilingual-v3.0"
        ],
        "title": "EmbeddingModelName"
      },
      "EmbeddingRequest": {
        "properties": {
          "model_request_parameters": {
            "$ref": "#/components/schemas/ParameterBindings"
          },
          "texts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Texts"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "texts"
        ],
        "title": "EmbeddingRequest"
      },
      "EmbeddingResponse": {
        "properties": {
          "embeddings": {
            "items": {
              "prefixItems": [
                {
                  "type": "string"
                },
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                }
              ],
              "type": "array",
              "maxItems": 2,
              "minItems": 2
            },
            "type": "array",
            "title": "Embeddings"
          },
          "tokens_used": {
            "title": "Tokens Used",
            "default": 0,
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "embeddings"
        ],
        "title": "EmbeddingResponse"
      },
      "Enrich": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "mode": {
            "type": "string",
            "enum": [
              "standard",
              "page"
            ],
            "title": "Mode"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "title": "Enrich"
      },
      "Evaluation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "evaluation"
            ],
            "const": "evaluation",
            "title": "Object",
            "default": "evaluation"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "archived_at": {
            "title": "Archived At",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "datasets": {
            "title": "Datasets",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          },
          "tasks": {
            "title": "Tasks",
            "description": "Tasks executed during evaluation. Populated with optional `task` view.",
            "items": {
              "$ref": "#/components/schemas/EvaluationTask"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "created_by_user_id",
          "tags",
          "datasets",
          "status"
        ]
      },
      "EvaluationBuilderRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "metric_config": {
            "description": "Specifies the config for the metrics to be computed.",
            "can_patch": false,
            "$ref": "#/components/schemas/MetricConfig"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "annotation_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationConfigRequestBase"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigGenerationRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigMultiturnUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigSummarizationUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigTranslationUseCaseRequest"
              }
            ],
            "title": "Annotation Config",
            "description": "Annotation configuration for tasking"
          },
          "type": {
            "type": "string",
            "enum": [
              "builder"
            ],
            "const": "builder",
            "title": "Type",
            "description": "create standalone evaluation or build evaluation which will auto generate test case results",
            "default": "builder"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version": {
            "title": "Evaluation Dataset Version",
            "type": "integer"
          },
          "application_test_case_output_group_id": {
            "title": "Application Test Case Output Group Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "application_spec_id",
          "application_variant_id",
          "account_id",
          "evaluation_dataset_id"
        ],
        "title": "EvaluationBuilderRequest"
      },
      "EvaluationConfigEntity": {
        "properties": {
          "evaluation_type": {
            "$ref": "#/components/schemas/EvaluationConfigORMEvaluationTypeEnum",
            "description": "Evaluation type"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "auto_evaluation_model": {
            "description": "The name of the model to be used for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvalBaseModelName"
          },
          "auto_evaluation_parameters": {
            "description": "Execution parameters for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvaluationParameters"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "evaluation_type",
          "question_set_id",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationConfigEntity"
      },
      "EvaluationConfigExpanded": {
        "properties": {
          "evaluation_type": {
            "$ref": "#/components/schemas/EvaluationConfigORMEvaluationTypeEnum",
            "description": "Evaluation type"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "auto_evaluation_model": {
            "description": "The name of the model to be used for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvalBaseModelName"
          },
          "auto_evaluation_parameters": {
            "description": "Execution parameters for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvaluationParameters"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "question_set": {
            "$ref": "#/components/schemas/QuestionSetWithQuestions"
          }
        },
        "type": "object",
        "required": [
          "evaluation_type",
          "question_set_id",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id",
          "question_set"
        ],
        "title": "EvaluationConfigExpanded"
      },
      "EvaluationConfigORMEvaluationTypeEnum": {
        "type": "string",
        "enum": [
          "studio",
          "llm_auto",
          "human",
          "llm_benchmark"
        ],
        "title": "EvaluationConfigORMEvaluationTypeEnum"
      },
      "EvaluationConfigRequestUnion": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AutoEvalEvaluationConfigRequest"
          },
          {
            "$ref": "#/components/schemas/ManualEvaluationConfigRequest"
          }
        ],
        "title": "EvaluationConfigRequestUnion",
        "discriminator": {
          "propertyName": "evaluation_type",
          "mapping": {
            "human": "#/components/schemas/ManualEvaluationConfigRequest",
            "llm_auto": "#/components/schemas/AutoEvalEvaluationConfigRequest",
            "llm_benchmark": "#/components/schemas/AutoEvalEvaluationConfigRequest",
            "studio": "#/components/schemas/ManualEvaluationConfigRequest"
          }
        }
      },
      "EvaluationConfigResponse": {
        "properties": {
          "evaluation_type": {
            "$ref": "#/components/schemas/EvaluationConfigORMEvaluationTypeEnum",
            "description": "Evaluation type"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "auto_evaluation_model": {
            "description": "The name of the model to be used for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvalBaseModelName"
          },
          "auto_evaluation_parameters": {
            "description": "Execution parameters for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvaluationParameters"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "evaluation_type",
          "question_set_id",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationConfigResponse"
      },
      "EvaluationCreateRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/EvaluationStandaloneCreateRequest"
          },
          {
            "$ref": "#/components/schemas/EvaluationFromDatasetCreateRequest"
          },
          {
            "$ref": "#/components/schemas/EvaluationWithDatasetCreateRequest"
          }
        ],
        "title": "EvaluationCreateRequest"
      },
      "EvaluationDatasetDataLocs": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DataLocWithCount"
            },
            "type": "array",
            "title": "Items"
          },
          "test_case_count": {
            "type": "integer",
            "title": "Test Case Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "test_case_count"
        ],
        "title": "EvaluationDatasetDataLocs"
      },
      "EvaluationDatasetEntity": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset."
          },
          "knowledge_base_id": {
            "title": "Knowledge Base Id",
            "description": "ID of the knowledge base that the evaluation dataset is associated with.",
            "can_patch": false,
            "type": "string"
          },
          "evaluation_dataset_metadata": {
            "title": "Evaluation Dataset Metadata",
            "description": "Metadata about the Evaluation Dataset that it is associated with",
            "can_patch": false,
            "type": "object",
            "additionalProperties": true
          },
          "out_of_date": {
            "title": "Out Of Date",
            "description": "Boolean to check whether or not the knowledge base has been uploaded to since publication of the dataset.",
            "can_patch": false,
            "type": "boolean"
          },
          "vendor": {
            "description": "The vendor of the evaluation dataset (e.g. 'Scale' for Scale off-the-shelf datasets). Null if the evaluation dataset is not from a vendor (e.g., is created by the customer).",
            "$ref": "#/components/schemas/EvaluationDatasetVendor"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "id",
          "created_at",
          "updated_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationDatasetEntity"
      },
      "EvaluationDatasetORMSchemaTypeEnum": {
        "type": "string",
        "enum": [
          "GENERATION",
          "FLEXIBLE"
        ],
        "title": "EvaluationDatasetORMSchemaTypeEnum"
      },
      "EvaluationDatasetReportGeneration": {
        "properties": {
          "generation_status": {
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum"
          },
          "evaluation_dataset_version_num": {
            "type": "integer",
            "title": "Evaluation Dataset Version Num"
          },
          "evaluation_dataset": {
            "$ref": "#/components/schemas/EvaluationDatasetResponse"
          },
          "scored_test_case_count": {
            "title": "Scored Test Case Count",
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "generation_status",
          "evaluation_dataset_version_num",
          "evaluation_dataset"
        ],
        "title": "EvaluationDatasetReportGeneration"
      },
      "EvaluationDatasetResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset."
          },
          "knowledge_base_id": {
            "title": "Knowledge Base Id",
            "description": "ID of the knowledge base that the evaluation dataset is associated with.",
            "can_patch": false,
            "type": "string"
          },
          "evaluation_dataset_metadata": {
            "title": "Evaluation Dataset Metadata",
            "description": "Metadata about the Evaluation Dataset that it is associated with",
            "can_patch": false,
            "type": "object",
            "additionalProperties": true
          },
          "out_of_date": {
            "title": "Out Of Date",
            "description": "Boolean to check whether or not the knowledge base has been uploaded to since publication of the dataset.",
            "can_patch": false,
            "type": "boolean"
          },
          "vendor": {
            "description": "The vendor of the evaluation dataset (e.g. 'Scale' for Scale off-the-shelf datasets). Null if the evaluation dataset is not from a vendor (e.g., is created by the customer).",
            "$ref": "#/components/schemas/EvaluationDatasetVendor"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "schema_sub_type": {
            "$ref": "#/components/schemas/EvaluationDatasetSchemaSubType"
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "id",
          "created_at",
          "updated_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationDatasetResponse"
      },
      "EvaluationDatasetResponseWithViews": {
        "properties": {
          "test_case_count": {
            "title": "Test Case Count",
            "type": "integer"
          },
          "evaluation_dataset_versions": {
            "title": "Evaluation Dataset Versions",
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
            },
            "type": "array"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset."
          },
          "knowledge_base_id": {
            "title": "Knowledge Base Id",
            "description": "ID of the knowledge base that the evaluation dataset is associated with.",
            "can_patch": false,
            "type": "string"
          },
          "evaluation_dataset_metadata": {
            "title": "Evaluation Dataset Metadata",
            "description": "Metadata about the Evaluation Dataset that it is associated with",
            "can_patch": false,
            "type": "object",
            "additionalProperties": true
          },
          "out_of_date": {
            "title": "Out Of Date",
            "description": "Boolean to check whether or not the knowledge base has been uploaded to since publication of the dataset.",
            "can_patch": false,
            "type": "boolean"
          },
          "vendor": {
            "description": "The vendor of the evaluation dataset (e.g. 'Scale' for Scale off-the-shelf datasets). Null if the evaluation dataset is not from a vendor (e.g., is created by the customer).",
            "$ref": "#/components/schemas/EvaluationDatasetVendor"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "schema_sub_type": {
            "$ref": "#/components/schemas/EvaluationDatasetSchemaSubType"
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "id",
          "created_at",
          "updated_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationDatasetResponseWithViews"
      },
      "EvaluationDatasetSchemaSubType": {
        "type": "string",
        "enum": [
          "summarization",
          "translation"
        ],
        "title": "EvaluationDatasetSchemaSubType"
      },
      "EvaluationDatasetVendor": {
        "type": "string",
        "enum": [
          "scale"
        ],
        "const": "scale",
        "title": "EvaluationDatasetVendor"
      },
      "EvaluationDatasetVersionEntity": {
        "properties": {
          "num": {
            "type": "integer",
            "title": "Num",
            "description": "The version number, automatically incremented on creation"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset."
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to check whether or not the evaluation dataset is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "num",
          "evaluation_dataset_id",
          "draft",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationDatasetVersionEntity"
      },
      "EvaluationDatasetVersionRequest": {
        "properties": {
          "draft": {
            "title": "Draft",
            "description": "Boolean to check whether or not the evaluation dataset is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true,
            "type": "string"
          }
        },
        "type": "object",
        "title": "EvaluationDatasetVersionRequest"
      },
      "EvaluationDatasetVersionResponse": {
        "properties": {
          "num": {
            "type": "integer",
            "title": "Num",
            "description": "The version number, automatically incremented on creation"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset."
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to check whether or not the evaluation dataset is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "num",
          "evaluation_dataset_id",
          "draft",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "EvaluationDatasetVersionResponse"
      },
      "EvaluationDatasetViewsOptions": {
        "type": "string",
        "enum": [
          "DatasetVersion",
          "TestCaseCount"
        ],
        "title": "EvaluationDatasetViewsOptions"
      },
      "EvaluationEntry": {
        "properties": {
          "evaluation": {
            "$ref": "#/components/schemas/LegacyEvaluationEntity"
          },
          "dataset": {
            "$ref": "#/components/schemas/EvaluationDatasetEntity"
          },
          "dataset_version": {
            "$ref": "#/components/schemas/EvaluationDatasetVersionEntity"
          },
          "evaluation_config": {
            "$ref": "#/components/schemas/EvaluationConfigEntity"
          },
          "question_set": {
            "$ref": "#/components/schemas/QuestionSetEntity"
          },
          "questions": {
            "title": "Questions",
            "items": {
              "$ref": "#/components/schemas/QuestionEntity"
            },
            "type": "array"
          },
          "test_case_results": {
            "title": "Test Case Results",
            "items": {
              "$ref": "#/components/schemas/TestCaseResultEntity"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "evaluation"
        ],
        "title": "EvaluationEntry"
      },
      "EvaluationFromDatasetCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tasks": {
            "title": "Tasks",
            "description": "Tasks allow you to augment and evaluate your data",
            "items": {
              "$ref": "#/components/schemas/EvaluationTask"
            },
            "type": "array"
          },
          "data": {
            "title": "Data",
            "description": "Items to be evaluated, including references to the input dataset items",
            "items": {
              "$ref": "#/components/schemas/DatasetItemReference"
            },
            "type": "array",
            "minItems": 1
          },
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id",
            "description": "The ID of the dataset containing the items referenced by the `data` field"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "dataset_id"
        ],
        "title": "EvaluationFromDatasetCreateRequest"
      },
      "EvaluationInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "application_id": {
            "type": "string",
            "title": "Application Id"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "account_id",
          "created_by_user_id",
          "application_id",
          "created_at"
        ],
        "title": "EvaluationInfo"
      },
      "EvaluationItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "evaluation.item"
            ],
            "const": "evaluation.item",
            "title": "Object",
            "default": "evaluation.item"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "dataset_item_id": {
            "title": "Dataset Item Id",
            "type": "string"
          },
          "dataset_item_version_num": {
            "title": "Dataset Item Version Num",
            "type": "integer"
          },
          "data": {
            "type": "object",
            "title": "Data",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "archived_at": {
            "title": "Archived At",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "evaluation_id",
          "data",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "EvaluationMetricsResponse": {
        "properties": {
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id",
            "description": "The ID of the evaluation."
          },
          "num_total_test_cases": {
            "type": "integer",
            "title": "Num Total Test Cases",
            "description": "Total number of test cases."
          },
          "num_test_cases_labeled": {
            "type": "integer",
            "title": "Num Test Cases Labeled",
            "description": "Number of test cases labeled."
          },
          "num_test_cases_flagged": {
            "type": "integer",
            "title": "Num Test Cases Flagged",
            "description": "Number of test cases flagged."
          },
          "num_test_cases_fixed": {
            "type": "integer",
            "title": "Num Test Cases Fixed",
            "description": "Number of test cases fixed."
          },
          "percentage_test_cases_fixed": {
            "type": "number",
            "title": "Percentage Test Cases Fixed",
            "description": "Percentage of test cases that were fixed."
          },
          "num_test_cases_unaudited": {
            "type": "integer",
            "title": "Num Test Cases Unaudited",
            "description": "Number of test cases unaudited."
          },
          "percentage_test_cases_unaudited": {
            "type": "number",
            "title": "Percentage Test Cases Unaudited",
            "description": "Percentage of test cases that were unaudited."
          },
          "num_test_cases_approved": {
            "type": "integer",
            "title": "Num Test Cases Approved",
            "description": "Number of test cases approved."
          },
          "percentage_test_cases_approved": {
            "type": "number",
            "title": "Percentage Test Cases Approved",
            "description": "Percentage of test cases that were approved."
          },
          "avg_labeling_time_per_test_case": {
            "type": "number",
            "title": "Avg Labeling Time Per Test Case",
            "description": "Average time spent labeling per test case in seconds."
          },
          "avg_num_test_cases_labeled_per_day": {
            "type": "number",
            "title": "Avg Num Test Cases Labeled Per Day",
            "description": "Average number of test cases labeled per day."
          }
        },
        "type": "object",
        "required": [
          "evaluation_id",
          "num_total_test_cases",
          "num_test_cases_labeled",
          "num_test_cases_flagged",
          "num_test_cases_fixed",
          "percentage_test_cases_fixed",
          "num_test_cases_unaudited",
          "percentage_test_cases_unaudited",
          "num_test_cases_approved",
          "percentage_test_cases_approved",
          "avg_labeling_time_per_test_case",
          "avg_num_test_cases_labeled_per_day"
        ],
        "title": "EvaluationMetricsResponse"
      },
      "EvaluationORMStatusEnum": {
        "type": "string",
        "enum": [
          "PENDING",
          "COMPLETED",
          "FAILED"
        ],
        "title": "EvaluationORMStatusEnum"
      },
      "EvaluationReport": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EvaluationReportData"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "EvaluationReport"
      },
      "EvaluationReportData": {
        "properties": {
          "evaluation": {
            "$ref": "#/components/schemas/EvaluationInfo"
          },
          "question": {
            "$ref": "#/components/schemas/QuestionInfo"
          },
          "annotation_type": {
            "$ref": "#/components/schemas/AnnotationType"
          },
          "selected_choice": {
            "$ref": "#/components/schemas/SelectedChoice"
          }
        },
        "type": "object",
        "required": [
          "evaluation",
          "question",
          "annotation_type",
          "selected_choice"
        ],
        "title": "EvaluationReportData"
      },
      "EvaluationRequestUnion": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EvaluationBuilderRequest"
          },
          {
            "$ref": "#/components/schemas/DefaultEvaluationRequest"
          }
        ],
        "title": "EvaluationRequestUnion",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "builder": "#/components/schemas/EvaluationBuilderRequest",
            "default": "#/components/schemas/DefaultEvaluationRequest"
          }
        }
      },
      "EvaluationSpanIOData": {
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "integer"
            },
            {
              "type": "number"
            },
            {
              "items": {
                "$ref": "#/components/schemas/FlexibleIOChunk"
              },
              "type": "array"
            },
            {
              "items": {
                "$ref": "#/components/schemas/ChatMessageV2"
              },
              "type": "array"
            },
            {
              "items": {},
              "type": "array"
            },
            {
              "type": "object",
              "additionalProperties": true
            },
            {
              "$ref": "#/components/schemas/FileIODataType"
            }
          ]
        },
        "type": "object",
        "title": "EvaluationSpanIOData"
      },
      "EvaluationStandaloneCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tasks": {
            "title": "Tasks",
            "description": "Tasks allow you to augment and evaluate your data",
            "items": {
              "$ref": "#/components/schemas/EvaluationTask"
            },
            "type": "array"
          },
          "data": {
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "Items to be evaluated"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "data"
        ],
        "title": "EvaluationStandaloneCreateRequest"
      },
      "EvaluationStatus": {
        "type": "string",
        "enum": [
          "failed",
          "completed",
          "running"
        ],
        "title": "EvaluationStatus"
      },
      "EvaluationTask": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionEvaluationTask"
          },
          {
            "$ref": "#/components/schemas/GenericInferenceEvaluationTask"
          },
          {
            "$ref": "#/components/schemas/ApplicationVariantV1EvaluationTask"
          },
          {
            "$ref": "#/components/schemas/MetricEvaluationTask"
          },
          {
            "$ref": "#/components/schemas/QuestionAutoEvaluationTask"
          }
        ],
        "title": "EvaluationTask",
        "discriminator": {
          "propertyName": "task_type",
          "mapping": {
            "application_variant": "#/components/schemas/ApplicationVariantV1EvaluationTask",
            "chat_completion": "#/components/schemas/ChatCompletionEvaluationTask",
            "inference": "#/components/schemas/GenericInferenceEvaluationTask",
            "metric": "#/components/schemas/MetricEvaluationTask",
            "question_auto_evaluation": "#/components/schemas/QuestionAutoEvaluationTask"
          }
        }
      },
      "EvaluationTraceSpanRequest": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Identifier for the node that emitted this trace span."
          },
          "operation_type": {
            "$ref": "#/components/schemas/OperationType",
            "description": "Type of the operation, e.g., RERANKING.",
            "default": "CUSTOM"
          },
          "operation_status": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The outcome of the operation performed by this node.",
            "default": "SUCCESS"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "The start time of the step."
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "description": "The end time of the step.",
            "type": "string",
            "format": "date-time"
          },
          "operation_input": {
            "$ref": "#/components/schemas/EvaluationSpanIOData",
            "description": "The JSON representation of the input that this step received."
          },
          "operation_output": {
            "$ref": "#/components/schemas/EvaluationSpanIOData",
            "description": "The JSON representation of the output that this step emitted."
          },
          "operation_metadata": {
            "type": "object",
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted during execution. This can differ based on different types of operations.",
            "default": {},
            "additionalProperties": true
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "The duration of the operation step in milliseconds.",
            "default": 0
          },
          "operation_expected": {
            "description": "The JSON representation of the expected output for this step",
            "$ref": "#/components/schemas/EvaluationSpanIOData"
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "start_timestamp",
          "operation_input",
          "operation_output"
        ],
        "title": "EvaluationTraceSpanRequest"
      },
      "EvaluationTraceSpanResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Identifies the application step"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "description": "The interaction ID this span belongs to",
            "type": "string"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "description": "The id of the application variant this span belongs to",
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "The id of the node in the application_variant config that emitted this insight"
          },
          "operation_type": {
            "$ref": "#/components/schemas/ApplicationOperationType",
            "description": "Type of the operation, e.g. RERANKING"
          },
          "operation_status": {
            "$ref": "#/components/schemas/ApplicationOperationStatus",
            "description": "The outcome of the operation"
          },
          "operation_input": {
            "$ref": "#/components/schemas/EvaluationSpanIOData",
            "description": "The JSON representation of the input that this step received."
          },
          "operation_output": {
            "$ref": "#/components/schemas/EvaluationSpanIOData",
            "description": "The JSON representation of the output that this step emitted."
          },
          "operation_expected": {
            "description": "The JSON representation of the expected output for this step",
            "$ref": "#/components/schemas/EvaluationSpanIOData"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted through the execution. This can differ based on different types of operations",
            "type": "object",
            "additionalProperties": true
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "The start time of the step"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "description": "The end time of the step, nullable, since it can be set to done at a later point in time.",
            "type": "string",
            "format": "date-time"
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "How much time the step took in milliseconds(ms)"
          },
          "trace_id": {
            "title": "Trace Id",
            "description": "The root-level ID where this span belongs to",
            "type": "string"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "Who is the parent span of this current span, null if span is root parent.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "node_id",
          "operation_type",
          "operation_status",
          "operation_input",
          "operation_output",
          "start_timestamp",
          "duration_ms"
        ],
        "title": "EvaluationTraceSpanResponse"
      },
      "EvaluationUpdateRequest": {
        "$ref": "#/components/schemas/Partial_EvaluationUpdateRequest",
        "title": "EvaluationUpdateRequest"
      },
      "EvaluationViews": {
        "type": "string",
        "enum": [
          "tasks"
        ],
        "const": "tasks",
        "title": "EvaluationViews"
      },
      "EvaluationViewsOptions": {
        "type": "string",
        "enum": [
          "ApplicationSpec",
          "AsyncJobs",
          "EvaluationConfig",
          "EvaluationDatasets"
        ],
        "title": "EvaluationViewsOptions"
      },
      "EvaluationWithDatasetCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tasks": {
            "title": "Tasks",
            "description": "Tasks allow you to augment and evaluate your data",
            "items": {
              "$ref": "#/components/schemas/EvaluationTask"
            },
            "type": "array"
          },
          "data": {
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "Items to be evaluated"
          },
          "dataset": {
            "$ref": "#/components/schemas/DatasetFromEvaluationCreateRequest",
            "description": "Create a reusable dataset from items in the `data` field"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "data",
          "dataset"
        ],
        "title": "EvaluationWithDatasetCreateRequest"
      },
      "ExactVersion": {
        "properties": {
          "version_constraint_type": {
            "type": "string",
            "enum": [
              "EXACT_VERSION"
            ],
            "const": "EXACT_VERSION",
            "title": "Version Constraint Type",
            "default": "EXACT_VERSION"
          },
          "package_version_id": {
            "type": "string",
            "title": "Package Version Id"
          }
        },
        "type": "object",
        "required": [
          "package_version_id"
        ],
        "title": "ExactVersion"
      },
      "ExecuteAgentRequest": {
        "properties": {
          "model": {
            "type": "string",
            "enum": [
              "gpt-4",
              "gpt-4-0613",
              "gpt-4-32k",
              "gpt-4-32k-0613",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0613",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-16k-0613",
              "claude-instant-1",
              "claude-instant-1.1",
              "claude-2",
              "claude-2.0"
            ],
            "title": "Model",
            "description": "The ID of the model to use for the agent. We only support the models listed here so far."
          },
          "memory_strategy": {
            "description": "The memory strategy to use for the agent. A memory strategy is a way to prevent the underlying LLM's context limit from being exceeded. Each memory strategy uses a different technique to condense the input message list into a smaller payload for the underlying LLM.\n\nWe only support the Last K memory strategy right now, but will be adding new strategies soon.",
            "$ref": "#/components/schemas/MemoryStrategy"
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "type": "array",
            "title": "Tools",
            "description": "The list of specs of tools that the agent can use. Each spec must contain a `name` key set to the name of the tool, a `description` key set to the description of the tool, and an `arguments` key set to a JSON Schema compliant object describing the tool arguments.\n\nThe name and description of each tool is used by the agent to decide when to use certain tools. Because some queries are complex and may require multiple tools to complete, it is important to make these descriptions as informative as possible. If a tool is not being chosen when it should, it is common practice to tune the description of the tool to make it more apparent to the agent when the tool can be used effectively.\n\n"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "The list of messages in the conversation.\n\nExpand each message type to see how it works and when to use it. Most conversations should begin with a single `user` message."
          },
          "model_parameters": {
            "description": "Configuration parameters for the agent model, such as temperature, max_tokens, and stop_sequences.\n\nIf not specified, the default value are:\n- temperature: 0.2\n- max_tokens: None (limited by the model's max tokens)\n- stop_sequences: None",
            "default": {
              "temperature": 0.2
            },
            "$ref": "#/components/schemas/ModelParameters"
          },
          "instructions": {
            "title": "Instructions",
            "description": "The initial instructions to provide to the agent.\n\nUse this to guide the agent to act in more specific ways. For example, if you have specific rules you want to restrict the agent to follow you can specify them here. For example, if I want the agent to always use certain tools before others, I can write that rule in these instructions.\n\nGood prompt engineering is crucial to getting performant results from the agent. If you are having trouble getting the agent to perform well, try writing more specific instructions here before trying more expensive techniques such as swapping in other models or finetuning the underlying LLM.",
            "default": "You are an AI assistant that helps users with their questions. You can answer questions directly or acquire information from any of the attached tools to assist you. Always answer the user's most recent query to the best of your knowledge.\n\nWhen asked about what tools are available, you must list each attached tool's name and description. When asked about what you can do, mention that in addition to your normal capabilities, you can also use the attached tools by listing their names and descriptions. You cannot use any other tools other than the ones provided to you explicitly.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "model",
          "tools",
          "messages"
        ],
        "title": "ExecuteAgentRequest"
      },
      "ExecuteAgentResponse": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AgentAction",
            "description": "The action that the agent performed.\n\nThe context will contain a key for each action that the agent can perform. However, only the key corresponding to the action that the agent actually performed will have a populated value. The rest of the values will be `null`."
          },
          "context": {
            "$ref": "#/components/schemas/ActionContext",
            "description": "Context object containing the output payload. This will contain a key for all actions that the agent can perform. However, only the key corresponding to the action that the agent performed have a populated value. The rest of the values will be `null`."
          }
        },
        "type": "object",
        "required": [
          "action",
          "context"
        ],
        "title": "ExecuteAgentResponse"
      },
      "ExecuteGuardrailRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageV2"
            },
            "type": "array",
            "title": "Messages"
          },
          "verbose": {
            "type": "boolean",
            "title": "Verbose",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "ExecuteGuardrailRequest",
        "description": "Execute a Guardrail to see if chat thread are compliant with configured GuardrailPolicy\n\nParameters:\n    messages: List[Message] - list of messages to be checked\n    verbose: bool - whether to include detailed information in the response, like safe categories and policy descriptions"
      },
      "ExecuteGuardrailResponse": {
        "properties": {
          "is_safe": {
            "type": "boolean",
            "title": "Is Safe"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "unsafe_categories": {
            "items": {
              "$ref": "#/components/schemas/GuardrailCategoryResult"
            },
            "type": "array",
            "title": "Unsafe Categories"
          },
          "safe_categories": {
            "title": "Safe Categories",
            "items": {
              "$ref": "#/components/schemas/GuardrailCategoryResult"
            },
            "type": "array"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "verbose": {
            "title": "Verbose",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "is_safe",
          "score",
          "unsafe_categories",
          "safe_categories"
        ],
        "title": "ExecuteGuardrailResponse"
      },
      "ExperimentalProcessingOptionsTyped": {
        "properties": {
          "danger_filter_wide_boxes": {
            "type": "boolean",
            "title": "Danger Filter Wide Boxes"
          },
          "enable_checkboxes": {
            "type": "boolean",
            "title": "Enable Checkboxes"
          },
          "enable_equations": {
            "type": "boolean",
            "title": "Enable Equations"
          },
          "enable_scripts": {
            "type": "boolean",
            "title": "Enable Scripts"
          },
          "enable_underlines": {
            "type": "boolean",
            "title": "Enable Underlines"
          },
          "enrich": {
            "$ref": "#/components/schemas/Enrich"
          },
          "native_office_conversion": {
            "type": "boolean",
            "title": "Native Office Conversion"
          },
          "return_figure_images": {
            "type": "boolean",
            "title": "Return Figure Images"
          },
          "return_table_images": {
            "type": "boolean",
            "title": "Return Table Images"
          },
          "rotate_pages": {
            "type": "boolean",
            "title": "Rotate Pages"
          }
        },
        "type": "object",
        "title": "ExperimentalProcessingOptionsTyped"
      },
      "ExternalFile": {
        "properties": {
          "uri": {
            "type": "string",
            "title": "Uri"
          },
          "file_type": {
            "type": "string",
            "enum": [
              "image"
            ],
            "const": "image",
            "title": "File Type"
          }
        },
        "type": "object",
        "required": [
          "uri",
          "file_type"
        ],
        "title": "ExternalFile"
      },
      "ExtraInfoSchema": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChunkExtraInfoSchema"
          },
          {
            "$ref": "#/components/schemas/StringExtraInfoSchema"
          }
        ],
        "title": "ExtraInfoSchema",
        "discriminator": {
          "propertyName": "schema_type",
          "mapping": {
            "CHUNKS": "#/components/schemas/ChunkExtraInfoSchema",
            "STRING": "#/components/schemas/StringExtraInfoSchema"
          }
        }
      },
      "F1ScorerConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "f1"
            ],
            "const": "f1",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "F1ScorerConfigWithItemLocator"
      },
      "FeatureFlag": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "$ref": "#/components/schemas/FeatureFlagType"
          },
          "value": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "title": "Value"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "type",
          "value"
        ],
        "title": "FeatureFlag"
      },
      "FeatureFlagType": {
        "type": "string",
        "enum": [
          "bool",
          "int",
          "float",
          "str",
          "json"
        ],
        "title": "FeatureFlagType"
      },
      "FeedbackSentiment": {
        "type": "string",
        "enum": [
          "positive",
          "negative"
        ],
        "title": "FeedbackSentiment"
      },
      "FigureSummary": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "override": {
            "type": "boolean",
            "title": "Override"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "title": "FigureSummary"
      },
      "File": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "file"
            ],
            "const": "file",
            "title": "Object",
            "default": "file"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "md5_checksum": {
            "type": "string",
            "title": "Md5 Checksum"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "mime_type": {
            "type": "string",
            "title": "Mime Type"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          }
        },
        "type": "object",
        "required": [
          "size",
          "md5_checksum",
          "filename",
          "mime_type",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "FileIODataType": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ExternalFile"
          },
          {
            "$ref": "#/components/schemas/InternalFile"
          }
        ],
        "title": "FileIODataType"
      },
      "FileUpdateRequest": {
        "properties": {
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "FileUpdateRequest"
      },
      "FineTuningBundleConfiguration": {
        "properties": {
          "registry": {
            "type": "string",
            "title": "Registry"
          },
          "image": {
            "type": "string",
            "title": "Image"
          },
          "tag": {
            "type": "string",
            "title": "Tag"
          },
          "command": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Command"
          },
          "env": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Env"
          },
          "mount_location": {
            "title": "Mount Location",
            "description": "The filesystem location where the fine tuning job's configuration will be available when it is started.",
            "default": "/workspace/launch_specific/config.json",
            "type": "string"
          },
          "training_dataset_schema_type": {
            "description": "Optionally set required training and validation dataset schema",
            "$ref": "#/components/schemas/TrainingDatasetORMSchemaTypeEnum"
          },
          "resources": {
            "$ref": "#/components/schemas/RequiredResources"
          }
        },
        "type": "object",
        "required": [
          "registry",
          "image",
          "tag"
        ],
        "title": "FineTuningBundleConfiguration"
      },
      "FineTuningJobEvent": {
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "type": "number"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "level": {
            "type": "string",
            "title": "Level"
          }
        },
        "type": "object",
        "required": [
          "message",
          "level"
        ],
        "title": "FineTuningJobEvent"
      },
      "FineTuningJobRequest": {
        "properties": {
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/FineTuningJobVendorConfiguration"
          },
          "fine_tuned_model_id": {
            "title": "Fine Tuned Model Id",
            "type": "string"
          },
          "training_dataset_id": {
            "type": "string",
            "title": "Training Dataset Id"
          },
          "validation_dataset_id": {
            "title": "Validation Dataset Id",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "training_dataset_id",
          "account_id"
        ],
        "title": "FineTuningJobRequest"
      },
      "FineTuningJobResponse": {
        "properties": {
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/FineTuningJobVendorConfiguration"
          },
          "fine_tuned_model_id": {
            "title": "Fine Tuned Model Id",
            "type": "string"
          },
          "training_dataset_id": {
            "type": "string",
            "title": "Training Dataset Id"
          },
          "validation_dataset_id": {
            "title": "Validation Dataset Id",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/FineTuningJobStatus"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "training_dataset_id",
          "status",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "FineTuningJobResponse"
      },
      "FineTuningJobStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "COMPLETED",
          "FAILED",
          "RUNNING",
          "CANCELED"
        ],
        "title": "FineTuningJobStatus"
      },
      "FineTuningJobVendorConfiguration": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LaunchFineTuningJobConfiguration"
          },
          {
            "$ref": "#/components/schemas/LLMEngineFineTuningJobConfiguration"
          },
          {
            "$ref": "#/components/schemas/OpenAIFineTuningJobConfiguration"
          }
        ],
        "title": "FineTuningJobVendorConfiguration",
        "discriminator": {
          "propertyName": "vendor",
          "mapping": {
            "LAUNCH": "#/components/schemas/LaunchFineTuningJobConfiguration",
            "LLMENGINE": "#/components/schemas/LLMEngineFineTuningJobConfiguration",
            "OPENAI": "#/components/schemas/OpenAIFineTuningJobConfiguration"
          }
        }
      },
      "FlexibleIOChunk": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "FlexibleIOChunk"
      },
      "FlexibleTestCaseResultResponse": {
        "properties": {
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum",
            "description": "The status of the test case result. This should not be explictly set when creating a test case result. When patching a test case result, this field can be set to 'PENDING' to prevent the test case result from being marked 'COMPLETED'.",
            "optional_in_request": true
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "$ref": "#/components/schemas/ResultSchemaFlexible"
          },
          "test_case_evaluation_data_schema": {
            "type": "string",
            "enum": [
              "FLEXIBLE"
            ],
            "const": "FLEXIBLE",
            "title": "Test Case Evaluation Data Schema",
            "default": "FLEXIBLE"
          },
          "result": {
            "title": "Result",
            "description": "The result of the test case evaluation, in JSON form where the key is the question ID and the value is the result.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "completed_at": {
            "title": "Completed At",
            "type": "string",
            "format": "date-time"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "description": "The time spent labeling in seconds.",
            "type": "integer"
          },
          "application_test_case_output_id": {
            "title": "Application Test Case Output Id",
            "type": "string"
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "description": "The user who annotated the task.",
            "type": "string"
          },
          "edited_by_user_id": {
            "title": "Edited By User Id",
            "description": "The user who edited the task.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "edited_by": {
            "$ref": "#/components/schemas/UserV2Details"
          }
        },
        "type": "object",
        "required": [
          "label_status",
          "application_spec_id",
          "evaluation_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "test_case_id",
          "test_case_evaluation_data",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "FlexibleTestCaseResultResponse"
      },
      "FlexibleTestCaseResultResponseWithViews": {
        "properties": {
          "application_test_case_output": {
            "$ref": "#/components/schemas/ApplicationTestCaseOutputWithTraces"
          },
          "test_case_version": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
          },
          "task": {
            "$ref": "#/components/schemas/TaskWithAssignee"
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "custom_metrics": {
            "title": "Custom Metrics",
            "items": {
              "$ref": "#/components/schemas/MetricValueEntity"
            },
            "type": "array"
          },
          "audit_tasks": {
            "title": "Audit Tasks",
            "items": {
              "$ref": "#/components/schemas/TaskWithAssignee"
            },
            "type": "array"
          },
          "annotation_results": {
            "title": "Annotation Results",
            "items": {
              "$ref": "#/components/schemas/AnnotationResultExpanded"
            },
            "type": "array"
          },
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum",
            "description": "The status of the test case result. This should not be explictly set when creating a test case result. When patching a test case result, this field can be set to 'PENDING' to prevent the test case result from being marked 'COMPLETED'.",
            "optional_in_request": true
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "$ref": "#/components/schemas/ResultSchemaFlexible"
          },
          "test_case_evaluation_data_schema": {
            "type": "string",
            "enum": [
              "FLEXIBLE"
            ],
            "const": "FLEXIBLE",
            "title": "Test Case Evaluation Data Schema",
            "default": "FLEXIBLE"
          },
          "result": {
            "title": "Result",
            "description": "The result of the test case evaluation, in JSON form where the key is the question ID and the value is the result.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "completed_at": {
            "title": "Completed At",
            "type": "string",
            "format": "date-time"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "description": "The time spent labeling in seconds.",
            "type": "integer"
          },
          "application_test_case_output_id": {
            "title": "Application Test Case Output Id",
            "type": "string"
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "description": "The user who annotated the task.",
            "type": "string"
          },
          "edited_by_user_id": {
            "title": "Edited By User Id",
            "description": "The user who edited the task.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "edited_by": {
            "$ref": "#/components/schemas/UserV2Details"
          }
        },
        "type": "object",
        "required": [
          "label_status",
          "application_spec_id",
          "evaluation_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "test_case_id",
          "test_case_evaluation_data",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "FlexibleTestCaseResultResponseWithViews"
      },
      "FlexibleTestCaseVersionResponse": {
        "properties": {
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset."
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "FLEXIBLE"
            ],
            "const": "FLEXIBLE",
            "title": "Schema Type",
            "default": "FLEXIBLE"
          },
          "test_case_data": {
            "$ref": "#/components/schemas/SchemaFlexible"
          },
          "chat_history": {
            "title": "Chat History",
            "description": "Used for tracking previous chat interactions for multi-chat test cases",
            "type": "object",
            "additionalProperties": true
          },
          "autogenerated": {
            "type": "boolean",
            "title": "Autogenerated",
            "description": "Boolean to track whether or not the test case is autogenerated",
            "can_patch": false
          },
          "test_case_metadata": {
            "title": "Test Case Metadata",
            "description": "Metadata for the test case",
            "type": "object",
            "additionalProperties": true
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "evaluation_dataset_id",
          "test_case_data",
          "autogenerated",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "FlexibleTestCaseVersionResponse"
      },
      "FreeTextQuestionOptions": {
        "properties": {
          "characterLimit": {
            "$ref": "#/components/schemas/CharacterLimit"
          }
        },
        "type": "object",
        "required": [
          "characterLimit"
        ],
        "title": "FreeTextQuestionOptions"
      },
      "FullUserV2DetailsWithCreatedAt": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "preferences": {
            "title": "Preferences",
            "type": "object",
            "additionalProperties": true
          },
          "organization": {
            "type": "string",
            "title": "Organization"
          },
          "organization_role": {
            "title": "Organization Role",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "organization",
          "organization_role",
          "created_at"
        ],
        "title": "FullUserV2DetailsWithCreatedAt"
      },
      "Function": {
        "properties": {
          "arguments": {
            "type": "string",
            "title": "Arguments"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "arguments",
          "name"
        ],
        "title": "Function"
      },
      "FunctionCall": {
        "properties": {
          "arguments": {
            "type": "string",
            "title": "Arguments"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "arguments",
          "name"
        ],
        "title": "FunctionCall"
      },
      "GPUType": {
        "type": "string",
        "enum": [
          "nvidia-tesla-t4",
          "nvidia-ampere-a10",
          "nvidia-ampere-a100",
          "nvidia-ampere-a100e",
          "nvidia-hopper-h100",
          "nvidia-hopper-h100-1g20gb",
          "nvidia-hopper-h100-3g40gb"
        ],
        "title": "GPUType"
      },
      "GenerateDatasetMethod": {
        "type": "string",
        "enum": [
          "create",
          "append"
        ],
        "title": "GenerateDatasetMethod"
      },
      "GenerateDatasetRequest": {
        "properties": {
          "evaluation_dataset_id": {
            "title": "Evaluation Dataset Id",
            "description": "ID of the existing evaluation dataset, if appending",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "description": "Name of dataset, if creating a new one",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "description": "Maximum mumber of test cases to generate (max. 1000)",
            "type": "integer",
            "maximum": 1000.0
          },
          "method": {
            "$ref": "#/components/schemas/GenerateDatasetMethod",
            "description": "Method to use for generating the dataset, CREATE or APPEND"
          }
        },
        "type": "object",
        "required": [
          "method"
        ],
        "title": "GenerateDatasetRequest"
      },
      "GenerateDatasetResponse": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/EvaluationDatasetEntity"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          }
        },
        "type": "object",
        "required": [
          "dataset",
          "count"
        ],
        "title": "GenerateDatasetResponse"
      },
      "GenerateHarmsResponse": {
        "properties": {
          "generated_harms": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Generated Harms",
            "description": "List of auto-generated harms."
          }
        },
        "type": "object",
        "required": [
          "generated_harms"
        ],
        "title": "GenerateHarmsResponse"
      },
      "GenerateKnowledgeBaseV2ArtifactDownloadUrlsRequest": {
        "properties": {
          "artifact_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Artifact Ids",
            "description": "List of artifact ids to generate presigned urls for"
          }
        },
        "type": "object",
        "required": [
          "artifact_ids"
        ],
        "title": "GenerateKnowledgeBaseV2ArtifactDownloadUrlsRequest"
      },
      "GenerateKnowledgeBaseV2ArtifactDownloadUrlsResponse": {
        "properties": {
          "artifact_download_urls": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Artifact Download Urls",
            "description": "Map of artifact id to presigned url"
          },
          "failed_artifact_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Failed Artifact Ids",
            "description": "List of artifact ids that failed to generate presigned urls"
          }
        },
        "type": "object",
        "required": [
          "artifact_download_urls",
          "failed_artifact_ids"
        ],
        "title": "GenerateKnowledgeBaseV2ArtifactDownloadUrlsResponse"
      },
      "GenerationTestCaseResultResponse": {
        "properties": {
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum",
            "description": "The status of the test case result. This should not be explictly set when creating a test case result. When patching a test case result, this field can be set to 'PENDING' to prevent the test case result from being marked 'COMPLETED'.",
            "optional_in_request": true
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "$ref": "#/components/schemas/ResultSchemaGeneration"
          },
          "test_case_evaluation_data_schema": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Test Case Evaluation Data Schema",
            "default": "GENERATION"
          },
          "result": {
            "title": "Result",
            "description": "The result of the test case evaluation, in JSON form where the key is the question ID and the value is the result.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "completed_at": {
            "title": "Completed At",
            "type": "string",
            "format": "date-time"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "description": "The time spent labeling in seconds.",
            "type": "integer"
          },
          "application_test_case_output_id": {
            "title": "Application Test Case Output Id",
            "type": "string"
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "description": "The user who annotated the task.",
            "type": "string"
          },
          "edited_by_user_id": {
            "title": "Edited By User Id",
            "description": "The user who edited the task.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "edited_by": {
            "$ref": "#/components/schemas/UserV2Details"
          }
        },
        "type": "object",
        "required": [
          "label_status",
          "application_spec_id",
          "evaluation_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "test_case_id",
          "test_case_evaluation_data",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "GenerationTestCaseResultResponse"
      },
      "GenerationTestCaseResultResponseWithViews": {
        "properties": {
          "application_test_case_output": {
            "$ref": "#/components/schemas/ApplicationTestCaseOutputWithTraces"
          },
          "test_case_version": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
          },
          "task": {
            "$ref": "#/components/schemas/TaskWithAssignee"
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "custom_metrics": {
            "title": "Custom Metrics",
            "items": {
              "$ref": "#/components/schemas/MetricValueEntity"
            },
            "type": "array"
          },
          "audit_tasks": {
            "title": "Audit Tasks",
            "items": {
              "$ref": "#/components/schemas/TaskWithAssignee"
            },
            "type": "array"
          },
          "annotation_results": {
            "title": "Annotation Results",
            "items": {
              "$ref": "#/components/schemas/AnnotationResultExpanded"
            },
            "type": "array"
          },
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum",
            "description": "The status of the test case result. This should not be explictly set when creating a test case result. When patching a test case result, this field can be set to 'PENDING' to prevent the test case result from being marked 'COMPLETED'.",
            "optional_in_request": true
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "$ref": "#/components/schemas/ResultSchemaGeneration"
          },
          "test_case_evaluation_data_schema": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Test Case Evaluation Data Schema",
            "default": "GENERATION"
          },
          "result": {
            "title": "Result",
            "description": "The result of the test case evaluation, in JSON form where the key is the question ID and the value is the result.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "completed_at": {
            "title": "Completed At",
            "type": "string",
            "format": "date-time"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "description": "The time spent labeling in seconds.",
            "type": "integer"
          },
          "application_test_case_output_id": {
            "title": "Application Test Case Output Id",
            "type": "string"
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "description": "The user who annotated the task.",
            "type": "string"
          },
          "edited_by_user_id": {
            "title": "Edited By User Id",
            "description": "The user who edited the task.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "edited_by": {
            "$ref": "#/components/schemas/UserV2Details"
          }
        },
        "type": "object",
        "required": [
          "label_status",
          "application_spec_id",
          "evaluation_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "test_case_id",
          "test_case_evaluation_data",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "GenerationTestCaseResultResponseWithViews"
      },
      "GenerationTestCaseVersionResponse": {
        "properties": {
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset."
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              }
            ],
            "title": "Test Case Data"
          },
          "chat_history": {
            "title": "Chat History",
            "description": "Used for tracking previous chat interactions for multi-chat test cases",
            "type": "object",
            "additionalProperties": true
          },
          "autogenerated": {
            "type": "boolean",
            "title": "Autogenerated",
            "description": "Boolean to track whether or not the test case is autogenerated",
            "can_patch": false
          },
          "test_case_metadata": {
            "title": "Test Case Metadata",
            "description": "Metadata for the test case",
            "type": "object",
            "additionalProperties": true
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "evaluation_dataset_id",
          "test_case_data",
          "autogenerated",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "GenerationTestCaseVersionResponse"
      },
      "GenericApplicationScorerMetadata": {
        "properties": {
          "reasoning": {
            "title": "Reasoning",
            "type": "string"
          },
          "logging": {
            "title": "Logging",
            "type": "object",
            "additionalProperties": true
          },
          "time_elapsed_s": {
            "title": "Time Elapsed S",
            "type": "integer"
          },
          "usage": {
            "title": "Usage",
            "items": {
              "$ref": "#/components/schemas/GenericModelUsage"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "GenericApplicationScorerMetadata"
      },
      "GenericAsyncJobProgressSchema": {
        "properties": {
          "completed": {
            "type": "integer",
            "title": "Completed"
          },
          "failed": {
            "type": "integer",
            "title": "Failed"
          },
          "pending": {
            "type": "integer",
            "title": "Pending"
          }
        },
        "type": "object",
        "required": [
          "completed",
          "failed",
          "pending"
        ],
        "title": "GenericAsyncJobProgressSchema"
      },
      "GenericAsyncJobStatusEnum": {
        "type": "string",
        "enum": [
          "Pending",
          "Running",
          "Completed",
          "Failed",
          "Canceled"
        ],
        "title": "GenericAsyncJobStatusEnum"
      },
      "GenericInferenceEvaluationTask": {
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "inference"
            ],
            "const": "inference",
            "title": "Task Type",
            "default": "inference"
          },
          "alias": {
            "title": "Alias",
            "description": "Alias to title the results column. Defaults to the `task_type`",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/GenericInferenceRequestWithItemLocator"
          }
        },
        "type": "object",
        "required": [
          "configuration"
        ],
        "title": "GenericInferenceEvaluationTask"
      },
      "GenericInferenceRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model specified as `vendor/name` (ex. openai/gpt-5)"
          },
          "args": {
            "title": "Args",
            "description": "Arguments passed into model",
            "type": "object",
            "additionalProperties": true
          },
          "inference_configuration": {
            "description": "Vendor specific configuration",
            "$ref": "#/components/schemas/LaunchInferenceConfiguration"
          }
        },
        "type": "object",
        "required": [
          "model"
        ],
        "title": "GenericInferenceRequest"
      },
      "GenericInferenceRequestWithItemLocator": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Model"
          },
          "args": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Args"
          },
          "inference_configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LaunchInferenceConfiguration"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Inference Configuration"
          }
        },
        "type": "object",
        "required": [
          "model"
        ],
        "title": "GenericInferenceRequestWithItemLocator"
      },
      "GenericInferenceResponse": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "generic_inference"
            ],
            "const": "generic_inference",
            "title": "Object",
            "default": "generic_inference"
          },
          "response": {
            "title": "Response"
          }
        },
        "type": "object",
        "required": [
          "response"
        ]
      },
      "GenericInferenceResponseChunk": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "generic_inference.chunk"
            ],
            "const": "generic_inference.chunk",
            "title": "Object",
            "default": "generic_inference.chunk"
          },
          "response": {
            "title": "Response"
          }
        },
        "type": "object",
        "required": [
          "response"
        ]
      },
      "GenericModelRequest": {
        "properties": {
          "stream": {
            "title": "Stream",
            "description": "Flag indicating whether to stream the completion response",
            "default": false,
            "type": "boolean"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "GenericModelRequest"
      },
      "GenericModelResponse": {
        "properties": {
          "status": {
            "title": "Status",
            "type": "string"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "error_message": {
            "title": "Error Message",
            "type": "string"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "GenericModelResponse"
      },
      "GenericModelUsage": {
        "properties": {
          "prompt_tokens": {
            "title": "Prompt Tokens",
            "type": "integer"
          },
          "completion_tokens": {
            "title": "Completion Tokens",
            "type": "integer"
          },
          "cost": {
            "title": "Cost",
            "type": "number"
          },
          "model": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationScorerBaseModelName"
              },
              {
                "$ref": "#/components/schemas/AutoEvalBaseModelName"
              }
            ],
            "title": "Model"
          }
        },
        "type": "object",
        "title": "GenericModelUsage"
      },
      "GetChunksResponse": {
        "properties": {
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkV2WithoutScore"
            },
            "type": "array",
            "title": "Chunks",
            "description": "List of chunks that match the chunk_id and metadata filters"
          }
        },
        "type": "object",
        "required": [
          "chunks"
        ],
        "title": "GetChunksResponse"
      },
      "GetEvaluationDatasetGenerationJobResponse": {
        "properties": {
          "generation_job_id": {
            "type": "string",
            "title": "Generation Job Id",
            "description": "ID of the async job associated with this evaluation dataset generation"
          },
          "status": {
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum",
            "description": "Status of the async job"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The timestamp at which the upload job started."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The timestamp at which the upload job was last updated."
          },
          "num_test_cases": {
            "title": "Num Test Cases",
            "description": "Optional number of test cases input to the job",
            "type": "integer"
          },
          "num_completed_test_cases": {
            "title": "Num Completed Test Cases",
            "description": "Number of test cases that have been generated",
            "type": "integer"
          },
          "total_chunk_count": {
            "title": "Total Chunk Count",
            "description": "Number of chunks in the knowledge base",
            "type": "integer"
          },
          "failure_reason": {
            "title": "Failure Reason",
            "description": "Reason for the job's failure, if applicable",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "generation_job_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "GetEvaluationDatasetGenerationJobResponse"
      },
      "GetKnowledgeBaseV2ArtifactResponse": {
        "properties": {
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "Unique identifier for the artifact."
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name",
            "description": "Friendly name for the artifact."
          },
          "artifact_uri": {
            "type": "string",
            "title": "Artifact Uri",
            "description": "Location (e.g. URI) of the artifact in the data source."
          },
          "artifact_uri_public": {
            "title": "Artifact Uri Public",
            "description": "Public Location (e.g. URI) of the artifact in the data source.",
            "type": "string"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the artifact."
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Reason for the artifact's status.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ArtifactSource",
            "description": "Data source of the artifact."
          },
          "chunks_status": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ChunksStatus",
            "description": "Number of chunks pending, completed, and failed."
          },
          "updated_at": {
            "title": "Updated At",
            "description": "Timestamp at which the artifact was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "description": "Tags associated with the artifact.",
            "type": "object",
            "additionalProperties": true
          },
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ArtifactChunk"
            },
            "type": "array",
            "title": "Chunks",
            "description": "List of chunks associated with the artifact."
          }
        },
        "type": "object",
        "required": [
          "artifact_id",
          "artifact_name",
          "artifact_uri",
          "status",
          "source",
          "chunks_status",
          "tags",
          "chunks"
        ],
        "title": "GetKnowledgeBaseV2ArtifactResponse"
      },
      "GetKnowledgeBaseV2UploadResponse": {
        "properties": {
          "upload_id": {
            "type": "string",
            "title": "Upload Id",
            "description": "Unique ID of the upload job."
          },
          "data_source_config": {
            "$ref": "#/components/schemas/DataSourceConfig",
            "description": "Configuration for downloading data from source."
          },
          "chunking_strategy_config": {
            "description": "Configuration for chunking the text content of each artifact.",
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "The timestamp at which the upload job started."
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "description": "The timestamp at which the upload job was last updated."
          },
          "status": {
            "$ref": "#/components/schemas/UploadJobStatus",
            "description": "Sync status"
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Reason for the upload job's status.",
            "type": "string"
          },
          "artifacts_status": {
            "$ref": "#/components/schemas/ArtifactsStatus",
            "description": "Number of artifacts in each of the various states, such as completed and failed for this upload. This includes artifacts for this data source that are retried."
          },
          "artifacts": {
            "title": "Artifacts",
            "description": "List of info for each artifacts associated with this upload. This includes artifacts for this data source that are retried.",
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactInfo"
            },
            "type": "array"
          },
          "created_by_schedule_id": {
            "title": "Created By Schedule Id",
            "description": "Id of the upload schedule that triggered this upload_id. Null if triggered manually.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "upload_id",
          "data_source_config",
          "created_at",
          "updated_at",
          "status",
          "artifacts_status",
          "artifacts"
        ],
        "title": "GetKnowledgeBaseV2UploadResponse"
      },
      "GetModelServerDeploymentResponse": {
        "properties": {
          "model_deployment_id": {
            "type": "string",
            "title": "Model Deployment Id"
          }
        },
        "type": "object",
        "required": [
          "model_deployment_id"
        ],
        "title": "GetModelServerDeploymentResponse"
      },
      "GetOrganizationByDomainResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the organization."
          },
          "use_oidc": {
            "type": "boolean",
            "title": "Use Oidc",
            "description": "True if organization auth is OIDC"
          }
        },
        "type": "object",
        "required": [
          "name",
          "use_oidc"
        ],
        "title": "GetOrganizationByDomainResponse"
      },
      "GoogleDriveDataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "GoogleDrive"
            ],
            "const": "GoogleDrive",
            "title": "Source"
          },
          "client_email": {
            "type": "string",
            "title": "Client Email",
            "description": "Client email to use for google drive, set to override client email set in env vars"
          },
          "private_key": {
            "type": "string",
            "title": "Private Key",
            "description": "Private key to use for google drive, set to override private key set in env vars"
          },
          "token_uri": {
            "type": "string",
            "title": "Token Uri",
            "description": "Token uri to use for google drive, set to override token uri set in env vars"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Client id to use for google drive, set to override client id set in env vars"
          }
        },
        "type": "object",
        "required": [
          "source",
          "client_email",
          "private_key",
          "token_uri",
          "client_id"
        ],
        "title": "Google Drive DataSource Auth Config"
      },
      "GoogleDriveDataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "GoogleDrive"
            ],
            "const": "GoogleDrive",
            "title": "Source"
          },
          "drive_id": {
            "type": "string",
            "title": "Drive Id",
            "description": "ID associated with the Google Drive to retrieve contents from"
          }
        },
        "type": "object",
        "required": [
          "source",
          "drive_id"
        ],
        "title": "Google Drive DataSource Config"
      },
      "GuardrailCategoryResult": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/AttackCategory"
          },
          "policy_id": {
            "type": "string",
            "title": "Policy Id"
          },
          "threshold": {
            "type": "number",
            "title": "Threshold"
          },
          "is_safe": {
            "type": "boolean",
            "title": "Is Safe"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "score": {
            "title": "Score",
            "type": "number"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "category",
          "policy_id",
          "threshold",
          "is_safe"
        ],
        "title": "GuardrailCategoryResult"
      },
      "GuardrailCheckResultWithPolicy": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "guardrail_id": {
            "type": "string",
            "title": "Guardrail Id",
            "can_patch": false
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "can_patch": false
          },
          "policy_id": {
            "type": "string",
            "title": "Policy Id"
          },
          "severity": {
            "$ref": "#/components/schemas/GuardrailPolicySeverity"
          },
          "triggered": {
            "type": "boolean",
            "title": "Triggered"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "result_metadata": {
            "title": "Result Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "guardrail": {
            "$ref": "#/components/schemas/GuardrailResponse"
          },
          "policy": {
            "$ref": "#/components/schemas/GuardrailPolicyResponse"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "guardrail_id",
          "application_spec_id",
          "application_variant_id",
          "application_interaction_id",
          "policy_id",
          "severity",
          "triggered",
          "score",
          "created_at",
          "guardrail",
          "policy"
        ],
        "title": "GuardrailCheckResultWithPolicy"
      },
      "GuardrailCheckType": {
        "type": "string",
        "enum": [
          "input",
          "output"
        ],
        "title": "GuardrailCheckType"
      },
      "GuardrailConfiguration": {
        "properties": {
          "guardrails_to_execute": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Guardrails To Execute",
            "description": "List of guardrail ids that need to be executed for the application interactions"
          }
        },
        "type": "object",
        "required": [
          "guardrails_to_execute"
        ],
        "title": "GuardrailConfiguration"
      },
      "GuardrailPolicyRequest": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          },
          "unsafe_threshold": {
            "type": "number",
            "title": "Unsafe Threshold"
          },
          "guardrail_policy_metadata": {
            "title": "Guardrail Policy Metadata",
            "description": "Guardrail metadata",
            "type": "object",
            "additionalProperties": true
          },
          "description": {
            "title": "Description",
            "description": "Description of the policy (defaults to category description)",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "category",
          "unsafe_threshold"
        ],
        "title": "GuardrailPolicyRequest"
      },
      "GuardrailPolicyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "unsafe_threshold": {
            "type": "number",
            "title": "Unsafe Threshold"
          },
          "guardrail_policy_metadata": {
            "title": "Guardrail Policy Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "guardrail_id": {
            "type": "string",
            "title": "Guardrail Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "category",
          "unsafe_threshold",
          "guardrail_id",
          "created_at"
        ],
        "title": "GuardrailPolicyResponse"
      },
      "GuardrailPolicySeverity": {
        "type": "string",
        "enum": [
          "low",
          "high"
        ],
        "title": "GuardrailPolicySeverity"
      },
      "GuardrailResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "check_type": {
            "$ref": "#/components/schemas/GuardrailCheckType"
          },
          "guardrail_metadata": {
            "title": "Guardrail Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "is_archived": {
            "title": "Is Archived",
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "account_id",
          "check_type",
          "created_at"
        ],
        "title": "GuardrailResponse"
      },
      "GuardrailWithPolicies": {
        "properties": {
          "guardrail": {
            "$ref": "#/components/schemas/GuardrailResponse"
          },
          "policies": {
            "items": {
              "$ref": "#/components/schemas/GuardrailPolicyResponse"
            },
            "type": "array",
            "title": "Policies"
          }
        },
        "type": "object",
        "required": [
          "guardrail",
          "policies"
        ],
        "title": "GuardrailWithPolicies"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HybridEvaluationMetricsResponse": {
        "properties": {
          "all_question_info": {
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionHybridEvalMetric"
            },
            "type": "object",
            "title": "All Question Info",
            "description": "Information about all questions."
          }
        },
        "type": "object",
        "required": [
          "all_question_info"
        ],
        "title": "HybridEvaluationMetricsResponse"
      },
      "ImageCompletionRequests": {
        "properties": {
          "image_url": {
            "type": "string",
            "title": "Image Url",
            "description": "Image URL to run image completion on."
          },
          "detail": {
            "title": "Detail",
            "description": "Detail to run image completion with. Defaults to auto",
            "default": "auto",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "image_url"
        ],
        "title": "ImageCompletionRequests"
      },
      "ImageDataSubPart": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "base64"
            ],
            "const": "base64",
            "title": "Type",
            "description": "The type of the image data. Only base64 is supported.",
            "default": "base64"
          },
          "media_type": {
            "type": "string",
            "title": "Media Type",
            "description": "The media/mime type of the image data. For example, 'image/png'. Check providers' documentation for supported media types."
          },
          "data": {
            "type": "string",
            "title": "Data",
            "description": "The base64-encoded image data."
          },
          "detail": {
            "title": "Detail",
            "description": "Only used for OpenAI. Corresponds to OpenAI's image detail parameter.",
            "type": "string",
            "enum": [
              "low",
              "high",
              "auto"
            ]
          }
        },
        "type": "object",
        "required": [
          "media_type",
          "data"
        ],
        "title": "ImageDataSubPart"
      },
      "ImageUrlSubPart": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL of the image. Note: only OpenAI supports this."
          },
          "detail": {
            "title": "Detail",
            "description": "Only used for OpenAI. Corresponds to OpenAI's image detail parameter.",
            "type": "string",
            "enum": [
              "low",
              "high",
              "auto"
            ]
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "ImageUrlSubPart"
      },
      "InferenceModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "model"
            ],
            "const": "model",
            "title": "Object",
            "default": "model"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_type": {
            "$ref": "#/components/schemas/InferenceModelType"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/InferenceModelVendor"
          },
          "vendor_configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models_api_models_no_gen__LaunchVendorConfiguration"
              },
              {
                "$ref": "#/components/schemas/LLMEngineVendorConfiguration"
              }
            ],
            "title": "Vendor Configuration"
          },
          "status": {
            "$ref": "#/components/schemas/InferenceModelStatus"
          },
          "model_metadata": {
            "title": "Model Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_type",
          "model_vendor",
          "status",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "InferenceModelStatus": {
        "type": "string",
        "enum": [
          "failed",
          "ready",
          "deploying"
        ],
        "title": "InferenceModelStatus"
      },
      "InferenceModelType": {
        "type": "string",
        "enum": [
          "generic",
          "completion",
          "chat_completion"
        ],
        "title": "InferenceModelType"
      },
      "InferenceModelVendor": {
        "type": "string",
        "enum": [
          "openai",
          "cohere",
          "vertex_ai",
          "anthropic",
          "azure",
          "gemini",
          "launch",
          "llmengine",
          "model_zoo",
          "bedrock",
          "xai"
        ],
        "title": "InferenceModelVendor"
      },
      "InstallDeploymentPackageRequest": {
        "properties": {
          "deployment_package_id": {
            "title": "Deployment Package Id",
            "type": "string"
          },
          "deployment_package_name": {
            "title": "Deployment Package Name",
            "type": "string"
          },
          "deployment_package_type": {
            "$ref": "#/components/schemas/DeploymentPackageType"
          },
          "version_constraint": {
            "$ref": "#/components/schemas/PackageVersionConstraint"
          }
        },
        "type": "object",
        "title": "InstallDeploymentPackageRequest"
      },
      "InstallDeploymentPackageResponse": {
        "properties": {
          "package_installation": {
            "$ref": "#/components/schemas/DeploymentPackageInstallationEntity"
          }
        },
        "type": "object",
        "required": [
          "package_installation"
        ],
        "title": "InstallDeploymentPackageResponse"
      },
      "InstallationByType": {
        "properties": {
          "package_installation_id": {
            "type": "string",
            "title": "Package Installation Id"
          },
          "package_version_id": {
            "type": "string",
            "title": "Package Version Id"
          },
          "deployment_package_id": {
            "type": "string",
            "title": "Deployment Package Id"
          },
          "state": {
            "title": "State",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "package_installation_id",
          "package_version_id",
          "deployment_package_id",
          "created_at"
        ],
        "title": "InstallationByType"
      },
      "InstallationStatus": {
        "type": "string",
        "enum": [
          "INSTALLED",
          "UNINSTALLED",
          "IN_PROGRESS",
          "FAILED"
        ],
        "title": "InstallationStatus"
      },
      "InstallationSummary": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/InstallationStatus"
          },
          "state": {
            "title": "State",
            "type": "object",
            "additionalProperties": true
          },
          "deleted_at": {
            "title": "Deleted At",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "created_at",
          "created_by_user_id"
        ],
        "title": "InstallationSummary"
      },
      "InteractionDetail": {
        "properties": {
          "tokens_used": {
            "title": "Tokens Used",
            "type": "integer"
          },
          "feedback_sentiment": {
            "$ref": "#/components/schemas/FeedbackSentiment"
          },
          "feedback_response": {
            "title": "Feedback Response",
            "type": "string"
          }
        },
        "type": "object",
        "title": "InteractionDetail"
      },
      "InteractionEntity": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "description": "Identifier for the application variant that performed this interaction."
          },
          "thread_id": {
            "title": "Thread Id",
            "description": "Optional UUID identifying the conversation thread associated with the interaction.The interaction will be associated with the thread if the id represents an existing thread.If the thread with the specified id is not found, a new thread will be created.",
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/InteractionInput",
            "description": "The input data for the interaction."
          },
          "output": {
            "$ref": "#/components/schemas/InteractionOutput",
            "description": "The output data from the interaction."
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "Timestamp marking the start of the interaction."
          },
          "duration_ms": {
            "title": "Duration Ms",
            "description": "Duration of the interaction in milliseconds.",
            "default": 0,
            "type": "integer"
          },
          "operation_status": {
            "description": "The outcome status of the interaction.",
            "default": "SUCCESS",
            "$ref": "#/components/schemas/OperationStatus"
          },
          "operation_metadata": {
            "type": "object",
            "title": "Operation Metadata",
            "description": "Optional metadata related to the operation, including custom or predefined keys.",
            "default": {},
            "additionalProperties": true
          },
          "trace_spans": {
            "title": "Trace Spans",
            "description": "List of trace span entities associated with the interaction.",
            "items": {
              "$ref": "#/components/schemas/TraceSpanEntity"
            },
            "type": "array"
          },
          "guardrail_results": {
            "title": "Guardrail Results",
            "description": "Results of the guardrails executed on the input",
            "items": {
              "$ref": "#/components/schemas/GuardrailCheckResultWithPolicy"
            },
            "type": "array"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the interaction."
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "input",
          "output",
          "start_timestamp",
          "id"
        ],
        "title": "InteractionEntity",
        "description": "Model representing an interaction entity."
      },
      "InteractionGuardrailCheckResultRequest": {
        "properties": {
          "guardrail_id": {
            "type": "string",
            "title": "Guardrail Id"
          },
          "policy_id": {
            "type": "string",
            "title": "Policy Id"
          },
          "severity": {
            "$ref": "#/components/schemas/GuardrailPolicySeverity"
          },
          "triggered": {
            "type": "boolean",
            "title": "Triggered"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "result_metadata": {
            "title": "Result Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "guardrail_id",
          "policy_id",
          "severity",
          "triggered",
          "score"
        ],
        "title": "InteractionGuardrailCheckResultRequest"
      },
      "InteractionInput": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The query or input text for the interaction."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "query"
        ],
        "title": "InteractionInput",
        "description": "Represents the input of an interaction."
      },
      "InteractionOutput": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response",
            "description": "The response or output text of the interaction."
          },
          "context": {
            "title": "Context",
            "description": "Optional context information provided with the response.",
            "items": {
              "$ref": "#/components/schemas/InteractionOutputContextEntry"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "response"
        ],
        "title": "InteractionOutput",
        "description": "Represents the output of an interaction."
      },
      "InteractionOutputContextEntry": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the context entry."
          },
          "score": {
            "title": "Score",
            "description": "The score of the context entry.",
            "type": "number"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "text"
        ],
        "title": "InteractionOutputContextEntry"
      },
      "InteractionRequest": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id",
            "description": "Identifier for the application variant that performed this interaction."
          },
          "thread_id": {
            "title": "Thread Id",
            "description": "Optional UUID identifying the conversation thread associated with the interaction.The interaction will be associated with the thread if the id represents an existing thread.If the thread with the specified id is not found, a new thread will be created.",
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/InteractionInput",
            "description": "The input data for the interaction."
          },
          "output": {
            "$ref": "#/components/schemas/InteractionOutput",
            "description": "The output data from the interaction."
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "Timestamp marking the start of the interaction."
          },
          "duration_ms": {
            "title": "Duration Ms",
            "description": "Duration of the interaction in milliseconds.",
            "default": 0,
            "type": "integer"
          },
          "operation_status": {
            "description": "The outcome status of the interaction.",
            "default": "SUCCESS",
            "$ref": "#/components/schemas/OperationStatus"
          },
          "operation_metadata": {
            "type": "object",
            "title": "Operation Metadata",
            "description": "Optional metadata related to the operation, including custom or predefined keys.",
            "default": {},
            "additionalProperties": true
          },
          "trace_spans": {
            "title": "Trace Spans",
            "description": "List of trace spans associated with the interaction.These spans provide insight into the individual steps taken by nodes involved in generating the output.",
            "items": {
              "$ref": "#/components/schemas/TraceSpanRequest"
            },
            "type": "array"
          },
          "guardrail_results": {
            "title": "Guardrail Results",
            "description": "Results of the guardrails executed on the input",
            "items": {
              "$ref": "#/components/schemas/InteractionGuardrailCheckResultRequest"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "input",
          "output",
          "start_timestamp"
        ],
        "title": "InteractionRequest",
        "description": "Represents an interaction performed with an application, including input, output, and associated metadata."
      },
      "InternalFile": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id"
          },
          "file_type": {
            "type": "string",
            "enum": [
              "image"
            ],
            "const": "image",
            "title": "File Type"
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "file_type"
        ],
        "title": "InternalFile"
      },
      "InvalidApplicationEdgeConfiguration": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/InvalidApplicationErrorCode"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "from_node_id": {
            "type": "string",
            "title": "From Node Id"
          },
          "to_node_id": {
            "type": "string",
            "title": "To Node Id"
          },
          "from_field": {
            "type": "string",
            "title": "From Field"
          },
          "to_field": {
            "type": "string",
            "title": "To Field"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "from_node_id",
          "to_node_id",
          "from_field",
          "to_field"
        ],
        "title": "InvalidApplicationEdgeConfiguration",
        "description": "Raised when application edge configuration is invalid"
      },
      "InvalidApplicationErrorCode": {
        "type": "string",
        "enum": [
          "INVALID_APPLICATION_NO_INPUT_NODE",
          "INVALID_APPLICATION_NO_OUTPUT_NODE",
          "INVALID_APPLICATION_EDGE_NO_INPUT_FIELD",
          "INVALID_APPLICATION_EDGE_NO_OUTPUT_FIELD",
          "INVALID_APPLICATION_EDGE_TYPE_MISMATCH",
          "INVALID_APPLICATION_NODE_TYPE_MISMATCH",
          "INVALID_APPLICATION_NODE_FIELD_INVALID",
          "INVALID_APPLICATION_NODE_FIELD_BUSINESS_ERROR",
          "INVALID_APPLICATION_NODE_REQUIRED_INPUT_NOT_CONNECTED",
          "INVALID_APPLICATION_NO_PROCESSOR_FOR_NODE_TYPE",
          "INVALID_APPLICATION_INVALID_GRAPH",
          "INVALID_NODE_OVERRIDE"
        ],
        "title": "InvalidApplicationErrorCode"
      },
      "InvalidApplicationGraphConfiguration": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/InvalidApplicationErrorCode"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "error_code"
        ],
        "title": "InvalidApplicationGraphConfiguration",
        "description": "Raised when application graph configuration is invalid"
      },
      "InvalidApplicationNodeConfiguration": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/InvalidApplicationErrorCode"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "node_id"
        ],
        "title": "InvalidApplicationNodeConfiguration",
        "description": "Raised when application node configuration is invalid"
      },
      "InvalidApplicationNodeConfigurationField": {
        "properties": {
          "error_code": {
            "$ref": "#/components/schemas/InvalidApplicationErrorCode"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "field": {
            "type": "string",
            "title": "Field"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id"
          }
        },
        "type": "object",
        "required": [
          "error_code",
          "field",
          "node_id"
        ],
        "title": "InvalidApplicationNodeConfigurationField",
        "description": "Raised when a field in node configuration is invalid"
      },
      "InvalidApplicationResponse": {
        "properties": {
          "sgp_error_code": {
            "type": "string",
            "enum": [
              "APPLICATION_BUILDER_VALIDATION_ERROR"
            ],
            "const": "APPLICATION_BUILDER_VALIDATION_ERROR",
            "title": "Sgp Error Code",
            "default": "APPLICATION_BUILDER_VALIDATION_ERROR"
          },
          "errors": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InvalidApplicationGraphConfiguration"
                },
                {
                  "$ref": "#/components/schemas/InvalidApplicationEdgeConfiguration"
                },
                {
                  "$ref": "#/components/schemas/InvalidApplicationNodeConfiguration"
                },
                {
                  "$ref": "#/components/schemas/InvalidApplicationNodeConfigurationField"
                }
              ]
            },
            "type": "array",
            "title": "Errors"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "errors"
        ],
        "title": "InvalidApplicationResponse"
      },
      "InviteUserRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "Email address of the user"
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "Organization ID of the user"
          }
        },
        "type": "object",
        "required": [
          "email",
          "organization_id"
        ],
        "title": "InviteUserRequest"
      },
      "ItemLocator": {
        "type": "string",
        "title": "ItemLocator"
      },
      "ItemLocatorTemplate": {
        "type": "string",
        "title": "ItemLocatorTemplate"
      },
      "KnowledgeBaseDataSource": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "object": {
            "type": "string",
            "enum": [
              "knowledge_base_data_source"
            ],
            "const": "knowledge_base_data_source",
            "title": "Object",
            "default": "knowledge_base_data_source"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_config": {
            "$ref": "#/components/schemas/RemoteDataSourceConfig",
            "can_patch": false
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_source_config",
          "id",
          "created_at",
          "updated_at",
          "created_by_user_id"
        ]
      },
      "KnowledgeBaseDataSourceConnectionResponse": {
        "properties": {
          "deletion_status": {
            "description": "The status of the deletion job for this data source connection, if any.",
            "$ref": "#/components/schemas/KnowledgeBaseDataSourceDeletionStatus"
          },
          "last_uploaded_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Uploaded At",
            "description": "The date and time when the last upload for the data source was initiated."
          },
          "knowledge_base_data_source": {
            "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse",
            "description": "The knowledge base data source entity."
          }
        },
        "type": "object",
        "required": [
          "last_uploaded_at",
          "knowledge_base_data_source"
        ],
        "title": "KnowledgeBaseDataSourceConnectionResponse"
      },
      "KnowledgeBaseDataSourceCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_config": {
            "$ref": "#/components/schemas/RemoteDataSourceConfig",
            "can_patch": false
          },
          "data_source_auth_config": {
            "$ref": "#/components/schemas/DataSourceAuthConfig"
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_source_config"
        ],
        "title": "KnowledgeBaseDataSourceCreateRequest"
      },
      "KnowledgeBaseDataSourceDeletionStatus": {
        "type": "string",
        "enum": [
          "DELETING",
          "FAILED"
        ],
        "title": "KnowledgeBaseDataSourceDeletionStatus"
      },
      "KnowledgeBaseDataSourceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_config": {
            "$ref": "#/components/schemas/RemoteDataSourceConfig",
            "can_patch": false
          },
          "data_source_auth_config": {
            "$ref": "#/components/schemas/DataSourceAuthConfig"
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_source_config",
          "account_id"
        ],
        "title": "KnowledgeBaseDataSourceRequest"
      },
      "KnowledgeBaseDataSourceResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_config": {
            "$ref": "#/components/schemas/RemoteDataSourceConfig",
            "can_patch": false
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_source_config",
          "id",
          "created_at",
          "updated_at",
          "created_by_user_id",
          "account_id"
        ],
        "title": "KnowledgeBaseDataSourceResponse"
      },
      "KnowledgeBaseDataSourceUpdateRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_auth_config": {
            "$ref": "#/components/schemas/DataSourceAuthConfig"
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          }
        },
        "type": "object",
        "title": "KnowledgeBaseDataSourceUpdateRequest"
      },
      "KnowledgeBaseEmbeddingModelItem": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the embedding model"
          },
          "model_configuration": {
            "$ref": "#/components/schemas/EmbeddingConfig",
            "description": "The configuration of the embedding model"
          },
          "model_instance_id": {
            "title": "Model Instance Id",
            "description": "The ID of the model instance (for custom embedding models only)",
            "type": "string"
          },
          "model_instance_description": {
            "title": "Model Instance Description",
            "description": "The description of the model instance (for custom embedding models only)",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "model_configuration"
        ],
        "title": "KnowledgeBaseEmbeddingModelItem"
      },
      "KnowledgeBaseItemV2": {
        "properties": {
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "description": "The unique ID of the knowledge base"
          },
          "vector_store_id": {
            "title": "Vector Store Id",
            "description": "(Legacy) The unique ID of the underlying vector store. This is to allow for backwards compatibility with the V1 Vector Store APIs. This will be removed in the near future.",
            "type": "string"
          },
          "knowledge_base_name": {
            "type": "string",
            "title": "Knowledge Base Name",
            "description": "The name of the knowledge base"
          },
          "embedding_config": {
            "$ref": "#/components/schemas/EmbeddingConfig",
            "description": "The embedding configuration"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata associated with the knowledge base",
            "type": "object",
            "additionalProperties": true
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "The timestamp at which the knowledge base was created"
          },
          "updated_at": {
            "title": "Updated At",
            "description": "The timestamp at which the knowledge base was last updated",
            "type": "string"
          },
          "connections": {
            "title": "Connections",
            "description": "The data source connections associated with the knowledge base. Only returned with the `view=Connections` query parameter.",
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseDataSourceConnectionResponse"
            },
            "type": "array"
          },
          "artifacts_status": {
            "description": "Number of artifacts in each of the various states, such as completed and failed for this knowledge base. This includes all data sources.",
            "$ref": "#/components/schemas/ArtifactsStatus"
          },
          "artifact_count": {
            "title": "Artifact Count",
            "description": "The total number of artifacts in the knowledge base. Only returned with the `view=ArtifactCount` query parameter.",
            "type": "integer"
          },
          "cluster_status": {
            "title": "Cluster Status",
            "description": "Whether the knowledge base has been clustered.",
            "type": "string"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user ID of the user who created the knowledge base.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_id",
          "vector_store_id",
          "knowledge_base_name",
          "embedding_config",
          "created_at"
        ],
        "title": "KnowledgeBaseItemV2"
      },
      "KnowledgeBaseNodeOverride": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "knowledge_base_schema"
            ],
            "const": "knowledge_base_schema",
            "title": "Type",
            "default": "knowledge_base_schema"
          },
          "artifact_ids_filter": {
            "title": "Artifact Ids Filter",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "artifact_name_regex": {
            "title": "Artifact Name Regex",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "KnowledgeBaseNodeOverride"
      },
      "KnowledgeBasePatchResponse": {
        "properties": {
          "knowledge_base_name": {
            "title": "Knowledge Base Name",
            "description": "The name of the knowledge base",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata associated with the knowledge base",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "KnowledgeBasePatchResponse"
      },
      "KnowledgeBaseUpload": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id"
          },
          "data_source_idempotency_key": {
            "title": "Data Source Idempotency Key",
            "type": "string"
          },
          "data_source_config": {
            "$ref": "#/components/schemas/DataSourceConfig"
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At"
          },
          "status": {
            "title": "Status",
            "type": "string"
          },
          "status_reason": {
            "title": "Status Reason",
            "type": "string"
          },
          "created_by_schedule_id": {
            "title": "Created By Schedule Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "knowledge_base_id",
          "data_source_config"
        ],
        "title": "KnowledgeBaseUpload"
      },
      "KnowledgeBaseUploadScheduleRequest": {
        "properties": {
          "knowledge_base_data_source_id": {
            "type": "string",
            "title": "Knowledge Base Data Source Id",
            "can_patch": false
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "interval": {
            "type": "number",
            "title": "Interval"
          },
          "next_run_at": {
            "title": "Next Run At",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true,
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_data_source_id",
          "chunking_strategy_config",
          "interval"
        ],
        "title": "KnowledgeBaseUploadScheduleRequest"
      },
      "KnowledgeBaseUploadScheduleResponse": {
        "properties": {
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "can_patch": false
          },
          "knowledge_base_data_source_id": {
            "type": "string",
            "title": "Knowledge Base Data Source Id",
            "can_patch": false
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "status": {
            "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleStatus"
          },
          "status_reason": {
            "title": "Status Reason",
            "type": "string"
          },
          "interval": {
            "type": "number",
            "title": "Interval"
          },
          "next_run_at": {
            "title": "Next Run At",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_id",
          "knowledge_base_data_source_id",
          "chunking_strategy_config",
          "status",
          "interval",
          "id",
          "created_at",
          "updated_at",
          "created_by_user_id",
          "account_id"
        ],
        "title": "KnowledgeBaseUploadScheduleResponse"
      },
      "KnowledgeBaseUploadScheduleResponseWithViews": {
        "properties": {
          "knowledge_base_data_source": {
            "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
          },
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "can_patch": false
          },
          "knowledge_base_data_source_id": {
            "type": "string",
            "title": "Knowledge Base Data Source Id",
            "can_patch": false
          },
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "status": {
            "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleStatus"
          },
          "status_reason": {
            "title": "Status Reason",
            "type": "string"
          },
          "interval": {
            "type": "number",
            "title": "Interval"
          },
          "next_run_at": {
            "title": "Next Run At",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          }
        },
        "type": "object",
        "required": [
          "knowledge_base_id",
          "knowledge_base_data_source_id",
          "chunking_strategy_config",
          "status",
          "interval",
          "id",
          "created_at",
          "updated_at",
          "created_by_user_id",
          "account_id"
        ],
        "title": "KnowledgeBaseUploadScheduleResponseWithViews"
      },
      "KnowledgeBaseUploadScheduleStatus": {
        "type": "string",
        "enum": [
          "HEALTHY",
          "UNHEALTHY",
          "ERROR",
          "PAUSED"
        ],
        "title": "KnowledgeBaseUploadScheduleStatus"
      },
      "KnowledgeBaseUploadScheduleViewsOptions": {
        "type": "string",
        "enum": [
          "DataSource"
        ],
        "const": "DataSource",
        "title": "KnowledgeBaseUploadScheduleViewsOptions"
      },
      "KnowledgeBaseV2Upload": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the upload job."
          },
          "knowledge_base_id": {
            "type": "string",
            "title": "Knowledge Base Id",
            "description": "Unique identifier for the knowledge base."
          },
          "data_source_config": {
            "$ref": "#/components/schemas/DataSourceConfig",
            "description": "Configuration for the data source which describes where to find the data."
          },
          "chunking_strategy_config": {
            "description": "Configuration for the chunking strategy which describes how to chunk the data.",
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "created_at": {
            "title": "Created At",
            "description": "Timestamp at which the upload job was created.",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "description": "Timestamp at which the upload job was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "title": "Status",
            "description": "Status of the upload job. One of 'Pending', 'Running', 'Completed', 'Failed'.",
            "type": "string"
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Reason for the upload job's status.",
            "type": "string"
          },
          "created_by_schedule_id": {
            "title": "Created By Schedule Id",
            "description": "Id of the upload schedule that triggered this upload_id. Null if triggered manually.",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "knowledge_base_id",
          "data_source_config"
        ],
        "title": "KnowledgeBaseV2Upload"
      },
      "KnowledgeBaseView": {
        "type": "string",
        "enum": [
          "Connections",
          "ArtifactCount"
        ],
        "title": "KnowledgeBaseView"
      },
      "LLMAutoEvalMetadata": {
        "properties": {
          "cost": {
            "title": "Cost",
            "description": "The cost of the annotation in cents.",
            "type": "integer"
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens"
          },
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens"
          },
          "time_elapsed_s": {
            "type": "integer",
            "title": "Time Elapsed S",
            "description": "The time elapsed to generate this annotation in seconds."
          },
          "llm_reasoning": {
            "type": "string",
            "title": "Llm Reasoning",
            "description": "The reasoning the LLM gave for the annotation it provided."
          },
          "annotation_result_id": {
            "type": "string",
            "title": "Annotation Result Id",
            "description": "The ID of the associated annotation result."
          }
        },
        "type": "object",
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "time_elapsed_s",
          "llm_reasoning",
          "annotation_result_id"
        ],
        "title": "LLMAutoEvalMetadata"
      },
      "LLMEngineBatchCompletionsVendorConfiguration": {
        "properties": {
          "input_data_path": {
            "title": "Input Data Path",
            "description": "Path to the input file. The input file should be a JSON file of type List[CreateBatchCompletionsRequestContent].",
            "type": "string"
          },
          "output_data_path": {
            "type": "string",
            "title": "Output Data Path",
            "description": "Path to the output file. The output file will be a JSON file of type List[CompletionOutput]."
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Labels",
            "description": "Labels to attach to the batch inference job.",
            "default": {}
          },
          "data_parallelism": {
            "title": "Data Parallelism",
            "description": "Number of replicas to run the batch inference. More replicas are slower to schedule but faster to inference.",
            "default": 1,
            "type": "integer",
            "maximum": 64.0,
            "minimum": 1.0
          },
          "max_runtime_sec": {
            "title": "Max Runtime Sec",
            "description": "Maximum runtime of the batch inference in seconds. Default to one day.",
            "default": 86400,
            "type": "integer",
            "maximum": 172800.0,
            "minimum": 1.0
          },
          "priority": {
            "title": "Priority",
            "description": "Priority of the batch inference job. Default to None.",
            "type": "string"
          },
          "tool_config": {
            "description": "\nConfiguration for tool use.\nNOTE: this config is highly experimental and signature will change significantly in future iterations.",
            "$ref": "#/components/schemas/ToolConfig"
          },
          "content": {
            "$ref": "#/components/schemas/CreateBatchCompletionsV1RequestContent"
          },
          "model_config": {
            "$ref": "#/components/schemas/CreateBatchCompletionsV1ModelConfig"
          },
          "vendor": {
            "type": "string",
            "enum": [
              "LLMENGINE"
            ],
            "const": "LLMENGINE",
            "title": "Vendor",
            "default": "LLMENGINE"
          }
        },
        "type": "object",
        "required": [
          "output_data_path",
          "model_config"
        ],
        "title": "LLMEngineBatchCompletionsVendorConfiguration"
      },
      "LLMEngineDeploymentVendorConfiguration": {
        "properties": {
          "cpus": {
            "type": "integer",
            "title": "Cpus",
            "default": 3
          },
          "memory": {
            "type": "string",
            "title": "Memory",
            "default": "8Gi"
          },
          "storage": {
            "type": "string",
            "title": "Storage",
            "default": "16Gi"
          },
          "gpus": {
            "type": "integer",
            "title": "Gpus",
            "default": 0
          },
          "gpu_type": {
            "$ref": "#/components/schemas/GPUType"
          },
          "min_workers": {
            "type": "integer",
            "title": "Min Workers",
            "default": 0
          },
          "max_workers": {
            "type": "integer",
            "title": "Max Workers",
            "default": 1
          },
          "per_worker": {
            "type": "integer",
            "title": "Per Worker",
            "description": "The maximum number of concurrent requests that an individual worker can\nservice. Launch automatically scales the number of workers for the endpoint so that\neach worker is processing ``per_worker`` requests, subject to the limits defined by\n``min_workers`` and ``max_workers``.\n\n- If the average number of concurrent requests per worker is lower than\n``per_worker``, then the number of workers will be reduced. - Otherwise,\nif the average number of concurrent requests per worker is higher than\n``per_worker``, then the number of workers will be increased to meet the elevated\ntraffic.\n\nHere is our recommendation for computing ``per_worker``:\n\n1. Compute ``min_workers`` and ``max_workers`` per your minimum and maximum\nthroughput requirements. 2. Determine a value for the maximum number of\nconcurrent requests in the workload. Divide this number by ``max_workers``. Doing\nthis ensures that the number of workers will \"climb\" to ``max_workers``.",
            "default": 10
          },
          "vendor": {
            "type": "string",
            "enum": [
              "LLMENGINE"
            ],
            "const": "LLMENGINE",
            "title": "Vendor",
            "default": "LLMENGINE"
          },
          "high_priority": {
            "type": "boolean",
            "title": "High Priority",
            "default": false
          },
          "num_shards": {
            "type": "integer",
            "title": "Num Shards",
            "default": 4
          },
          "checkpoint_path": {
            "title": "Checkpoint Path",
            "type": "string"
          },
          "model_name": {
            "title": "Model Name",
            "type": "string"
          },
          "base_model_name": {
            "title": "Base Model Name",
            "type": "string"
          },
          "inference_framework_image_tag": {
            "title": "Inference Framework Image Tag",
            "type": "string"
          }
        },
        "type": "object",
        "title": "LLMEngineDeploymentVendorConfiguration"
      },
      "LLMEngineFineTuningJobConfiguration": {
        "properties": {
          "vendor": {
            "type": "string",
            "enum": [
              "LLMENGINE"
            ],
            "const": "LLMENGINE",
            "title": "Vendor",
            "default": "LLMENGINE"
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "additionalProperties": true
          },
          "wandb_config": {
            "title": "Wandb Config",
            "type": "object",
            "additionalProperties": true
          },
          "suffix": {
            "title": "Suffix",
            "type": "string"
          },
          "output": {
            "title": "Output",
            "type": "string"
          }
        },
        "type": "object",
        "title": "LLMEngineFineTuningJobConfiguration"
      },
      "LLMEngineModelCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Unique name to reference your model"
          },
          "model_type": {
            "type": "string",
            "enum": [
              "chat_completion"
            ],
            "const": "chat_completion",
            "title": "Model Type",
            "default": "chat_completion"
          },
          "model_vendor": {
            "type": "string",
            "enum": [
              "llmengine"
            ],
            "const": "llmengine",
            "title": "Model Vendor",
            "default": "llmengine"
          },
          "model_metadata": {
            "title": "Model Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "on_conflict": {
            "type": "string",
            "enum": [
              "error",
              "update"
            ],
            "title": "On Conflict",
            "default": "error"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/LLMEngineVendorConfiguration"
          }
        },
        "type": "object",
        "required": [
          "name",
          "vendor_configuration"
        ],
        "title": "LLMEngineModelCreateRequest"
      },
      "LLMEngineVendorConfiguration": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model"
          },
          "inference_framework_image_tag": {
            "type": "string",
            "title": "Inference Framework Image Tag",
            "default": "latest"
          },
          "nodes_per_worker": {
            "type": "integer",
            "title": "Nodes Per Worker",
            "default": 1
          },
          "min_workers": {
            "type": "integer",
            "title": "Min Workers",
            "default": 0
          },
          "max_workers": {
            "type": "integer",
            "title": "Max Workers",
            "default": 1
          },
          "per_worker": {
            "type": "integer",
            "title": "Per Worker",
            "default": 2
          },
          "num_shards": {
            "type": "integer",
            "title": "Num Shards",
            "default": 1
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Labels",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "default": "hugging_face"
          },
          "inference_framework": {
            "type": "string",
            "title": "Inference Framework",
            "default": "vllm"
          },
          "endpoint_type": {
            "type": "string",
            "title": "Endpoint Type",
            "default": "streaming"
          },
          "quantize": {
            "title": "Quantize",
            "type": "string"
          },
          "checkpoint_path": {
            "title": "Checkpoint Path",
            "type": "string"
          },
          "post_inference_hooks": {
            "title": "Post Inference Hooks",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cpus": {
            "title": "Cpus",
            "type": "integer"
          },
          "gpus": {
            "title": "Gpus",
            "type": "integer"
          },
          "memory": {
            "title": "Memory",
            "type": "string"
          },
          "gpu_type": {
            "title": "Gpu Type",
            "type": "string"
          },
          "storage": {
            "title": "Storage",
            "type": "string"
          },
          "high_priority": {
            "title": "High Priority",
            "default": false,
            "type": "boolean"
          },
          "default_callback_url": {
            "title": "Default Callback Url",
            "type": "string"
          },
          "public_inference": {
            "title": "Public Inference",
            "type": "boolean"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "model"
        ],
        "title": "LLMEngineVendorConfiguration"
      },
      "LargeTableChunking": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          }
        },
        "type": "object",
        "title": "LargeTableChunking"
      },
      "LastKMemoryStrategy": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "last_k"
            ],
            "const": "last_k",
            "title": "Name",
            "description": "Name of the memory strategy. Must be `last_k`.\n\nThis strategy truncates the message history to the last `k` messages. It is the simplest way to prevent the model's context limit from being exceeded. However, this strategy only allows the model to have short term memory. For longer term memory, please use one of the other strategies.",
            "default": "last_k"
          },
          "params": {
            "$ref": "#/components/schemas/LastKMemoryStrategyParams",
            "description": "Configuration parameters for the memory strategy."
          }
        },
        "type": "object",
        "required": [
          "params"
        ],
        "title": "Last K Memory Strategy"
      },
      "LastKMemoryStrategyParams": {
        "properties": {
          "k": {
            "type": "integer",
            "minimum": 1.0,
            "title": "K",
            "description": "The maximum number of previous messages to remember."
          }
        },
        "type": "object",
        "required": [
          "k"
        ],
        "title": "LastKMemoryStrategyParams"
      },
      "LaunchDeploymentVendorConfiguration": {
        "properties": {
          "min_workers": {
            "type": "integer",
            "title": "Min Workers",
            "default": 0
          },
          "max_workers": {
            "type": "integer",
            "title": "Max Workers",
            "default": 1
          },
          "per_worker": {
            "type": "integer",
            "title": "Per Worker",
            "description": "The maximum number of concurrent requests that an individual worker can\nservice. Launch automatically scales the number of workers for the endpoint so that\neach worker is processing ``per_worker`` requests, subject to the limits defined by\n``min_workers`` and ``max_workers``.\n\n- If the average number of concurrent requests per worker is lower than\n``per_worker``, then the number of workers will be reduced. - Otherwise,\nif the average number of concurrent requests per worker is higher than\n``per_worker``, then the number of workers will be increased to meet the elevated\ntraffic.\n\nHere is our recommendation for computing ``per_worker``:\n\n1. Compute ``min_workers`` and ``max_workers`` per your minimum and maximum\nthroughput requirements. 2. Determine a value for the maximum number of\nconcurrent requests in the workload. Divide this number by ``max_workers``. Doing\nthis ensures that the number of workers will \"climb\" to ``max_workers``.",
            "default": 10
          },
          "vendor": {
            "type": "string",
            "enum": [
              "LAUNCH"
            ],
            "const": "LAUNCH",
            "title": "Vendor",
            "default": "LAUNCH"
          }
        },
        "type": "object",
        "title": "LaunchDeploymentVendorConfiguration"
      },
      "LaunchEndpointProtocol": {
        "type": "string",
        "enum": [
          "SGP",
          "COHERE",
          "VLLM"
        ],
        "title": "LaunchEndpointProtocol"
      },
      "LaunchFineTuningJobConfiguration": {
        "properties": {
          "vendor": {
            "type": "string",
            "enum": [
              "LAUNCH"
            ],
            "const": "LAUNCH",
            "title": "Vendor",
            "default": "LAUNCH"
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "additionalProperties": true
          },
          "wandb_config": {
            "title": "Wandb Config",
            "type": "object",
            "additionalProperties": true
          },
          "suffix": {
            "title": "Suffix",
            "type": "string"
          },
          "output": {
            "title": "Output",
            "type": "string"
          }
        },
        "type": "object",
        "title": "LaunchFineTuningJobConfiguration"
      },
      "LaunchInferenceConfiguration": {
        "properties": {
          "timeout_seconds": {
            "title": "Timeout Seconds",
            "type": "integer"
          },
          "num_retries": {
            "title": "Num Retries",
            "type": "integer"
          }
        },
        "type": "object",
        "title": "LaunchInferenceConfiguration"
      },
      "LaunchModelBundleConfiguration": {
        "properties": {
          "registry": {
            "type": "string",
            "title": "Registry"
          },
          "repository": {
            "type": "string",
            "title": "Repository"
          },
          "tag": {
            "type": "string",
            "title": "Tag"
          },
          "predict_route": {
            "type": "string",
            "title": "Predict Route",
            "default": "/predict"
          },
          "command": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Command"
          },
          "streaming_predict_route": {
            "title": "Streaming Predict Route",
            "type": "string"
          },
          "streaming_command": {
            "title": "Streaming Command",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "request_schema": {
            "type": "object",
            "title": "Request Schema",
            "default": {},
            "additionalProperties": true
          },
          "response_schema": {
            "type": "object",
            "title": "Response Schema",
            "default": {},
            "additionalProperties": true
          },
          "env_vars": {
            "type": "object",
            "title": "Env Vars",
            "default": {},
            "additionalProperties": true
          },
          "readiness_delay": {
            "type": "integer",
            "title": "Readiness Delay",
            "default": 120
          },
          "healthcheck_route": {
            "type": "string",
            "title": "Healthcheck Route",
            "default": "/readyz"
          }
        },
        "type": "object",
        "required": [
          "registry",
          "repository",
          "tag",
          "command"
        ],
        "title": "LaunchModelBundleConfiguration"
      },
      "LaunchModelCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Unique name to reference your model"
          },
          "model_type": {
            "type": "string",
            "enum": [
              "generic"
            ],
            "const": "generic",
            "title": "Model Type",
            "default": "generic"
          },
          "model_vendor": {
            "type": "string",
            "enum": [
              "launch"
            ],
            "const": "launch",
            "title": "Model Vendor",
            "default": "launch"
          },
          "model_metadata": {
            "title": "Model Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "on_conflict": {
            "type": "string",
            "enum": [
              "error",
              "update"
            ],
            "title": "On Conflict",
            "default": "error"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__inference_models_api_models_no_gen__LaunchVendorConfiguration"
          }
        },
        "type": "object",
        "required": [
          "name",
          "vendor_configuration"
        ],
        "title": "LaunchModelCreateRequest"
      },
      "LaunchModelEndpointConfiguration": {
        "properties": {
          "endpoint_type": {
            "type": "string",
            "enum": [
              "async",
              "sync",
              "streaming"
            ],
            "title": "Endpoint Type",
            "default": "sync"
          },
          "cpus": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Cpus",
            "default": 3
          },
          "gpus": {
            "type": "integer",
            "title": "Gpus",
            "default": 0
          },
          "gpu_type": {
            "title": "Gpu Type",
            "type": "string",
            "enum": [
              "nvidia-tesla-t4",
              "nvidia-ampere-a10",
              "nvidia-ampere-a100",
              "nvidia-ampere-a100e",
              "nvidia-hopper-h100",
              "nvidia-hopper-h100-1g20gb",
              "nvidia-hopper-h100-3g40gb"
            ]
          },
          "memory": {
            "type": "string",
            "title": "Memory",
            "default": "8Gi"
          },
          "storage": {
            "type": "string",
            "title": "Storage",
            "default": "16Gi"
          },
          "min_workers": {
            "type": "integer",
            "title": "Min Workers",
            "default": 0
          },
          "max_workers": {
            "type": "integer",
            "title": "Max Workers",
            "default": 1
          },
          "per_worker": {
            "type": "integer",
            "title": "Per Worker",
            "default": 10
          },
          "high_priority": {
            "title": "High Priority",
            "default": false,
            "type": "boolean"
          },
          "labels": {
            "title": "Labels",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "public_inference": {
            "title": "Public Inference",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "title": "LaunchModelEndpointConfiguration"
      },
      "LegacyApplicationSpanCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "trace_id": {
            "type": "string",
            "maxLength": 38,
            "title": "Trace Id",
            "description": "id for grouping traces together, uuid is recommended"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "Reference to a parent span_id",
            "type": "string"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "input": {
            "title": "Input",
            "type": "object",
            "additionalProperties": true
          },
          "output": {
            "title": "Output",
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "default": "SUCCESS",
            "$ref": "#/components/schemas/ApplicationOperationStatus"
          },
          "type": {
            "title": "Type",
            "default": "STANDALONE",
            "type": "string"
          },
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "trace_id",
          "start_timestamp",
          "application_interaction_id",
          "application_variant_id"
        ],
        "title": "LegacyApplicationSpanCreateRequest"
      },
      "LegacyEvaluationConfigExpanded": {
        "properties": {
          "evaluation_type": {
            "$ref": "#/components/schemas/EvaluationConfigORMEvaluationTypeEnum"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "question_set": {
            "$ref": "#/components/schemas/LegacyQuestionSetForView"
          }
        },
        "type": "object",
        "required": [
          "evaluation_type",
          "question_set"
        ],
        "title": "LegacyEvaluationConfigExpanded"
      },
      "LegacyEvaluationEntity": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "total_test_case_result_count": {
            "type": "integer",
            "title": "Total Test Case Result Count",
            "description": "The total number of test case results for the evaluation"
          },
          "completed_test_case_result_count": {
            "type": "integer",
            "title": "Completed Test Case Result Count",
            "description": "The number of test case results that have been completed for the evaluation"
          },
          "annotation_config": {
            "description": "Annotation configuration for tasking",
            "can_patch": false,
            "$ref": "#/components/schemas/AnnotationConfig"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "metric_config": {
            "description": "Specifies the config for the metrics to be computed.",
            "can_patch": false,
            "$ref": "#/components/schemas/MetricConfig"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "description",
          "status",
          "application_spec_id",
          "total_test_case_result_count",
          "completed_test_case_result_count",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "LegacyEvaluationEntity"
      },
      "LegacyEvaluationResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "total_test_case_result_count": {
            "type": "integer",
            "title": "Total Test Case Result Count",
            "description": "The total number of test case results for the evaluation"
          },
          "completed_test_case_result_count": {
            "type": "integer",
            "title": "Completed Test Case Result Count",
            "description": "The number of test case results that have been completed for the evaluation"
          },
          "annotation_config": {
            "description": "Annotation configuration for tasking",
            "can_patch": false,
            "$ref": "#/components/schemas/AnnotationConfig"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "metric_config": {
            "description": "Specifies the config for the metrics to be computed.",
            "can_patch": false,
            "$ref": "#/components/schemas/MetricConfig"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "status",
          "application_spec_id",
          "total_test_case_result_count",
          "completed_test_case_result_count",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "LegacyEvaluationResponse"
      },
      "LegacyEvaluationResponseWithViews": {
        "properties": {
          "evaluation_datasets": {
            "title": "Evaluation Datasets",
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetResponse"
            },
            "type": "array"
          },
          "evaluation_config_expanded": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EvaluationConfigExpanded"
              },
              {
                "$ref": "#/components/schemas/LegacyEvaluationConfigExpanded"
              }
            ],
            "title": "Evaluation Config Expanded"
          },
          "async_jobs": {
            "title": "Async Jobs",
            "items": {
              "$ref": "#/components/schemas/AsyncJobForView"
            },
            "type": "array"
          },
          "application_spec": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models__ApplicationSpecResponse"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "The date and time that all test case results for the evaluation were completed for the evaluation in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "total_test_case_result_count": {
            "type": "integer",
            "title": "Total Test Case Result Count",
            "description": "The total number of test case results for the evaluation"
          },
          "completed_test_case_result_count": {
            "type": "integer",
            "title": "Completed Test Case Result Count",
            "description": "The number of test case results that have been completed for the evaluation"
          },
          "annotation_config": {
            "description": "Annotation configuration for tasking",
            "can_patch": false,
            "$ref": "#/components/schemas/AnnotationConfig"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "metric_config": {
            "description": "Specifies the config for the metrics to be computed.",
            "can_patch": false,
            "$ref": "#/components/schemas/MetricConfig"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "status",
          "application_spec_id",
          "total_test_case_result_count",
          "completed_test_case_result_count",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "LegacyEvaluationResponseWithViews"
      },
      "LegacyQuestionForView": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "description": "List of choices for the question. Required for CATEGORICAL questions.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "multi": {
            "title": "Multi",
            "description": "Whether the question allows multiple answers.",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "description": "Whether the question is required.",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "description": "Conditions for the question to be shown.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "id"
        ],
        "title": "LegacyQuestionForView"
      },
      "LegacyQuestionSetForView": {
        "properties": {
          "questions": {
            "items": {
              "$ref": "#/components/schemas/LegacyQuestionForView"
            },
            "type": "array",
            "title": "Questions"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          }
        },
        "type": "object",
        "required": [
          "questions"
        ],
        "title": "LegacyQuestionSetForView"
      },
      "LegacySpan": {
        "properties": {
          "workflow_id": {
            "type": "string",
            "title": "Workflow Id"
          },
          "node_id": {
            "type": "string",
            "title": "Node Id"
          },
          "operation_type": {
            "type": "string",
            "title": "Operation Type"
          },
          "start_timestamp": {
            "type": "string",
            "title": "Start Timestamp"
          },
          "operation_input": {
            "type": "string",
            "title": "Operation Input"
          },
          "operation_output": {
            "type": "string",
            "title": "Operation Output"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms"
          }
        },
        "type": "object",
        "required": [
          "workflow_id",
          "node_id",
          "operation_type",
          "start_timestamp",
          "operation_input",
          "operation_output",
          "duration_ms"
        ],
        "title": "LegacySpan"
      },
      "ListAutoGeneratedDraftTestCaseResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AutoGeneratedDraftTestCaseWithChunkInfoResponse"
            },
            "type": "array",
            "title": "Items",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "ListAutoGeneratedDraftTestCaseResponse"
      },
      "ListDeploymentPackagesResponse": {
        "properties": {
          "packages": {
            "items": {
              "$ref": "#/components/schemas/CatalogDeploymentPackageWithInstalledVersions"
            },
            "type": "array",
            "title": "Packages"
          }
        },
        "type": "object",
        "required": [
          "packages"
        ],
        "title": "ListDeploymentPackagesResponse"
      },
      "ListEvaluationDatasetGenerationJobsResponse": {
        "properties": {
          "generation_jobs": {
            "items": {
              "$ref": "#/components/schemas/GetEvaluationDatasetGenerationJobResponse"
            },
            "type": "array",
            "title": "Generation Jobs",
            "description": "List of evaluation dataset generation jobs."
          }
        },
        "type": "object",
        "required": [
          "generation_jobs"
        ],
        "title": "ListEvaluationDatasetGenerationJobsResponse"
      },
      "ListKnowledgeBaseEmbeddingModelsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseEmbeddingModelItem"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of embedding models available for knowledge base creation."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "ListKnowledgeBaseEmbeddingModelsResponse"
      },
      "ListKnowledgeBaseV2ArtifactsResponse": {
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ArtifactInfo"
            },
            "type": "array",
            "title": "Artifacts",
            "description": "List of artifacts."
          }
        },
        "type": "object",
        "required": [
          "artifacts"
        ],
        "title": "ListKnowledgeBaseV2ArtifactsResponse"
      },
      "ListKnowledgeBaseV2UploadsResponse": {
        "properties": {
          "uploads": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseV2Upload"
            },
            "type": "array",
            "title": "Uploads",
            "description": "List of knowledge base uploads."
          }
        },
        "type": "object",
        "required": [
          "uploads"
        ],
        "title": "ListKnowledgeBaseV2UploadsResponse"
      },
      "ListKnowledgeBasesResponseV2": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseItemV2"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of the names and IDs, embedding configurations, metadata, created and updated dates of your knowledge bases"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "ListKnowledgeBasesResponseV2"
      },
      "ListModelServerResponse": {
        "items": {
          "$ref": "#/components/schemas/ModelServerInfo"
        },
        "type": "array",
        "title": "ListModelServerResponse"
      },
      "ListModelsResponseV2": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelItemV2"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of the names and IDs, model providers, base model IDs of your finetuned models and un-finetuned public models."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "ListModelsResponseV2"
      },
      "LocalChunksSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "LocalChunks"
            ],
            "const": "LocalChunks",
            "title": "Source"
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name",
            "description": "The file name assigned to the artifact, containing a file extension. Adding an extension is mandatory, to allow detecting file types for text extraction."
          },
          "artifact_uri": {
            "type": "string",
            "title": "Artifact Uri",
            "description": "A unique identifier for an artifact within the knowledge base, such as full path in a directory or file system."
          },
          "deduplication_strategy": {
            "description": "Action to take if an artifact with the same name already exists in the knowledge base. Can be either Overwrite (default) or Fail.",
            "default": "Overwrite",
            "$ref": "#/components/schemas/DeduplicationStrategy"
          }
        },
        "type": "object",
        "required": [
          "source",
          "artifact_name",
          "artifact_uri"
        ],
        "title": "LocalChunksSourceConfig"
      },
      "LocalFileSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "LocalFile"
            ],
            "const": "LocalFile",
            "title": "Source"
          },
          "deduplication_strategy": {
            "description": "Action to take if an artifact with the same name already exists in the knowledge base. Can be either Overwrite (default) or Fail.",
            "default": "Overwrite",
            "$ref": "#/components/schemas/DeduplicationStrategy"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "LocalFileSourceConfig"
      },
      "Logprobs": {
        "properties": {
          "text_offset": {
            "title": "Text Offset",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "token_logprobs": {
            "title": "Token Logprobs",
            "items": {
              "type": "number"
            },
            "type": "array"
          },
          "tokens": {
            "title": "Tokens",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "top_logprobs": {
            "title": "Top Logprobs",
            "items": {
              "additionalProperties": {
                "type": "number"
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "Logprobs"
      },
      "MachineState": {
        "properties": {
          "current_node": {
            "type": "string",
            "title": "Current Node"
          },
          "state": {
            "type": "object",
            "title": "State",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "current_node",
          "state"
        ],
        "title": "MachineState"
      },
      "ManualEvaluationConfigRequest": {
        "properties": {
          "evaluation_type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "studio"
                ],
                "const": "studio"
              },
              {
                "type": "string",
                "enum": [
                  "human"
                ],
                "const": "human"
              }
            ],
            "title": "Evaluation Type",
            "description": "Evaluation type",
            "default": "studio"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "studio_project_id": {
            "title": "Studio Project Id",
            "type": "string"
          },
          "auto_evaluation_model": {
            "type": "null",
            "enum": [
              null
            ],
            "title": "Auto Evaluation Model",
            "description": "The name of the model to be used for auto-evaluation. Not applicable for manual evaluations."
          },
          "auto_evaluation_parameters": {
            "description": "Execution parameters for auto-evaluation",
            "$ref": "#/components/schemas/AutoEvaluationParameters"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "question_set_id",
          "account_id"
        ],
        "title": "ManualEvaluationConfigRequest"
      },
      "ManualEvaluationDatasetRequest": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "manual"
            ],
            "const": "manual",
            "title": "Type",
            "description": "Manually or automatically generated dataset",
            "default": "manual"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "account_id"
        ],
        "title": "ManualEvaluationDatasetRequest"
      },
      "MemoryStrategy": {
        "$ref": "#/components/schemas/LastKMemoryStrategy",
        "title": "MemoryStrategy"
      },
      "Message": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__UserMessage"
          },
          {
            "$ref": "#/components/schemas/ToolMessage"
          },
          {
            "$ref": "#/components/schemas/AgentMessage"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__SystemMessage"
          }
        ],
        "title": "Message",
        "discriminator": {
          "propertyName": "role",
          "mapping": {
            "agent": "#/components/schemas/AgentMessage",
            "system": "#/components/schemas/egp_api_backend__server__api__models__egp_models__SystemMessage",
            "tool": "#/components/schemas/ToolMessage",
            "user": "#/components/schemas/egp_api_backend__server__api__models__egp_models__UserMessage"
          }
        }
      },
      "MeteorScorerConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "meteor"
            ],
            "const": "meteor",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "MeteorScorerConfigWithItemLocator"
      },
      "MetricConfig": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/MetricItem"
            },
            "type": "array",
            "title": "Components"
          }
        },
        "type": "object",
        "required": [
          "components"
        ],
        "title": "MetricConfig"
      },
      "MetricEvaluationRequestWithItemLocators": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BleuScorerConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/MeteorScorerConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/CosineSimilarityScorerConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/F1ScorerConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/RougeScorer1ConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/RougeScorer2ConfigWithItemLocator"
          },
          {
            "$ref": "#/components/schemas/RougeScorerLConfigWithItemLocator"
          }
        ],
        "title": "MetricEvaluationRequestWithItemLocators",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "bleu": "#/components/schemas/BleuScorerConfigWithItemLocator",
            "cosine_similarity": "#/components/schemas/CosineSimilarityScorerConfigWithItemLocator",
            "f1": "#/components/schemas/F1ScorerConfigWithItemLocator",
            "meteor": "#/components/schemas/MeteorScorerConfigWithItemLocator",
            "rouge1": "#/components/schemas/RougeScorer1ConfigWithItemLocator",
            "rouge2": "#/components/schemas/RougeScorer2ConfigWithItemLocator",
            "rougeL": "#/components/schemas/RougeScorerLConfigWithItemLocator"
          }
        }
      },
      "MetricEvaluationTask": {
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "metric"
            ],
            "const": "metric",
            "title": "Task Type",
            "default": "metric"
          },
          "alias": {
            "title": "Alias",
            "description": "Alias to title the results column. Defaults to the `task_type`",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/MetricEvaluationRequestWithItemLocators"
          }
        },
        "type": "object",
        "required": [
          "configuration"
        ],
        "title": "MetricEvaluationTask"
      },
      "MetricID": {
        "type": "string",
        "enum": [
          "total_requests",
          "total_errors",
          "total_tokens",
          "average_latency",
          "p95_latency",
          "error_rate",
          "average_faithfulness",
          "average_relevance",
          "average_users",
          "aggregated_tokens",
          "feedback",
          "engagement_faithfulness",
          "engagement_relevance",
          "execution_input_response_tokens",
          "execution_average_latency_per_variant",
          "execution_error_rate",
          "execution_latency_percentile",
          "execution_average_latency_per_node",
          "total_guardrail_triggers",
          "guardrail_triggers_timeseries",
          "guardrail_severity_timeseries"
        ],
        "title": "MetricID"
      },
      "MetricItem": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MetricScorerType"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "mappings": {
            "title": "Mappings",
            "additionalProperties": {
              "$ref": "#/components/schemas/DataLoc"
            },
            "type": "object"
          },
          "params": {
            "title": "Params",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "type",
          "name"
        ],
        "title": "MetricItem"
      },
      "MetricScorerType": {
        "type": "string",
        "enum": [
          "rouge",
          "rouge1",
          "rouge2",
          "rougeL",
          "bleu",
          "meteor",
          "cosine_similarity",
          "f1"
        ],
        "title": "MetricScorerType"
      },
      "MetricValueEntity": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of metric being measured"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the metric being measured"
          },
          "output": {
            "type": "number",
            "title": "Output"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "name",
          "output"
        ],
        "title": "MetricValueEntity"
      },
      "ModelBundleConfiguration": {
        "properties": {
          "registry": {
            "type": "string",
            "title": "Registry"
          },
          "image": {
            "type": "string",
            "title": "Image"
          },
          "tag": {
            "type": "string",
            "title": "Tag"
          },
          "command": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Command"
          },
          "env": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Env"
          },
          "streaming_command": {
            "title": "Streaming Command",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "readiness_initial_delay_seconds": {
            "type": "integer",
            "title": "Readiness Initial Delay Seconds",
            "default": 120
          },
          "healthcheck_route": {
            "type": "string",
            "title": "Healthcheck Route",
            "default": "/readyz"
          },
          "predict_route": {
            "type": "string",
            "title": "Predict Route",
            "default": "/predict"
          },
          "streaming_predict_route": {
            "title": "Streaming Predict Route",
            "default": "/generate_streaming",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "registry",
          "image",
          "tag"
        ],
        "title": "ModelBundleConfiguration"
      },
      "ModelConfigurationPatchRequest": {
        "properties": {
          "model_metadata": {
            "title": "Model Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "vendor_configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PartialLaunchVendorConfiguration"
              },
              {
                "$ref": "#/components/schemas/PartialLLMEngineVendorConfiguration"
              }
            ],
            "title": "Vendor Configuration"
          }
        },
        "type": "object",
        "required": [
          "vendor_configuration"
        ],
        "title": "ModelConfigurationPatchRequest"
      },
      "ModelCreateRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/LaunchModelCreateRequest"
          },
          {
            "$ref": "#/components/schemas/LLMEngineModelCreateRequest"
          }
        ],
        "title": "ModelCreateRequest",
        "discriminator": {
          "propertyName": "model_vendor",
          "mapping": {
            "launch": "#/components/schemas/LaunchModelCreateRequest",
            "llmengine": "#/components/schemas/LLMEngineModelCreateRequest"
          }
        }
      },
      "ModelDefinition": {
        "properties": {
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "model name, for example `gpt-4o`"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/InferenceModelVendor",
            "description": "model vendor, for example `openai`"
          },
          "model_type": {
            "$ref": "#/components/schemas/InferenceModelType",
            "description": "model type, for example `chat_completion`"
          }
        },
        "type": "object",
        "required": [
          "model_name",
          "model_vendor",
          "model_type"
        ],
        "title": "ModelDefinition"
      },
      "ModelDeploymentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/DeploymentVendorConfiguration"
          },
          "deployment_metadata": {
            "title": "Deployment Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true,
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ModelDeploymentRequest"
      },
      "ModelDeploymentResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "model_endpoint_id": {
            "title": "Model Endpoint Id",
            "type": "string"
          },
          "model_instance_id": {
            "title": "Model Instance Id",
            "type": "string"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/DeploymentVendorConfiguration"
          },
          "deployment_metadata": {
            "title": "Deployment Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the model's deployment."
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id",
          "status"
        ],
        "title": "ModelDeploymentResponse"
      },
      "ModelEndpointType": {
        "type": "string",
        "enum": [
          "SYNC",
          "ASYNC",
          "STREAMING",
          "BATCH"
        ],
        "title": "ModelEndpointType",
        "description": "An enum representing the different types of model endpoint types supported.\n\nAttributes:\n    SYNC: Denotes that the model endpoint type is sync.\n    ASYNC: Denotes that the model endpoint type is async.\n    STREAMING: Denotes that the model endpoint type is streaming.\n    BATCH: Denotes that the model endpoint type is batch."
      },
      "ModelGroupRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "account_id"
        ],
        "title": "ModelGroupRequest"
      },
      "ModelGroupResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "ModelGroupResponse"
      },
      "ModelInstanceRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/ModelVendor"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "base_model_metadata": {
            "$ref": "#/components/schemas/BaseModelMetadata"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "model_card": {
            "title": "Model Card",
            "type": "string"
          },
          "training_data_card": {
            "title": "Training Data Card",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "model_template_id": {
            "title": "Model Template Id",
            "type": "string"
          },
          "model_group_id": {
            "title": "Model Group Id",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_type",
          "account_id"
        ],
        "title": "ModelInstanceRequest"
      },
      "ModelInstanceResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/ModelVendor"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "base_model_metadata": {
            "$ref": "#/components/schemas/BaseModelMetadata"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "model_card": {
            "title": "Model Card",
            "type": "string"
          },
          "training_data_card": {
            "title": "Training Data Card",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "model_template_id": {
            "title": "Model Template Id",
            "type": "string"
          },
          "model_group_id": {
            "title": "Model Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "request_schema": {
            "type": "object",
            "title": "Request Schema",
            "description": "JSON schema for the requests to the model instance",
            "additionalProperties": true
          },
          "response_schema": {
            "type": "object",
            "title": "Response Schema",
            "description": "JSON schema for the response to the model",
            "additionalProperties": true
          },
          "deployment_count": {
            "type": "integer",
            "title": "Deployment Count",
            "description": "Number of deployments of this model instance"
          },
          "supports_multi_turn": {
            "type": "boolean",
            "title": "Supports Multi Turn",
            "description": "True if a model supports multi-turn conversations natively"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_type",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id",
          "request_schema",
          "response_schema",
          "deployment_count",
          "supports_multi_turn"
        ],
        "title": "ModelInstanceResponse"
      },
      "ModelInstanceResponseWithViews": {
        "properties": {
          "model_group": {
            "$ref": "#/components/schemas/ModelGroupResponse"
          },
          "deployments": {
            "title": "Deployments",
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentResponse"
            },
            "type": "array"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/ModelVendor"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "base_model_metadata": {
            "$ref": "#/components/schemas/BaseModelMetadata"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "model_card": {
            "title": "Model Card",
            "type": "string"
          },
          "training_data_card": {
            "title": "Training Data Card",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "model_template_id": {
            "title": "Model Template Id",
            "type": "string"
          },
          "model_group_id": {
            "title": "Model Group Id",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "request_schema": {
            "type": "object",
            "title": "Request Schema",
            "description": "JSON schema for the requests to the model instance",
            "additionalProperties": true
          },
          "response_schema": {
            "type": "object",
            "title": "Response Schema",
            "description": "JSON schema for the response to the model",
            "additionalProperties": true
          },
          "deployment_count": {
            "type": "integer",
            "title": "Deployment Count",
            "description": "Number of deployments of this model instance"
          },
          "supports_multi_turn": {
            "type": "boolean",
            "title": "Supports Multi Turn",
            "description": "True if a model supports multi-turn conversations natively"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_type",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id",
          "request_schema",
          "response_schema",
          "deployment_count",
          "supports_multi_turn"
        ],
        "title": "ModelInstanceResponseWithViews"
      },
      "ModelInstanceViewsOptions": {
        "type": "string",
        "enum": [
          "Deployments",
          "ModelGroup"
        ],
        "title": "ModelInstanceViewsOptions"
      },
      "ModelItemV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "A human-readable name to identify the model"
          },
          "model_provider": {
            "$ref": "#/components/schemas/ModelProvider",
            "description": "A model provider."
          },
          "display_name": {
            "title": "Display Name",
            "description": "Model name for use with UI's built on top of SGP",
            "type": "string"
          },
          "model_provider_metadata": {
            "description": "Metadata associated with the model provider.",
            "$ref": "#/components/schemas/ModelProviderMetadata"
          },
          "base_model_id": {
            "title": "Base Model Id",
            "description": "The identifier of the base model.",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the model"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The account the model belongs to."
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_provider",
          "base_model_id",
          "id",
          "account_id"
        ],
        "title": "ModelItemV2"
      },
      "ModelParameters": {
        "properties": {
          "temperature": {
            "title": "Temperature",
            "description": "What sampling temperature to use, between [0, 1]. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Setting temperature=0.0 will enable fully deterministic (greedy) sampling. Temperature is ignored for OpenAI reasoning models.",
            "default": 0.2,
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "stop_sequences": {
            "title": "Stop Sequences",
            "description": "List of up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 4
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. If not, specified, max_tokens will be determined based on the model used: \n| Model API family | Model API default | EGP applied default |\n| --- | --- | --- |\n| OpenAI Completions | [`16`](https://platform.openai.com/docs/api-reference/completions/create#max_tokens) | `context window - prompt size` |\n| OpenAI Chat Completions | [`context window - prompt size`](https://platform.openai.com/docs/api-reference/chat/create#max_tokens) | `context window - prompt size` |\n| LLM Engine | [`max_new_tokens`](https://github.com/scaleapi/launch-python-client/blob/207adced1c88c1c2907266fa9dd1f1ff3ec0ea5b/launch/client.py#L2910) parameter is required | `100` |\n| Anthropic Claude 2 | [`max_tokens_to_sample`](https://docs.anthropic.com/claude/reference/complete_post) parameter is required | `10000` |\n",
            "type": "integer"
          },
          "topP": {
            "title": "Topp",
            "description": "The cumulative probability cutoff for token selection. Lower values mean sampling from a smaller, more top-weighted nucleus. Available for models from Anthropic, Google, Mistral, LLM Engine, and OpenAI.",
            "type": "number"
          },
          "topK": {
            "title": "Topk",
            "description": "Sample from the k most likely next tokens at each step. Lower k focuses on higher probability tokens. Available for models from Anthropic, Google, and LLM Engine.",
            "type": "integer"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Penalize tokens based on how much they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models from LLM Engine, and OpenAI",
            "type": "number"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Penalize tokens based on if they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models from LLM Engine, and OpenAI.",
            "type": "number"
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "The effort level for the model to reason. Available for models from OpenAI.",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          }
        },
        "type": "object",
        "title": "ModelParameters"
      },
      "ModelProvider": {
        "type": "string",
        "enum": [
          "llm_engine",
          "open_ai",
          "anthropic",
          "cohere"
        ],
        "title": "ModelProvider"
      },
      "ModelProviderMetadata": {
        "properties": {
          "external_id": {
            "title": "External Id",
            "description": "An external ID required by some specific model providers.",
            "type": "string"
          }
        },
        "type": "object",
        "title": "ModelProviderMetadata"
      },
      "ModelRankParams": {
        "properties": {
          "model_deployment_id": {
            "type": "string",
            "title": "Model Deployment Id",
            "description": "The model deployment id of a custom model to use for reranking"
          },
          "base_model_name": {
            "title": "Base Model Name",
            "description": "The name of a base model to use for reranking",
            "type": "string"
          },
          "model_params": {
            "title": "Model Params",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "ModelRankParams"
      },
      "ModelRankStrategy": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "model"
            ],
            "const": "model",
            "title": "Method",
            "description": "Use a model from Models API for ranking.",
            "default": "model"
          },
          "params": {
            "$ref": "#/components/schemas/ModelRankParams",
            "description": "The parameters needed for ranking.",
            "default": {
              "model_params": {}
            }
          }
        },
        "type": "object",
        "title": "ModelRankStrategy"
      },
      "ModelServerInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "model_server_id": {
            "type": "string",
            "title": "Model Server Id"
          },
          "model_deployment_id": {
            "title": "Model Deployment Id",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "alias": {
            "title": "Alias",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "name",
          "model_server_id",
          "account_id"
        ],
        "title": "ModelServerInfo",
        "description": "Model server information.\nname: The name of the model server. Only used for display purposes.\nmodel_server_id: The ID of the model server.\nmodel_deployment_id: The ID of the model deployment being used as the backend.\naccount_id: The ID of the account that owns the model server.\nalias: An alias for the model server. If configured the model server can be accessed via the alias instead of the model server ID. i.e /models/server/alias/{alias}/execute"
      },
      "ModelTemplateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "endpoint_type": {
            "$ref": "#/components/schemas/ModelEndpointType"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__model_vendor_configuration__LaunchVendorConfiguration"
          },
          "model_creation_parameters_schema": {
            "description": "The field names and types of available parameter fields which may be specified during model creation",
            "$ref": "#/components/schemas/ParameterSchema"
          },
          "model_request_parameters_schema": {
            "description": "The field names and types of available parameter fields which may be specified in a model execution API's `model_request_parameters` field.",
            "$ref": "#/components/schemas/ParameterSchema"
          },
          "endpoint_protocol": {
            "description": "The name of the calling convention expected by the Launch model endpoint",
            "$ref": "#/components/schemas/LaunchEndpointProtocol"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "endpoint_type",
          "model_type",
          "vendor_configuration",
          "account_id"
        ],
        "title": "ModelTemplateRequest"
      },
      "ModelTemplateResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "endpoint_type": {
            "$ref": "#/components/schemas/ModelEndpointType"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__model_vendor_configuration__LaunchVendorConfiguration"
          },
          "model_creation_parameters_schema": {
            "description": "The field names and types of available parameter fields which may be specified during model creation",
            "$ref": "#/components/schemas/ParameterSchema"
          },
          "model_request_parameters_schema": {
            "description": "The field names and types of available parameter fields which may be specified in a model execution API's `model_request_parameters` field.",
            "$ref": "#/components/schemas/ParameterSchema"
          },
          "endpoint_protocol": {
            "description": "The name of the calling convention expected by the Launch model endpoint",
            "$ref": "#/components/schemas/LaunchEndpointProtocol"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "name",
          "endpoint_type",
          "model_type",
          "vendor_configuration",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "ModelTemplateResponse"
      },
      "ModelType": {
        "type": "string",
        "enum": [
          "COMPLETION",
          "CHAT_COMPLETION",
          "AGENT",
          "EMBEDDING",
          "RERANKING",
          "GENERIC",
          "BUNDLE"
        ],
        "title": "ModelType",
        "description": "An enum representing the different types of models supported.\n\nAttributes:\n    COMPLETION: Denotes that the model type is completion.\n    CHAT_COMPLETION: Denotes that the model type is chat completion.\n    AGENT: Denotes that the model type is agent.\n    EMBEDDING: Denotes that the model type is embedding.\n    RERANKING: Denotes that the model type is reranking.\n    GENERIC: Denotes that the model type is generic.\n    BUNDLE: \"Not to be used directly - type to surface a model bundle in the UI - TODO: Explicitly type a bundle"
      },
      "ModelUpdateRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/DefaultModelPatchRequest"
          },
          {
            "$ref": "#/components/schemas/ModelConfigurationPatchRequest"
          },
          {
            "$ref": "#/components/schemas/SwapNamesModelPatchRequest"
          }
        ],
        "title": "ModelUpdateRequest"
      },
      "ModelUsageResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "type": "array",
            "title": "Data",
            "description": "The list of data points for the given period"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Start Date",
            "description": "The start date of the data points. Equal to the first date in the data list"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "End Date",
            "description": "The end date of the data points. Equal to the last date in the data list"
          }
        },
        "type": "object",
        "required": [
          "data",
          "start_date",
          "end_date"
        ],
        "title": "ModelUsageResponse"
      },
      "ModelVendor": {
        "type": "string",
        "enum": [
          "OPENAI",
          "COHERE",
          "GOOGLE",
          "VERTEX_AI",
          "ANTHROPIC",
          "LAUNCH",
          "LLMENGINE",
          "BEDROCK",
          "OTHER"
        ],
        "title": "ModelVendor",
        "description": "An enum representing the different types of model vendors supported.\n\nAttributes:\n    OPENAI: Denotes that the model vendor is OpenAI.\n    COHERE: Denotes that the model vendor is Cohere.\n    GOOGLE: Denotes that the model vendor is Google.\n    ANTHROPIC: Denotes that the model vendor is Anthropic.\n    LLMENGINE: Denotes that the model vendor is LLM Engine.\n    OTHER: Denotes that the model vendor is Other."
      },
      "NodeDocsResponse": {
        "properties": {
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/NodeSchema"
            },
            "type": "array",
            "title": "Nodes"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "nodes"
        ],
        "title": "NodeDocsResponse",
        "description": "Represents the response from the agents service for node documentation."
      },
      "NodeInput": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "docs": {
            "title": "Docs",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationConfigurationValueType"
          },
          "required": {
            "type": "boolean",
            "title": "Required"
          },
          "is_hidden": {
            "title": "Is Hidden",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "name",
          "label",
          "docs",
          "type",
          "required"
        ],
        "title": "NodeInput"
      },
      "NodeOutput": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "docs": {
            "title": "Docs",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ApplicationConfigurationValueType"
          }
        },
        "type": "object",
        "required": [
          "name",
          "label",
          "docs",
          "type"
        ],
        "title": "NodeOutput"
      },
      "NodeSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "operation_type": {
            "type": "string",
            "title": "Operation Type"
          },
          "config": {
            "$ref": "#/components/schemas/SchemaSection"
          },
          "inputs": {
            "$ref": "#/components/schemas/SchemaSection"
          },
          "output": {
            "$ref": "#/components/schemas/SchemaSection"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "type",
          "operation_type",
          "config",
          "inputs",
          "output"
        ],
        "title": "NodeSchema",
        "description": "Represents an entire node definition.\n\nAttributes:\n    name (str): The name of the node.\n    type (str): The type of the node.\n    operation_type (str): The type of operation the node performs.\n    config (SchemaSection): Configuration details for the node.\n    inputs (SchemaSection): Input schema for the node.\n    output (SchemaSection): Output schema for the node."
      },
      "NodeSchemaId": {
        "type": "string",
        "enum": [
          "text_input_schema",
          "text_output_schema",
          "knowledge_base_input_schema",
          "knowledge_base_schema",
          "multi_knowledge_base_input_schema",
          "multi_knowledge_base_schema",
          "reranker_schema",
          "prompt_engineering_schema",
          "completion_model_input_schema",
          "completion_model_schema",
          "external_endpoint_schema",
          "document_input_schema",
          "map_reduce_schema",
          "document_search_schema",
          "document_prompt_schema"
        ],
        "title": "NodeSchemaId"
      },
      "NumberConfigurationFieldSchema": {
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "docs": {
            "title": "Docs",
            "type": "string"
          },
          "default": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "title": "Default"
          },
          "is_advanced_configuration": {
            "title": "Is Advanced Configuration",
            "default": false,
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "NUMBER"
            ],
            "const": "NUMBER",
            "title": "Type",
            "default": "NUMBER"
          },
          "validation_rules": {
            "$ref": "#/components/schemas/NumberValidationRule"
          },
          "is_float": {
            "title": "Is Float",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "label",
          "docs",
          "validation_rules"
        ],
        "title": "NumberConfigurationFieldSchema"
      },
      "NumberQuestionOptions": {
        "properties": {
          "min": {
            "title": "Min",
            "description": "Minimum value for the number",
            "type": "number"
          },
          "max": {
            "title": "Max",
            "description": "Maximum value for the number",
            "type": "number"
          }
        },
        "type": "object",
        "title": "NumberQuestionOptions"
      },
      "NumberValidationRule": {
        "properties": {
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "min_value": {
            "title": "Min Value",
            "type": "integer"
          },
          "max_value": {
            "title": "Max Value",
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "required",
          "min_value",
          "max_value"
        ],
        "title": "NumberValidationRule"
      },
      "OfflineApplicationConfiguration": {
        "properties": {
          "metadata": {
            "title": "Metadata",
            "description": "User defined metadata about the application",
            "type": "object",
            "additionalProperties": true
          },
          "guardrail_config": {
            "description": "Guardrail configuration for the application",
            "$ref": "#/components/schemas/GuardrailConfiguration"
          }
        },
        "type": "object",
        "title": "OfflineApplicationConfiguration"
      },
      "OfflineApplicationEvaluationDataset": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "integer",
            "title": "Evaluation Dataset Version Num"
          },
          "output_count": {
            "type": "integer",
            "title": "Output Count"
          },
          "test_case_count": {
            "type": "integer",
            "title": "Test Case Count"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "evaluation_dataset": {
            "$ref": "#/components/schemas/EvaluationDatasetResponse"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "output_count",
          "test_case_count",
          "id",
          "created_at",
          "evaluation_dataset"
        ],
        "title": "OfflineApplicationEvaluationDataset"
      },
      "OfflineApplicationVariantRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/OfflineApplicationConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "OFFLINE"
            ],
            "const": "OFFLINE",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "account_id"
        ],
        "title": "OfflineApplicationVariantRequest"
      },
      "OfflineApplicationVariantRequestWithoutSpecId": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/OfflineApplicationConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "OFFLINE"
            ],
            "const": "OFFLINE",
            "title": "Version"
          },
          "application_spec_id": {
            "title": "Application Spec Id",
            "type": "string"
          },
          "draft": {
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true,
            "type": "boolean"
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "configuration",
          "version",
          "account_id"
        ],
        "title": "OfflineApplicationVariantRequestWithoutSpecId"
      },
      "OfflineApplicationVariantResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/OfflineApplicationConfiguration"
          },
          "version": {
            "type": "string",
            "enum": [
              "OFFLINE"
            ],
            "const": "OFFLINE",
            "title": "Version"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "draft",
          "account_id",
          "created_at",
          "updated_at"
        ],
        "title": "OfflineApplicationVariantResponse"
      },
      "OpenAIFineTuningJobConfiguration": {
        "properties": {
          "vendor": {
            "type": "string",
            "enum": [
              "OPENAI"
            ],
            "const": "OPENAI",
            "title": "Vendor",
            "default": "OPENAI"
          },
          "hyperparameters": {
            "title": "Hyperparameters",
            "type": "object",
            "additionalProperties": true
          },
          "suffix": {
            "title": "Suffix",
            "type": "string"
          }
        },
        "type": "object",
        "title": "OpenAIFineTuningJobConfiguration"
      },
      "OperationMetadataKeys": {
        "type": "string",
        "enum": [
          "tokens_used",
          "prompt_tokens",
          "response_tokens"
        ],
        "title": "OperationMetadataKeys",
        "description": "Enum representing keys used in operation metadata."
      },
      "OperationStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "ERROR"
        ],
        "title": "OperationStatus",
        "description": "Enum representing the status of an operation."
      },
      "OperationType": {
        "type": "string",
        "enum": [
          "COMPLETION",
          "RERANKING",
          "RETRIEVAL",
          "CUSTOM"
        ],
        "title": "OperationType",
        "description": "Enum representing the type of operation performed."
      },
      "Organization": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Organization name"
          },
          "has_restricted_roles": {
            "type": "boolean",
            "title": "Has Restricted Roles",
            "description": "Flag indicating whether this organization has enabled restricting access to general roles"
          },
          "domains": {
            "title": "Domains",
            "description": "List of organization domains",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "has_restricted_roles"
        ],
        "title": "Organization"
      },
      "OutputUploadAttestationRequest": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "attestation_type": {
            "type": "string",
            "enum": [
              "output_upload"
            ],
            "const": "output_upload",
            "title": "Attestation Type"
          },
          "application_id": {
            "type": "string",
            "title": "Application Id"
          },
          "application_name": {
            "type": "string",
            "title": "Application Name"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "application_variant_name": {
            "type": "string",
            "title": "Application Variant Name"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "attestation_type",
          "application_id",
          "application_name",
          "application_variant_id",
          "application_variant_name"
        ],
        "title": "OutputUploadAttestationRequest"
      },
      "PackageVersionConstraint": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SemVerMinVersion"
          },
          {
            "$ref": "#/components/schemas/TimestampMinVersion"
          },
          {
            "$ref": "#/components/schemas/ExactVersion"
          }
        ],
        "title": "PackageVersionConstraint",
        "discriminator": {
          "propertyName": "version_constraint_type",
          "mapping": {
            "EXACT_VERSION": "#/components/schemas/ExactVersion",
            "SEMVER_MIN": "#/components/schemas/SemVerMinVersion",
            "TIMESTAMP_MIN": "#/components/schemas/TimestampMinVersion"
          }
        }
      },
      "PageRange": {
        "properties": {
          "end": {
            "title": "End",
            "type": "integer"
          },
          "start": {
            "title": "Start",
            "type": "integer"
          }
        },
        "type": "object",
        "title": "PageRange"
      },
      "ApplicationVariantList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationVariant"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "ApplicationVariantList"
      },
      "ApplicationList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "ApplicationList"
      },
      "DatasetItemList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/DatasetItem"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "DatasetItemList"
      },
      "DatasetList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "DatasetList"
      },
      "EvaluationItemList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/EvaluationItem"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "EvaluationItemList"
      },
      "EvaluationList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Evaluation"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "EvaluationList"
      },
      "FileList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "FileList"
      },
      "InferenceModelList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/InferenceModel"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "InferenceModelList"
      },
      "KnowledgeBaseDataSourceList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseDataSource"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "KnowledgeBaseDataSourceList"
      },
      "QuestionSetList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuestionSet"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "QuestionSetList"
      },
      "QuestionList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Question"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "QuestionList"
      },
      "SpanList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "SpanList"
      },
      "TestCaseOutputList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/TestCaseOutput"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "TestCaseOutputList"
      },
      "UserResourceList": {
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "list"
            ],
            "const": "list",
            "title": "Object",
            "default": "list"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserResource"
            },
            "type": "array",
            "title": "Items"
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items to return.",
            "default": 100
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total of items that match the query. This is greater than or equal to the number of items returned."
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Whether there are more items left to be fetched."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "has_more"
        ],
        "title": "UserResourceList"
      },
      "PaginatedAccountGeneralRoleMembershipWithEntity": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountGeneralRoleMembershipWithEntity"
            },
            "type": "array",
            "title": "Paginated list of AccountGeneralRoleMembershipWithEntity",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountGeneralRoleMembershipWithEntity"
      },
      "PaginatedAccountGeneralRoleRestriction": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountGeneralRoleRestriction"
            },
            "type": "array",
            "title": "Paginated list of AccountGeneralRoleRestriction",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountGeneralRoleRestriction"
      },
      "PaginatedAccountGroupGeneralRoleMembershipWithEntity": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountGroupGeneralRoleMembershipWithEntity"
            },
            "type": "array",
            "title": "Paginated list of AccountGroupGeneralRoleMembershipWithEntity",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountGroupGeneralRoleMembershipWithEntity"
      },
      "PaginatedAccountGroupGeneralRoleRestriction": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountGroupGeneralRoleRestriction"
            },
            "type": "array",
            "title": "Paginated list of AccountGroupGeneralRoleRestriction",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountGroupGeneralRoleRestriction"
      },
      "PaginatedAccountGroup": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountGroup"
            },
            "type": "array",
            "title": "Paginated list of AccountGroup",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountGroup"
      },
      "PaginatedAccountV2": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AccountV2"
            },
            "type": "array",
            "title": "Paginated list of AccountV2",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedAccountV2"
      },
      "PaginatedApplicationDeploymentResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationDeploymentResponse"
            },
            "type": "array",
            "title": "Paginated list of ApplicationDeploymentResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationDeploymentResponse"
      },
      "PaginatedApplicationInteractionEntry": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationInteractionEntry"
            },
            "type": "array",
            "title": "Paginated list of ApplicationInteractionEntry",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationInteractionEntry"
      },
      "PaginatedApplicationSpecResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse"
            },
            "type": "array",
            "title": "Paginated list of ApplicationSpecResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationSpecResponse"
      },
      "PaginatedApplicationSpecWithEvaluationCount": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationSpecWithEvaluationCount"
            },
            "type": "array",
            "title": "Paginated list of ApplicationSpecWithEvaluationCount",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationSpecWithEvaluationCount"
      },
      "PaginatedApplicationTestCaseOutputResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationTestCaseOutputResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of ApplicationTestCaseOutputResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationTestCaseOutputResponseWithViews"
      },
      "PaginatedApplicationVariantReportWithScoresResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ApplicationVariantReportWithScoresResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of ApplicationVariantReportWithScoresResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationVariantReportWithScoresResponseWithViews"
      },
      "PaginatedApplicationVariantResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse"
            },
            "type": "array",
            "title": "Paginated list of ApplicationVariantResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedApplicationVariantResponse"
      },
      "PaginatedArtifactInfo": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ArtifactInfo"
            },
            "type": "array",
            "title": "Paginated list of ArtifactInfo",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedArtifactInfo"
      },
      "PaginatedChatThreadEntity": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ChatThreadEntity"
            },
            "type": "array",
            "title": "Paginated list of ChatThreadEntity",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedChatThreadEntity"
      },
      "PaginatedChunkWithStatus": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ChunkWithStatus"
            },
            "type": "array",
            "title": "Paginated list of ChunkWithStatus",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedChunkWithStatus"
      },
      "PaginatedContributorMetricsResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ContributorMetricsResponse"
            },
            "type": "array",
            "title": "Paginated list of ContributorMetricsResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedContributorMetricsResponse"
      },
      "PaginatedEvaluationConfigResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/EvaluationConfigResponse"
            },
            "type": "array",
            "title": "Paginated list of EvaluationConfigResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedEvaluationConfigResponse"
      },
      "PaginatedEvaluationDatasetResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of EvaluationDatasetResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedEvaluationDatasetResponseWithViews"
      },
      "PaginatedEvaluationDatasetVersionResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/EvaluationDatasetVersionResponse"
            },
            "type": "array",
            "title": "Paginated list of EvaluationDatasetVersionResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedEvaluationDatasetVersionResponse"
      },
      "PaginatedEvaluationEntry": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/EvaluationEntry"
            },
            "type": "array",
            "title": "Paginated list of EvaluationEntry",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedEvaluationEntry"
      },
      "PaginatedFineTuningJobResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FineTuningJobResponse"
            },
            "type": "array",
            "title": "Paginated list of FineTuningJobResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedFineTuningJobResponse"
      },
      "PaginatedKnowledgeBaseDataSourceResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseDataSourceResponse"
            },
            "type": "array",
            "title": "Paginated list of KnowledgeBaseDataSourceResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedKnowledgeBaseDataSourceResponse"
      },
      "PaginatedKnowledgeBaseItemV2": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseItemV2"
            },
            "type": "array",
            "title": "Paginated list of KnowledgeBaseItemV2",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedKnowledgeBaseItemV2"
      },
      "PaginatedKnowledgeBaseUploadScheduleResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseUploadScheduleResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of KnowledgeBaseUploadScheduleResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedKnowledgeBaseUploadScheduleResponseWithViews"
      },
      "PaginatedKnowledgeBaseUpload": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/KnowledgeBaseUpload"
            },
            "type": "array",
            "title": "Paginated list of KnowledgeBaseUpload",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedKnowledgeBaseUpload"
      },
      "PaginatedLegacyEvaluationResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LegacyEvaluationResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of LegacyEvaluationResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedLegacyEvaluationResponseWithViews"
      },
      "PaginatedModelDeploymentResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelDeploymentResponse"
            },
            "type": "array",
            "title": "Paginated list of ModelDeploymentResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedModelDeploymentResponse"
      },
      "PaginatedModelGroupResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelGroupResponse"
            },
            "type": "array",
            "title": "Paginated list of ModelGroupResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedModelGroupResponse"
      },
      "PaginatedModelInstanceResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelInstanceResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of ModelInstanceResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedModelInstanceResponseWithViews"
      },
      "PaginatedModelTemplateResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ModelTemplateResponse"
            },
            "type": "array",
            "title": "Paginated list of ModelTemplateResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedModelTemplateResponse"
      },
      "PaginatedQuestionResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuestionResponse"
            },
            "type": "array",
            "title": "Paginated list of QuestionResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedQuestionResponse"
      },
      "PaginatedQuestionSetResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/QuestionSetResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of QuestionSetResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedQuestionSetResponseWithViews"
      },
      "PaginatedStudioProjectResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/StudioProjectResponse"
            },
            "type": "array",
            "title": "Paginated list of StudioProjectResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedStudioProjectResponse"
      },
      "PaginatedTestCaseResultResponseWithViews": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TestCaseResultResponseWithViews"
            },
            "type": "array",
            "title": "Paginated list of TestCaseResultResponseWithViews",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedTestCaseResultResponseWithViews"
      },
      "PaginatedTestCaseResultResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TestCaseResultResponse"
            },
            "type": "array",
            "title": "Paginated list of TestCaseResultResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedTestCaseResultResponse"
      },
      "PaginatedTestCaseVersionResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse"
            },
            "type": "array",
            "title": "Paginated list of TestCaseVersionResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedTestCaseVersionResponse"
      },
      "PaginatedThemeResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ThemeResponse"
            },
            "type": "array",
            "title": "Paginated list of ThemeResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedThemeResponse"
      },
      "PaginatedTrainingDatasetResponse": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/TrainingDatasetResponse"
            },
            "type": "array",
            "title": "Paginated list of TrainingDatasetResponse",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedTrainingDatasetResponse"
      },
      "PaginatedUserGroupUserMembership": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserGroupUserMembership"
            },
            "type": "array",
            "title": "Paginated list of UserGroupUserMembership",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedUserGroupUserMembership"
      },
      "PaginatedUserGroup": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "type": "array",
            "title": "Paginated list of UserGroup",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedUserGroup"
      },
      "PaginatedUserV2Details": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserV2Details"
            },
            "type": "array",
            "title": "Paginated list of UserV2Details",
            "description": "The data returned for the current page."
          },
          "total_item_count": {
            "type": "integer",
            "title": "Total Item Count",
            "description": "The total number of items of the query"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page",
            "description": "The current page number."
          },
          "items_per_page": {
            "type": "integer",
            "title": "Items Per Page",
            "description": "The number of items per page."
          }
        },
        "type": "object",
        "required": [
          "items",
          "total_item_count",
          "current_page",
          "items_per_page"
        ],
        "title": "PaginatedUserV2Details"
      },
      "ParameterBindings": {
        "properties": {
          "bindings": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            },
            "type": "object",
            "title": "Bindings"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "bindings"
        ],
        "title": "ParameterBindings"
      },
      "ParameterSchema": {
        "properties": {
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/ParameterSchemaField"
            },
            "type": "array",
            "title": "Parameters"
          }
        },
        "type": "object",
        "required": [
          "parameters"
        ],
        "title": "ParameterSchema"
      },
      "ParameterSchemaField": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "str"
                ],
                "const": "str"
              },
              {
                "type": "string",
                "enum": [
                  "int"
                ],
                "const": "int"
              },
              {
                "type": "string",
                "enum": [
                  "float"
                ],
                "const": "float"
              },
              {
                "type": "string",
                "enum": [
                  "bool"
                ],
                "const": "bool"
              }
            ],
            "title": "Type"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "required": {
            "type": "boolean",
            "title": "Required"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type",
          "description",
          "required"
        ],
        "title": "ParameterSchemaField"
      },
      "ParseDocumentResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/GenericAsyncJobStatusEnum",
            "description": "The status of the parse document workflow"
          },
          "message": {
            "title": "Message",
            "description": "The message of the parse document workflow",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "description": "The content of the parsed document",
            "type": "object",
            "additionalProperties": true
          },
          "workflow_id": {
            "title": "Workflow Id",
            "description": "The id of the workflow",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ParseDocumentResponse"
      },
      "ParseRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "The id of the file to parse"
          },
          "config": {
            "$ref": "#/components/schemas/ReductoProcessingOptions",
            "description": "Configuration options for the parser"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "ParseRequest"
      },
      "PartialApplicationDeploymentRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialApplicationDeploymentRequest"
      },
      "PartialApplicationSpecRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "The name of the Application Spec",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "The description of the Application Spec",
            "type": "string"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application spec should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "restore": {
            "type": "boolean",
            "enum": [
              false
            ],
            "const": false,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialApplicationSpecRequest"
      },
      "PartialAutoGeneratedDraftTestCaseRequest": {
        "properties": {
          "schema_type": {
            "title": "Schema Type",
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION"
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              }
            ],
            "title": "Test Case Data",
            "description": "The data for the test case in a format matching the provided schema_type"
          },
          "approved": {
            "title": "Approved",
            "description": "Boolean to track whether or not the draft test case is approved",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialAutoGeneratedDraftTestCaseRequest"
      },
      "PartialDatasetRequestBase": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialDatasetRequestBase"
      },
      "PartialKnowledgeBaseDataSourceRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "data_source_auth_config": {
            "$ref": "#/components/schemas/DataSourceAuthConfig"
          },
          "tagging_information": {
            "can_patch": true,
            "$ref": "#/components/schemas/TaggingInformationAll"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialKnowledgeBaseDataSourceRequest"
      },
      "PartialKnowledgeBaseUploadScheduleRequest": {
        "properties": {
          "chunking_strategy_config": {
            "$ref": "#/components/schemas/ChunkingStrategyConfig"
          },
          "interval": {
            "title": "Interval",
            "type": "number"
          },
          "next_run_at": {
            "title": "Next Run At",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialKnowledgeBaseUploadScheduleRequest"
      },
      "PartialLLMEngineVendorConfiguration": {
        "properties": {
          "model": {
            "title": "Model",
            "type": "string"
          },
          "inference_framework_image_tag": {
            "title": "Inference Framework Image Tag",
            "type": "string"
          },
          "nodes_per_worker": {
            "title": "Nodes Per Worker",
            "type": "integer"
          },
          "min_workers": {
            "title": "Min Workers",
            "type": "integer"
          },
          "max_workers": {
            "title": "Max Workers",
            "type": "integer"
          },
          "per_worker": {
            "title": "Per Worker",
            "type": "integer"
          },
          "num_shards": {
            "title": "Num Shards",
            "type": "integer"
          },
          "labels": {
            "title": "Labels",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "inference_framework": {
            "title": "Inference Framework",
            "type": "string"
          },
          "endpoint_type": {
            "title": "Endpoint Type",
            "type": "string"
          },
          "quantize": {
            "title": "Quantize",
            "type": "string"
          },
          "checkpoint_path": {
            "title": "Checkpoint Path",
            "type": "string"
          },
          "post_inference_hooks": {
            "title": "Post Inference Hooks",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cpus": {
            "title": "Cpus",
            "type": "integer"
          },
          "gpus": {
            "title": "Gpus",
            "type": "integer"
          },
          "memory": {
            "title": "Memory",
            "type": "string"
          },
          "gpu_type": {
            "title": "Gpu Type",
            "type": "string"
          },
          "storage": {
            "title": "Storage",
            "type": "string"
          },
          "high_priority": {
            "title": "High Priority",
            "type": "boolean"
          },
          "default_callback_url": {
            "title": "Default Callback Url",
            "type": "string"
          },
          "public_inference": {
            "title": "Public Inference",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialLLMEngineVendorConfiguration"
      },
      "PartialLaunchModelBundleConfiguration": {
        "properties": {
          "registry": {
            "title": "Registry",
            "type": "string"
          },
          "repository": {
            "title": "Repository",
            "type": "string"
          },
          "tag": {
            "title": "Tag",
            "type": "string"
          },
          "predict_route": {
            "title": "Predict Route",
            "type": "string"
          },
          "command": {
            "title": "Command",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "streaming_predict_route": {
            "title": "Streaming Predict Route",
            "type": "string"
          },
          "streaming_command": {
            "title": "Streaming Command",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "request_schema": {
            "title": "Request Schema",
            "type": "object",
            "additionalProperties": true
          },
          "response_schema": {
            "title": "Response Schema",
            "type": "object",
            "additionalProperties": true
          },
          "env_vars": {
            "title": "Env Vars",
            "type": "object",
            "additionalProperties": true
          },
          "readiness_delay": {
            "title": "Readiness Delay",
            "type": "integer"
          },
          "healthcheck_route": {
            "title": "Healthcheck Route",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialLaunchModelBundleConfiguration"
      },
      "PartialLaunchModelEndpointConfiguration": {
        "properties": {
          "endpoint_type": {
            "title": "Endpoint Type",
            "type": "string",
            "enum": [
              "async",
              "sync",
              "streaming"
            ]
          },
          "cpus": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Cpus"
          },
          "gpus": {
            "title": "Gpus",
            "type": "integer"
          },
          "gpu_type": {
            "title": "Gpu Type",
            "type": "string",
            "enum": [
              "nvidia-tesla-t4",
              "nvidia-ampere-a10",
              "nvidia-ampere-a100",
              "nvidia-ampere-a100e",
              "nvidia-hopper-h100",
              "nvidia-hopper-h100-1g20gb",
              "nvidia-hopper-h100-3g40gb"
            ]
          },
          "memory": {
            "title": "Memory",
            "type": "string"
          },
          "storage": {
            "title": "Storage",
            "type": "string"
          },
          "min_workers": {
            "title": "Min Workers",
            "type": "integer"
          },
          "max_workers": {
            "title": "Max Workers",
            "type": "integer"
          },
          "per_worker": {
            "title": "Per Worker",
            "type": "integer"
          },
          "high_priority": {
            "title": "High Priority",
            "type": "boolean"
          },
          "labels": {
            "title": "Labels",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "public_inference": {
            "title": "Public Inference",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialLaunchModelEndpointConfiguration"
      },
      "PartialLaunchVendorConfiguration": {
        "properties": {
          "model_image": {
            "$ref": "#/components/schemas/PartialLaunchModelBundleConfiguration"
          },
          "model_infra": {
            "$ref": "#/components/schemas/PartialLaunchModelEndpointConfiguration"
          }
        },
        "type": "object",
        "title": "PartialLaunchVendorConfiguration"
      },
      "PartialModelDeploymentRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "vendor_configuration": {
            "$ref": "#/components/schemas/DeploymentVendorConfiguration"
          },
          "deployment_metadata": {
            "title": "Deployment Metadata",
            "type": "object",
            "additionalProperties": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialModelDeploymentRequest"
      },
      "PartialModelGroupRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialModelGroupRequest"
      },
      "PartialModelInstanceRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "display_name": {
            "title": "Display Name",
            "type": "string"
          },
          "model_vendor": {
            "$ref": "#/components/schemas/ModelVendor"
          },
          "model_type": {
            "$ref": "#/components/schemas/ModelType"
          },
          "base_model_id": {
            "title": "Base Model Id",
            "type": "string"
          },
          "base_model_metadata": {
            "$ref": "#/components/schemas/BaseModelMetadata"
          },
          "model_creation_parameters": {
            "title": "Model Creation Parameters",
            "type": "object",
            "additionalProperties": true
          },
          "model_card": {
            "title": "Model Card",
            "type": "string"
          },
          "training_data_card": {
            "title": "Training Data Card",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "model_template_id": {
            "title": "Model Template Id",
            "type": "string"
          },
          "model_group_id": {
            "title": "Model Group Id",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialModelInstanceRequest"
      },
      "PartialPatchEvaluationRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "application_spec_id": {
            "title": "Application Spec Id",
            "type": "string"
          },
          "application_variant_id": {
            "title": "Application Variant Id",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config": {
            "title": "Evaluation Config",
            "type": "object",
            "additionalProperties": true
          },
          "evaluation_config_id": {
            "title": "Evaluation Config Id",
            "description": "The ID of the associated evaluation config.",
            "type": "string"
          },
          "question_id_to_annotation_config": {
            "title": "Question Id To Annotation Config",
            "description": "Specifies the annotation configuration to use for specific questions.",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotationConfig"
            },
            "type": "object"
          },
          "annotation_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotationConfigRequestBase"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigGenerationRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigMultiturnUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigSummarizationUseCaseRequest"
              },
              {
                "$ref": "#/components/schemas/AnnotationConfigTranslationUseCaseRequest"
              }
            ],
            "title": "Annotation Config",
            "description": "Annotation configuration for tasking"
          },
          "evaluation_type": {
            "title": "Evaluation Type",
            "description": "If llm_benchmark is provided, the evaluation will be updated to a hybrid evaluation. No-op on existing hybrid evaluations, and not available for studio evaluations.",
            "type": "string",
            "enum": [
              "llm_benchmark"
            ],
            "const": "llm_benchmark"
          },
          "restore": {
            "type": "boolean",
            "enum": [
              false
            ],
            "const": false,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialPatchEvaluationRequest"
      },
      "PartialQuestionSetRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "question_ids": {
            "title": "Question Ids",
            "description": "IDs of questions in the question set",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "restore": {
            "type": "boolean",
            "enum": [
              false
            ],
            "const": false,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialQuestionSetRequest"
      },
      "PartialStudioProjectRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "description": "The name of the Studio Project",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "description": "The description of the Studio Project",
            "type": "string"
          },
          "studio_api_key": {
            "title": "Studio Api Key",
            "description": "Your API key for Studio, can be updated with the PATCH endpoint",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialStudioProjectRequest"
      },
      "PartialTestCaseResultRequest": {
        "properties": {
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum"
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "title": "Application Spec Id",
            "type": "string"
          },
          "evaluation_dataset_version_num": {
            "title": "Evaluation Dataset Version Num",
            "type": "string"
          },
          "test_case_id": {
            "title": "Test Case Id",
            "type": "string"
          },
          "test_case_evaluation_data": {
            "title": "Test Case Evaluation Data",
            "type": "object",
            "additionalProperties": true
          },
          "result": {
            "title": "Result",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "type": "integer"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialTestCaseResultRequest"
      },
      "PartialTestCaseVersionRequest": {
        "properties": {
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              },
              {
                "$ref": "#/components/schemas/SchemaFlexible"
              }
            ],
            "title": "Test Case Data"
          },
          "chat_history": {
            "title": "Chat History",
            "type": "object",
            "additionalProperties": true
          },
          "test_case_metadata": {
            "title": "Test Case Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "restore": {
            "type": "boolean",
            "enum": [
              false
            ],
            "const": false,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PartialTestCaseVersionRequest"
      },
      "Partial_EvaluationUpdateRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tags": {
            "title": "Tags",
            "description": "The tags associated with the entity",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Partial_EvaluationUpdateRequest"
      },
      "Partial_QuestionSetRequestBase": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Partial_QuestionSetRequestBase"
      },
      "PatchApplicationVariantConfiguration": {
        "properties": {
          "metadata": {
            "title": "Metadata",
            "description": "The user-defined application variant metadata.",
            "type": "object",
            "additionalProperties": true
          },
          "params": {
            "title": "Params",
            "description": "Configuration sent to agent service."
          },
          "raw_configuration": {
            "title": "Raw Configuration",
            "description": "The raw configuration string for the application variant.",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string",
            "enum": [
              "WORKFLOW",
              "PLAN",
              "STATE_MACHINE"
            ]
          }
        },
        "type": "object",
        "title": "PatchApplicationVariantConfiguration"
      },
      "PatchApplicationVariantGuardrail": {
        "properties": {
          "guardrail_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Guardrail Ids",
            "description": "List of guardrail IDs to save on the application variant",
            "can_patch": true
          }
        },
        "type": "object",
        "required": [
          "guardrail_ids"
        ],
        "title": "PatchApplicationVariantGuardrail"
      },
      "PatchApplicationVariantRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/PatchApplicationVariantConfiguration"
          }
        },
        "type": "object",
        "title": "PatchApplicationVariantRequest"
      },
      "PatchArtifactRequest": {
        "properties": {
          "tags": {
            "title": "Tags",
            "description": "Tags to associate with the artifact. Will overwrite existing tags.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "PatchArtifactRequest"
      },
      "PatchEvaluationDatasetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "restore": {
            "type": "boolean",
            "enum": [
              false
            ],
            "const": false,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "PatchEvaluationDatasetRequest"
      },
      "PatchGuardrailRequest": {
        "properties": {
          "is_archived": {
            "title": "Is Archived",
            "description": "Flag to indicate whether the guardrail is archived.",
            "type": "boolean"
          }
        },
        "type": "object",
        "title": "PatchGuardrailRequest"
      },
      "PatchKnowledgeBaseRequestV2": {
        "properties": {
          "knowledge_base_name": {
            "title": "Knowledge Base Name",
            "description": "The name of the knowledge base",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Metadata associated with the knowledge base",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "PatchKnowledgeBaseRequestV2"
      },
      "PermissionLevelType": {
        "type": "string",
        "enum": [
          "read",
          "edit",
          "manage"
        ],
        "title": "PermissionLevelType",
        "description": "NOTE: The order of the permissions is important.\nComparisons between permission levels are done using the index of the enum value.\nie: READ < EDIT < MANAGE\nThis is used to determine if a user has permission to access a resource.\nWith the following implementation:\n    READ = \"read\"\n    EDIT = \"edit\"\n    MANAGE = \"manage\"\nRead will have index 0, Edit will have index 1, and Manage will have index 2, etc.\n\nPlease keep this in mind when adding new permission levels."
      },
      "PermissionsCreateRequest": {
        "properties": {
          "resource_type": {
            "$ref": "#/components/schemas/ResourcePermissionType",
            "description": "Type of resource to apply permissions to, for example `knowledge_base`"
          },
          "resource_id": {
            "type": "string",
            "title": "Resource Id",
            "description": "Identifier of the resource to apply permissions to"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ResourcePermission"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": [
          "resource_type",
          "resource_id",
          "permissions"
        ],
        "title": "PermissionsCreateRequest"
      },
      "PermissionsUpdateRequest": {
        "properties": {
          "resource_type": {
            "$ref": "#/components/schemas/ResourcePermissionType",
            "description": "Type of resource to apply permissions to, for example `knowledge_base`"
          },
          "resource_id": {
            "type": "string",
            "title": "Resource Id",
            "description": "Identifier of the resource to apply permissions to"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/ResourcePermission"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": [
          "resource_type",
          "resource_id",
          "permissions"
        ],
        "title": "PermissionsUpdateRequest"
      },
      "PreChunkedStrategyConfig": {
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "pre_chunked"
            ],
            "const": "pre_chunked",
            "title": "Strategy"
          }
        },
        "type": "object",
        "required": [
          "strategy"
        ],
        "title": "PreChunkedStrategyConfig",
        "description": "Only compliant with the .chunks file type"
      },
      "PromptTokensDetails": {
        "properties": {
          "audio_tokens": {
            "title": "Audio Tokens",
            "type": "integer"
          },
          "cached_tokens": {
            "title": "Cached Tokens",
            "type": "integer"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "PromptTokensDetails"
      },
      "PromptVariable": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "optional": {
            "type": "boolean",
            "title": "Optional",
            "default": false
          },
          "data_loc": {
            "$ref": "#/components/schemas/DataLoc"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_loc"
        ],
        "title": "PromptVariable"
      },
      "PropertySchema": {
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "default": {
            "title": "Default"
          },
          "anyOf": {
            "title": "Anyof",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "items": {
            "title": "Items"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "PropertySchema",
        "description": "Represents an individual property inside `config`, `inputs`, or `output`.\n\nAttributes:\n    type (Optional[str]): The type of the property. If null, the type can have multiple values as specified in `anyOf`.\n    description (Optional[str]): A brief description of the property.\n    title (Optional[str]): The title of the property.\n    default (Optional[Any]): The default value of the property.\n    anyOf (Optional[List[Dict[str, Any]]]): A list of dictionaries specifying multiple possible schemas for the property. If null, the property can only have the type specified in `type`.\n    items (Optional[Any]): Specifies the type of items if the property is an array."
      },
      "PublishEvaluationDatasetDraftResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether or not the evaluation dataset was successfully published"
          },
          "autogenerated_draft_test_cases": {
            "items": {
              "$ref": "#/components/schemas/ApproveAutoGeneratedDraftTestCaseResponse"
            },
            "type": "array",
            "title": "Autogenerated Draft Test Cases",
            "description": "List of responses for each of the input draft test cases."
          }
        },
        "type": "object",
        "required": [
          "success",
          "autogenerated_draft_test_cases"
        ],
        "title": "PublishEvaluationDatasetDraftResponse"
      },
      "QueryKnowledgeBaseRequestV2": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "The natural language query to be answered by referencing the data ingested into the knowledge base"
          },
          "top_k": {
            "type": "integer",
            "maximum": 10000.0,
            "exclusiveMinimum": 0.0,
            "title": "Top K",
            "description": "Number of chunks to return. Must be greater than 0 if specified. If not specified, all chunks will be returned."
          },
          "include_embeddings": {
            "type": "boolean",
            "title": "Include Embeddings",
            "description": "Whether or not to include the embeddings for each chunk",
            "default": true
          },
          "metadata_filters": {
            "title": "Metadata Filters",
            "description": "Optional filter by metadata fields, encoded as a JSON object",
            "type": "object",
            "additionalProperties": true
          },
          "wildcard_filters": {
            "title": "Wildcard Filters",
            "description": "Optional wildcard filter for fields. Only fields that are part of the metadata will be accepted.",
            "additionalProperties": {
              "$ref": "#/components/schemas/QueryWildcardFilterItem"
            },
            "type": "object"
          },
          "verbose": {
            "type": "boolean",
            "title": "Verbose",
            "description": "Enable or disable verbose logging",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "query",
          "top_k"
        ],
        "title": "QueryKnowledgeBaseRequestV2"
      },
      "QueryKnowledgeBaseResponseV2": {
        "properties": {
          "chunks": {
            "items": {
              "$ref": "#/components/schemas/ChunkV2"
            },
            "type": "array",
            "title": "Chunks",
            "description": "An ordered list of the k most similar chunks and their similarity scores from most to least similar"
          },
          "started_at": {
            "title": "Started At",
            "description": "Timestamp at which the query was begun by the server.",
            "type": "string",
            "format": "date-time"
          },
          "completed_at": {
            "title": "Completed At",
            "description": "Timestamp at which the query was completed by the server.",
            "type": "string",
            "format": "date-time"
          },
          "request_id": {
            "title": "Request Id",
            "description": "query request ID for verbose logging",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "chunks"
        ],
        "title": "QueryKnowledgeBaseResponseV2"
      },
      "QueryWildcardFilterItem": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Wildcard filter string"
          },
          "case_insensitive": {
            "type": "boolean",
            "title": "Case Insensitive",
            "description": "Check case on wildcard string",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "value"
        ],
        "title": "QueryWildcardFilterItem"
      },
      "Question": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "question"
            ],
            "const": "question",
            "title": "Object",
            "default": "question"
          },
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "QuestionAutoEvaluationRequestWithItemLocator": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model specified as `model_vendor/model_name`"
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              },
              {
                "$ref": "#/components/schemas/ItemLocatorTemplate"
              }
            ],
            "title": "Prompt"
          },
          "question_id": {
            "type": "string",
            "title": "Question Id",
            "description": "question to be evaluated"
          }
        },
        "type": "object",
        "required": [
          "model",
          "prompt",
          "question_id"
        ],
        "title": "QuestionAutoEvaluationRequestWithItemLocator"
      },
      "QuestionAutoEvaluationTask": {
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "question_auto_evaluation"
            ],
            "const": "question_auto_evaluation",
            "title": "Task Type",
            "default": "question_auto_evaluation"
          },
          "alias": {
            "title": "Alias",
            "description": "Alias to title the results column. Defaults to the `task_type`",
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/QuestionAutoEvaluationRequestWithItemLocator"
          }
        },
        "type": "object",
        "required": [
          "configuration"
        ],
        "title": "QuestionAutoEvaluationTask"
      },
      "QuestionCreateRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt"
        ],
        "title": "QuestionCreateRequest"
      },
      "QuestionCreateRequestWithConfig": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default"
          },
          "override_config": {
            "description": "Specifies additional configurations to use for the question in the context of the question set. For example, `{required: true}` sets the question as required. Writes to the question_id_to_config field on the response",
            "can_patch": false,
            "$ref": "#/components/schemas/QuestionSetQuestionConfig"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt"
        ],
        "title": "QuestionCreateRequestWithConfig"
      },
      "QuestionEntity": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum",
            "description": "The type of question"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "description": "List of choices for the question. Required for CATEGORICAL questions.",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "description": "Options for rating questions.",
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "description": "Options for number questions.",
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "description": "Options for free text questions.",
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "description": "Whether the question allows multiple answers.",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "description": "Whether the question is displayed as a dropdown in the UI.",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "description": "[To be deprecated in favor of question set question_id_to_config] Whether the question is required.",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "description": "Conditions for the question to be shown.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default",
            "description": "The default value for the question."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "QuestionEntity"
      },
      "QuestionHybridEvalMetric": {
        "properties": {
          "question_type": {
            "type": "string",
            "title": "Question Type"
          },
          "is_conditional_question": {
            "type": "boolean",
            "title": "Is Conditional Question"
          },
          "question_title": {
            "type": "string",
            "title": "Question Title"
          },
          "evaluation_question": {
            "type": "string",
            "title": "Evaluation Question"
          },
          "choices": {
            "title": "Choices",
            "items": {},
            "type": "array"
          },
          "agreement_rate": {
            "type": "number",
            "title": "Agreement Rate"
          },
          "num_correct": {
            "type": "integer",
            "title": "Num Correct"
          },
          "num_wrong": {
            "type": "integer",
            "title": "Num Wrong"
          },
          "num_inconclusive": {
            "type": "integer",
            "title": "Num Inconclusive"
          },
          "num_free_text": {
            "type": "integer",
            "title": "Num Free Text"
          },
          "total_tokens": {
            "type": "number",
            "title": "Total Tokens"
          },
          "total_time": {
            "type": "number",
            "title": "Total Time"
          }
        },
        "type": "object",
        "required": [
          "question_type",
          "is_conditional_question",
          "question_title",
          "evaluation_question",
          "agreement_rate",
          "num_correct",
          "num_wrong",
          "num_inconclusive",
          "num_free_text",
          "total_tokens",
          "total_time"
        ],
        "title": "QuestionHybridEvalMetric"
      },
      "QuestionIDWithConfiguration": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "override_config": {
            "description": "Specifies additional configurations to use for the question in the context of the question set. For example, `{required: true}` sets the question as required. Writes to the question_id_to_config field on the response",
            "can_patch": false,
            "$ref": "#/components/schemas/QuestionSetQuestionConfig"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "QuestionIDWithConfiguration"
      },
      "QuestionInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "question_set_id": {
            "type": "string",
            "title": "Question Set Id"
          },
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "question_set_id",
          "type"
        ],
        "title": "QuestionInfo"
      },
      "QuestionORMTypeEnum": {
        "type": "string",
        "enum": [
          "categorical",
          "free_text",
          "rating",
          "number"
        ],
        "title": "QuestionORMTypeEnum"
      },
      "QuestionRequest": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum",
            "description": "The type of question"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "description": "List of choices for the question. Required for CATEGORICAL questions.",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "description": "Options for rating questions.",
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "description": "Options for number questions.",
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "description": "Options for free text questions.",
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "description": "Whether the question allows multiple answers.",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "description": "Whether the question is displayed as a dropdown in the UI.",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "description": "[To be deprecated in favor of question set question_id_to_config] Whether the question is required.",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "description": "Conditions for the question to be shown.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default",
            "description": "The default value for the question."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "account_id"
        ],
        "title": "QuestionRequest"
      },
      "QuestionResponse": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum",
            "description": "The type of question"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "description": "List of choices for the question. Required for CATEGORICAL questions.",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "description": "Options for rating questions.",
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "description": "Options for number questions.",
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "description": "Options for free text questions.",
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "description": "Whether the question allows multiple answers.",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "description": "Whether the question is displayed as a dropdown in the UI.",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "description": "[To be deprecated in favor of question set question_id_to_config] Whether the question is required.",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "description": "Conditions for the question to be shown.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default",
            "description": "The default value for the question."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "QuestionResponse"
      },
      "QuestionSet": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "question_set"
            ],
            "const": "question_set",
            "title": "Object",
            "default": "question_set"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "instructions": {
            "title": "Instructions",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "archived_at": {
            "title": "Archived At",
            "type": "string",
            "format": "date-time"
          },
          "questions": {
            "title": "Questions",
            "description": "Questions in the question set",
            "items": {
              "$ref": "#/components/schemas/QuestionWithConfig"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "QuestionSetCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "questions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/QuestionCreateRequestWithConfig"
                },
                {
                  "$ref": "#/components/schemas/QuestionIDWithConfiguration"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array",
            "title": "Questions",
            "description": "IDs of existing questions in the question set or new questions to create. You can also optionally specify configurations for each question. Example: [`question_id`, {'id': 'question_id2', 'configuration': {...}}, {'title': 'New question', ...}]"
          }
        },
        "type": "object",
        "required": [
          "name",
          "questions"
        ],
        "title": "QuestionSetCreateRequest"
      },
      "QuestionSetEntity": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "description": "Specifies additional configurations to use for specific questions in the context of the question set. For example, `{<question_a_id>: {required: true}, <question_b_id>: {required: true}}` sets two questions as required.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "QuestionSetEntity"
      },
      "QuestionSetQuestionConfig": {
        "properties": {
          "required": {
            "title": "Required",
            "description": "Whether the question is required. False by default.",
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object",
        "title": "QuestionSetQuestionConfig"
      },
      "QuestionSetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "description": "Specifies additional configurations to use for specific questions in the context of the question set. For example, `{<question_a_id>: {required: true}, <question_b_id>: {required: true}}` sets two questions as required.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "question_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Question Ids",
            "description": "IDs of questions in the question set"
          }
        },
        "type": "object",
        "required": [
          "name",
          "account_id",
          "question_ids"
        ],
        "title": "QuestionSetRequest"
      },
      "QuestionSetResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "description": "Specifies additional configurations to use for specific questions in the context of the question set. For example, `{<question_a_id>: {required: true}, <question_b_id>: {required: true}}` sets two questions as required.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "QuestionSetResponse"
      },
      "QuestionSetResponseWithViews": {
        "properties": {
          "questions": {
            "title": "Questions",
            "items": {
              "$ref": "#/components/schemas/QuestionResponse"
            },
            "type": "array"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "description": "Specifies additional configurations to use for specific questions in the context of the question set. For example, `{<question_a_id>: {required: true}, <question_b_id>: {required: true}}` sets two questions as required.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "QuestionSetResponseWithViews"
      },
      "QuestionSetUpdateRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Partial_QuestionSetRequestBase"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "QuestionSetUpdateRequest"
      },
      "QuestionSetViews": {
        "type": "string",
        "enum": [
          "questions"
        ],
        "const": "questions",
        "title": "QuestionSetViews"
      },
      "QuestionSetViewsOptions": {
        "type": "string",
        "enum": [
          "Questions"
        ],
        "const": "Questions",
        "title": "QuestionSetViewsOptions"
      },
      "QuestionSetWithQuestions": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "question_id_to_config": {
            "title": "Question Id To Config",
            "description": "Specifies additional configurations to use for specific questions in the context of the question set. For example, `{<question_a_id>: {required: true}, <question_b_id>: {required: true}}` sets two questions as required.",
            "can_patch": false,
            "additionalProperties": {
              "$ref": "#/components/schemas/QuestionSetQuestionConfig"
            },
            "type": "object"
          },
          "instructions": {
            "title": "Instructions",
            "description": "Instructions to answer questions",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "questions": {
            "items": {
              "$ref": "#/components/schemas/QuestionResponse"
            },
            "type": "array",
            "title": "Questions"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id",
          "questions"
        ],
        "title": "QuestionSetWithQuestions"
      },
      "QuestionWithConfig": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "question"
            ],
            "const": "question",
            "title": "Object",
            "default": "question"
          },
          "type": {
            "$ref": "#/components/schemas/QuestionORMTypeEnum"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "choices": {
            "title": "Choices",
            "items": {
              "$ref": "#/components/schemas/CategoricalChoice"
            },
            "type": "array"
          },
          "ratingOptions": {
            "$ref": "#/components/schemas/RatingQuestionOptions"
          },
          "numberOptions": {
            "$ref": "#/components/schemas/NumberQuestionOptions"
          },
          "freeTextOptions": {
            "$ref": "#/components/schemas/FreeTextQuestionOptions"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          },
          "dropdown": {
            "title": "Dropdown",
            "type": "boolean"
          },
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "conditions": {
            "title": "Conditions",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "default": {
            "title": "Default"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          },
          "override_config": {
            "description": "Specifies additional configurations to use for the question in the context of the question set. For example, `{required: true}` sets the question as required. Writes to the question_id_to_config field on the response",
            "can_patch": false,
            "$ref": "#/components/schemas/QuestionSetQuestionConfig"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "prompt",
          "id",
          "created_at",
          "created_by_user_id"
        ]
      },
      "RankStrategy": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CrossEncoderRankStrategy"
          },
          {
            "$ref": "#/components/schemas/RougeRankStrategy"
          },
          {
            "$ref": "#/components/schemas/ModelRankStrategy"
          },
          {
            "$ref": "#/components/schemas/AzureAIFoundryRankStrategy"
          }
        ],
        "title": "RankStrategy",
        "discriminator": {
          "propertyName": "method",
          "mapping": {
            "azure_ai_foundry": "#/components/schemas/AzureAIFoundryRankStrategy",
            "cross_encoder": "#/components/schemas/CrossEncoderRankStrategy",
            "model": "#/components/schemas/ModelRankStrategy",
            "rouge": "#/components/schemas/RougeRankStrategy"
          }
        }
      },
      "RatingQuestionOptions": {
        "properties": {
          "minLabel": {
            "type": "string",
            "title": "Minlabel",
            "description": "Minimum value for the rating"
          },
          "maxLabel": {
            "type": "string",
            "title": "Maxlabel",
            "description": "Maximum value for the rating"
          },
          "scaleSteps": {
            "type": "integer",
            "title": "Scalesteps",
            "description": "Number of steps in the rating scale"
          }
        },
        "type": "object",
        "required": [
          "minLabel",
          "maxLabel",
          "scaleSteps"
        ],
        "title": "RatingQuestionOptions"
      },
      "ReductoProcessingOptions": {
        "properties": {
          "parser": {
            "type": "string",
            "enum": [
              "REDUCTO"
            ],
            "const": "REDUCTO",
            "title": "Parser",
            "description": "The parser to use",
            "default": "REDUCTO"
          },
          "advanced_options": {
            "$ref": "#/components/schemas/AdvancedProcessingOptions"
          },
          "experimental_options": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExperimentalProcessingOptionsTyped"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "title": "Experimental Options"
          },
          "options": {
            "$ref": "#/components/schemas/BaseProcessingOptions"
          }
        },
        "type": "object",
        "title": "ReductoProcessingOptions"
      },
      "RemoteDataSourceConfig": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/S3DataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/SharePointDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/GoogleDriveDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/AzureBlobStorageDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/ConfluenceDataSourceConfig"
          },
          {
            "$ref": "#/components/schemas/SlackDataSourceConfig"
          }
        ],
        "title": "RemoteDataSourceConfig",
        "discriminator": {
          "propertyName": "source",
          "mapping": {
            "AzureBlobStorage": "#/components/schemas/AzureBlobStorageDataSourceConfig",
            "Confluence": "#/components/schemas/ConfluenceDataSourceConfig",
            "GoogleDrive": "#/components/schemas/GoogleDriveDataSourceConfig",
            "S3": "#/components/schemas/S3DataSourceConfig",
            "SharePoint": "#/components/schemas/SharePointDataSourceConfig",
            "Slack": "#/components/schemas/SlackDataSourceConfig"
          }
        }
      },
      "RemoveAccountGeneralRoleMembershipRequest": {
        "properties": {
          "identity_type": {
            "$ref": "#/components/schemas/AccessRoleIdentityType"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "identity_type",
          "id"
        ],
        "title": "RemoveAccountGeneralRoleMembershipRequest"
      },
      "RemoveAccountGroupGeneralRoleMembershipRequest": {
        "properties": {
          "identity_type": {
            "$ref": "#/components/schemas/AccessRoleIdentityType"
          },
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "identity_type",
          "id"
        ],
        "title": "RemoveAccountGroupGeneralRoleMembershipRequest"
      },
      "RequiredResources": {
        "properties": {
          "cpus": {
            "type": "integer",
            "title": "Cpus",
            "default": 3
          },
          "memory": {
            "type": "string",
            "title": "Memory",
            "default": "8Gi"
          },
          "storage": {
            "type": "string",
            "title": "Storage",
            "default": "16Gi"
          },
          "gpus": {
            "type": "integer",
            "title": "Gpus",
            "default": 0
          },
          "gpu_type": {
            "$ref": "#/components/schemas/GPUType"
          }
        },
        "type": "object",
        "title": "RequiredResources"
      },
      "RerankingRequest": {
        "properties": {
          "model_request_parameters": {
            "$ref": "#/components/schemas/ParameterBindings"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "chunks": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Chunks"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "query",
          "chunks"
        ],
        "title": "RerankingRequest"
      },
      "RerankingResponse": {
        "properties": {
          "chunk_scores": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Chunk Scores"
          },
          "tokens_used": {
            "title": "Tokens Used",
            "default": 0,
            "type": "integer"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "chunk_scores"
        ],
        "title": "RerankingResponse"
      },
      "ResourcePermission": {
        "properties": {
          "authorization_principle": {
            "$ref": "#/components/schemas/AuthorizationPrinciple"
          },
          "permission_level": {
            "$ref": "#/components/schemas/PermissionLevelType"
          }
        },
        "type": "object",
        "required": [
          "authorization_principle",
          "permission_level"
        ],
        "title": "ResourcePermission"
      },
      "ResourcePermissionType": {
        "type": "string",
        "enum": [
          "knowledge_base"
        ],
        "const": "knowledge_base",
        "title": "ResourcePermissionType"
      },
      "RestorablePartialApplicationSpecRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartialApplicationSpecRequest"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "RestorablePartialApplicationSpecRequest",
        "discriminator": {
          "propertyName": "restore",
          "mapping": {
            "False": "#/components/schemas/PartialApplicationSpecRequest",
            "True": "#/components/schemas/RestoreRequest"
          }
        }
      },
      "RestorablePartialPatchEvaluationRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartialPatchEvaluationRequest"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "RestorablePartialPatchEvaluationRequest",
        "discriminator": {
          "propertyName": "restore",
          "mapping": {
            "False": "#/components/schemas/PartialPatchEvaluationRequest",
            "True": "#/components/schemas/RestoreRequest"
          }
        }
      },
      "RestorablePartialQuestionSetRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartialQuestionSetRequest"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "RestorablePartialQuestionSetRequest",
        "discriminator": {
          "propertyName": "restore",
          "mapping": {
            "False": "#/components/schemas/PartialQuestionSetRequest",
            "True": "#/components/schemas/RestoreRequest"
          }
        }
      },
      "RestorablePartialTestCaseVersionRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PartialTestCaseVersionRequest"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "RestorablePartialTestCaseVersionRequest",
        "discriminator": {
          "propertyName": "restore",
          "mapping": {
            "False": "#/components/schemas/PartialTestCaseVersionRequest",
            "True": "#/components/schemas/RestoreRequest"
          }
        }
      },
      "RestorablePatchEvaluationDatasetRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PatchEvaluationDatasetRequest"
          },
          {
            "$ref": "#/components/schemas/RestoreRequest"
          }
        ],
        "title": "RestorablePatchEvaluationDatasetRequest",
        "discriminator": {
          "propertyName": "restore",
          "mapping": {
            "False": "#/components/schemas/PatchEvaluationDatasetRequest",
            "True": "#/components/schemas/RestoreRequest"
          }
        }
      },
      "RestoreRequest": {
        "properties": {
          "restore": {
            "type": "boolean",
            "enum": [
              true
            ],
            "const": true,
            "title": "Restore",
            "description": "Set to true to restore the entity from the database."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "restore"
        ],
        "title": "RestoreRequest"
      },
      "ResultSchemaFlexible": {
        "properties": {
          "generation_output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/FlexibleIOChunk"
                      },
                      "type": "array"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ChatMessageV2"
                      },
                      "type": "array"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    },
                    {
                      "$ref": "#/components/schemas/FileIODataType"
                    }
                  ]
                },
                "type": "object"
              }
            ],
            "title": "Generation Output"
          },
          "generation_extra_info": {
            "$ref": "#/components/schemas/ExtraInfoSchema"
          }
        },
        "type": "object",
        "required": [
          "generation_output"
        ],
        "title": "ResultSchemaFlexible"
      },
      "ResultSchemaGeneration": {
        "properties": {
          "generation_output": {
            "type": "string",
            "title": "Generation Output"
          },
          "generation_extra_info": {
            "$ref": "#/components/schemas/ExtraInfoSchema"
          }
        },
        "type": "object",
        "required": [
          "generation_output"
        ],
        "title": "ResultSchemaGeneration"
      },
      "Role": {
        "type": "string",
        "enum": [
          "manager",
          "admin",
          "editor",
          "member",
          "labeler",
          "disabled",
          "invited",
          "viewer"
        ],
        "title": "Role"
      },
      "RoleRestriction": {
        "properties": {
          "restriction_type": {
            "$ref": "#/components/schemas/RoleRestrictionType",
            "description": "The type of restriction"
          },
          "restriction": {
            "$ref": "#/components/schemas/UserGroupRoleRestriction",
            "description": "The restriction (currently only user group restrictions)"
          }
        },
        "type": "object",
        "required": [
          "restriction_type",
          "restriction"
        ],
        "title": "RoleRestriction"
      },
      "RoleRestrictionType": {
        "type": "string",
        "enum": [
          "user_group"
        ],
        "const": "user_group",
        "title": "RoleRestrictionType"
      },
      "RollbackResponse": {
        "properties": {
          "rolled_back_to_deployment": {
            "type": "string",
            "title": "Rolled Back To Deployment"
          },
          "from_deployment": {
            "type": "string",
            "title": "From Deployment"
          }
        },
        "type": "object",
        "required": [
          "rolled_back_to_deployment",
          "from_deployment"
        ],
        "title": "RollbackResponse"
      },
      "RougeRankParams": {
        "properties": {
          "metric": {
            "type": "string",
            "title": "Metric",
            "description": "Rouge type, can be n-gram based (e.g. rouge1, rouge2) or longest common subsequence (rougeL or rougeLsum)",
            "default": "rouge2"
          },
          "score": {
            "type": "string",
            "enum": [
              "precision",
              "recall",
              "fmeasure"
            ],
            "title": "Score",
            "description": "Metric to use from Rouge score",
            "default": "recall"
          }
        },
        "type": "object",
        "title": "RougeRankParams"
      },
      "RougeRankStrategy": {
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "rouge"
            ],
            "const": "rouge",
            "title": "Method",
            "description": "The name of the rank strategy.",
            "default": "rouge"
          },
          "params": {
            "$ref": "#/components/schemas/RougeRankParams",
            "description": "The parameters needed for ranking.",
            "default": {
              "metric": "rouge2",
              "score": "recall"
            }
          }
        },
        "type": "object",
        "title": "RougeRankStrategy"
      },
      "RougeScorer1ConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rouge1"
            ],
            "const": "rouge1",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "RougeScorer1ConfigWithItemLocator"
      },
      "RougeScorer2ConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rouge2"
            ],
            "const": "rouge2",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "RougeScorer2ConfigWithItemLocator"
      },
      "RougeScorerLConfigWithItemLocator": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rougeL"
            ],
            "const": "rougeL",
            "title": "Type"
          },
          "candidate": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Candidate"
          },
          "reference": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemLocator"
              }
            ],
            "title": "Reference"
          }
        },
        "type": "object",
        "required": [
          "type",
          "candidate",
          "reference"
        ],
        "title": "RougeScorerLConfigWithItemLocator"
      },
      "RunEvaluationAutoEvalRequest": {
        "properties": {
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "model_name": {
            "type": "string",
            "enum": [
              "llama-3-1-70b-instruct",
              "gpt-4-turbo-2024-04-09",
              "llama-3-70b-instruct-bedrock",
              "gpt-4o",
              "gpt-4o-mini",
              "o1"
            ],
            "title": "Model Name",
            "description": "The name of the model to be used for auto-evaluation, if one is not present in the evaluation config.",
            "default": "gpt-4-turbo-2024-04-09"
          }
        },
        "type": "object",
        "title": "RunEvaluationAutoEvalRequest"
      },
      "S3DataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "S3"
            ],
            "const": "S3",
            "title": "Source"
          },
          "s3_role": {
            "title": "S3 Role",
            "description": "Name of the role that a client will be initialized via AssumeRole of AWS sts",
            "type": "string"
          },
          "external_id": {
            "title": "External Id",
            "description": "External ID defined by the customer for the IAM role",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "source"
        ],
        "title": "S3 DataSource Auth Config"
      },
      "S3DataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "S3"
            ],
            "const": "S3",
            "title": "Source"
          },
          "s3_bucket": {
            "type": "string",
            "title": "S3 Bucket",
            "description": "Name of the S3 bucket where the data is stored."
          },
          "s3_prefix": {
            "type": "string",
            "title": "S3 Prefix",
            "description": "Prefix of the S3 bucket where the data is stored. If not specified, the entire bucket will be used.",
            "default": ""
          },
          "aws_region": {
            "type": "string",
            "title": "Aws Region",
            "description": "AWS region where the S3 bucket is located."
          },
          "aws_account_id": {
            "type": "string",
            "pattern": "^\\d{12}$",
            "title": "Aws Account Id",
            "description": "AWS account ID that owns the S3 bucket."
          }
        },
        "type": "object",
        "required": [
          "source",
          "s3_bucket",
          "aws_region",
          "aws_account_id"
        ],
        "title": "S3 DataSource Config"
      },
      "SafetyCategory": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "SafetyCategory"
      },
      "SafetyEvaluationDatasetRequest": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "safety"
            ],
            "const": "safety",
            "title": "Type",
            "description": "Manually or automatically generated dataset",
            "default": "safety"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "description": "The schema type of the dataset. Only GENERATION is currently supported."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "harms_list": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Harms List",
            "description": "List of harms to generate the dataset for."
          },
          "advanced_config": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Advanced Config",
            "description": "Advanced configuration for the safety evaluation dataset."
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "account_id",
          "harms_list",
          "advanced_config"
        ],
        "title": "SafetyEvaluationDatasetRequest"
      },
      "SafetySubMetricTypeEnum": {
        "type": "string",
        "enum": [
          "safety-bias-and-stereotyping",
          "safety-opinions-disputed-topics",
          "safety-unethical-harmful-activities",
          "safety-copyright-violations",
          "safety-harmful-content",
          "safety-privacy-violations"
        ],
        "title": "SafetySubMetricTypeEnum"
      },
      "ScalarData": {
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "title": "Value"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "value"
        ],
        "title": "ScalarData"
      },
      "SchemaFlexible": {
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/FlexibleIOChunk"
                      },
                      "type": "array"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ChatMessageV2"
                      },
                      "type": "array"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    },
                    {
                      "$ref": "#/components/schemas/FileIODataType"
                    }
                  ]
                },
                "type": "object"
              }
            ],
            "title": "Input"
          },
          "expected_output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/FlexibleIOChunk"
                      },
                      "type": "array"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ChatMessageV2"
                      },
                      "type": "array"
                    },
                    {
                      "items": {},
                      "type": "array"
                    },
                    {
                      "type": "object",
                      "additionalProperties": true
                    },
                    {
                      "$ref": "#/components/schemas/FileIODataType"
                    }
                  ]
                },
                "type": "object"
              }
            ],
            "title": "Expected Output"
          },
          "expected_extra_info": {
            "$ref": "#/components/schemas/ExtraInfoSchema"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "SchemaFlexible"
      },
      "SchemaGenerationBase": {
        "properties": {
          "input": {
            "type": "string",
            "title": "Input"
          },
          "expected_output": {
            "title": "Expected Output",
            "type": "string"
          },
          "expected_extra_info": {
            "$ref": "#/components/schemas/ExtraInfoSchema"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "SchemaGenerationBase"
      },
      "SchemaSection": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "object"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/PropertySchema"
            },
            "type": "object",
            "title": "Properties"
          },
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "title"
        ],
        "title": "SchemaSection",
        "description": "SchemaSection is a model that represents a schema section for node properties, partially conforming to JSONSchema.\n\nAttributes:\n    title (str): The title of the schema section.\n    type (str): The type of the schema section, default is \"object\".\n    properties (Dict[str, PropertySchema]): A dictionary of the schemas of properties that the section contains.\n    required (List[str]): A list of required property names."
      },
      "SelectedChoice": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "title": "SelectedChoice"
      },
      "SelectionConstraintType": {
        "type": "string",
        "enum": [
          "single",
          "multi"
        ],
        "title": "SelectionConstraintType"
      },
      "SemVerMinVersion": {
        "properties": {
          "version_constraint_type": {
            "type": "string",
            "enum": [
              "SEMVER_MIN"
            ],
            "const": "SEMVER_MIN",
            "title": "Version Constraint Type",
            "default": "SEMVER_MIN"
          },
          "minimum_version": {
            "type": "string",
            "title": "Minimum Version"
          }
        },
        "type": "object",
        "required": [
          "minimum_version"
        ],
        "title": "SemVerMinVersion"
      },
      "Severity": {
        "type": "string",
        "enum": [
          "low",
          "high"
        ],
        "title": "Severity"
      },
      "SharePointDataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "SharePoint"
            ],
            "const": "SharePoint",
            "title": "Source"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Secret for the app registration associated with this SharePoint site"
          }
        },
        "type": "object",
        "required": [
          "source",
          "client_secret"
        ],
        "title": "SharePoint DataSource Auth Config"
      },
      "SharePointDataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "SharePoint"
            ],
            "const": "SharePoint",
            "title": "Source"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Client ID associated with this SharePoint site"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "description": "Tenant ID that the SharePoint site is within"
          },
          "site_id": {
            "type": "string",
            "title": "Site Id",
            "description": "Site ID for this SharePoint site, can be found at https://[hostname].sharepoint.com/sites/[site name]/_api/site/id"
          },
          "folder_path": {
            "title": "Folder Path",
            "description": "Nested folder path to read files from the root of the site. Please omit the leading slash. Example: 'Documents/sub_directory'",
            "default": "",
            "type": "string"
          },
          "recursive": {
            "title": "Recursive",
            "description": "Recurse through the folder contents, default is True.",
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "source",
          "client_id",
          "tenant_id",
          "site_id"
        ],
        "title": "SharePoint DataSource Config"
      },
      "SlackDataSourceAuthConfig": {
        "properties": {
          "encrypted": {
            "type": "boolean",
            "title": "Encrypted",
            "default": false
          },
          "source": {
            "type": "string",
            "enum": [
              "Slack"
            ],
            "const": "Slack",
            "title": "Source"
          },
          "bot_token": {
            "type": "string",
            "title": "Bot Token",
            "description": "Your Slack app's Bot OAuth token. See https://api.slack.com/quickstart"
          }
        },
        "type": "object",
        "required": [
          "source",
          "bot_token"
        ],
        "title": "Slack DataSource Auth Config"
      },
      "SlackDataSourceConfig": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "Slack"
            ],
            "const": "Slack",
            "title": "Source"
          },
          "channel_id": {
            "type": "string",
            "title": "Channel Id",
            "description": "Slack Channel or Conversation ID to retrieve history from. Open channel details and find the ID at bottom of 'About' section."
          }
        },
        "type": "object",
        "required": [
          "source",
          "channel_id"
        ],
        "title": "Slack DataSource Config"
      },
      "SortByEnumForApplicationSpec": {
        "type": "string",
        "enum": [
          "name:asc",
          "name:desc",
          "description:asc",
          "description:desc",
          "theme_id:asc",
          "theme_id:desc",
          "theme:asc",
          "theme:desc",
          "run_online_evaluation:asc",
          "run_online_evaluation:desc",
          "variants:asc",
          "variants:desc",
          "parent_application_spec_id:asc",
          "parent_application_spec_id:desc",
          "id:asc",
          "id:desc",
          "created_at:asc",
          "created_at:desc",
          "account_id:asc",
          "account_id:desc",
          "created_by_user_id:asc",
          "created_by_user_id:desc",
          "archived_at:asc",
          "archived_at:desc",
          "created_by_user:asc",
          "created_by_user:desc",
          "evaluations:asc",
          "evaluations:desc",
          "evaluation_count:asc",
          "evaluation_count:desc"
        ],
        "title": "SortByEnumForApplicationSpec"
      },
      "SortByEnumForLegacyEvaluation": {
        "type": "string",
        "enum": [
          "status:asc",
          "status:desc",
          "application_spec_id:asc",
          "application_spec_id:desc",
          "application_spec:asc",
          "application_spec:desc",
          "application_variant_id:asc",
          "application_variant_id:desc",
          "application_variant:asc",
          "application_variant:desc",
          "evaluation_config_id:asc",
          "evaluation_config_id:desc",
          "completed_at:asc",
          "completed_at:desc",
          "total_test_case_result_count:asc",
          "total_test_case_result_count:desc",
          "completed_test_case_result_count:asc",
          "completed_test_case_result_count:desc",
          "annotation_config:asc",
          "annotation_config:desc",
          "question_id_to_annotation_config:asc",
          "question_id_to_annotation_config:desc",
          "metric_config:asc",
          "metric_config:desc",
          "evaluation_config_expanded:asc",
          "evaluation_config_expanded:desc",
          "test_case_results:asc",
          "test_case_results:desc",
          "async_jobs:asc",
          "async_jobs:desc",
          "evaluation_datasets:asc",
          "evaluation_datasets:desc",
          "id:asc",
          "id:desc",
          "created_at:asc",
          "created_at:desc",
          "account_id:asc",
          "account_id:desc",
          "created_by_user_id:asc",
          "created_by_user_id:desc",
          "archived_at:asc",
          "archived_at:desc",
          "created_by_user:asc",
          "created_by_user:desc",
          "name:asc",
          "name:desc",
          "description:asc",
          "description:desc",
          "tags:asc",
          "tags:desc",
          "evaluation_config:asc",
          "evaluation_config:desc"
        ],
        "title": "SortByEnumForLegacyEvaluation"
      },
      "SortByEnumForModelDeployment": {
        "type": "string",
        "enum": [
          "model_creation_parameters:asc",
          "model_creation_parameters:desc",
          "model_endpoint_id:asc",
          "model_endpoint_id:desc",
          "model_instance_id:asc",
          "model_instance_id:desc",
          "vendor_configuration:asc",
          "vendor_configuration:desc",
          "deployment_metadata:asc",
          "deployment_metadata:desc",
          "status:asc",
          "status:desc",
          "id:asc",
          "id:desc",
          "created_at:asc",
          "created_at:desc",
          "account_id:asc",
          "account_id:desc",
          "created_by_user_id:asc",
          "created_by_user_id:desc",
          "created_by_user:asc",
          "created_by_user:desc",
          "name:asc",
          "name:desc"
        ],
        "title": "SortByEnumForModelDeployment"
      },
      "SortByEnumForModelInstance": {
        "type": "string",
        "enum": [
          "display_name:asc",
          "display_name:desc",
          "model_vendor:asc",
          "model_vendor:desc",
          "base_model_id:asc",
          "base_model_id:desc",
          "base_model_metadata:asc",
          "base_model_metadata:desc",
          "model_creation_parameters:asc",
          "model_creation_parameters:desc",
          "model_card:asc",
          "model_card:desc",
          "training_data_card:asc",
          "training_data_card:desc",
          "description:asc",
          "description:desc",
          "model_template_id:asc",
          "model_template_id:desc",
          "model_group_id:asc",
          "model_group_id:desc",
          "model_group:asc",
          "model_group:desc",
          "request_schema:asc",
          "request_schema:desc",
          "response_schema:asc",
          "response_schema:desc",
          "deployment_count:asc",
          "deployment_count:desc",
          "supports_multi_turn:asc",
          "supports_multi_turn:desc",
          "deployments:asc",
          "deployments:desc",
          "id:asc",
          "id:desc",
          "created_at:asc",
          "created_at:desc",
          "account_id:asc",
          "account_id:desc",
          "created_by_user_id:asc",
          "created_by_user_id:desc",
          "created_by_user:asc",
          "created_by_user:desc",
          "name:asc",
          "name:desc",
          "model_type:asc",
          "model_type:desc"
        ],
        "title": "SortByEnumForModelInstance"
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "SortOrder"
      },
      "Span": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "span"
            ],
            "const": "span",
            "title": "Object",
            "default": "span"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "trace_id": {
            "type": "string",
            "maxLength": 38,
            "title": "Trace Id",
            "description": "id for grouping traces together, uuid is recommended"
          },
          "parent_id": {
            "title": "Parent Id",
            "description": "Reference to a parent span_id",
            "type": "string"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "input": {
            "title": "Input",
            "type": "object",
            "additionalProperties": true
          },
          "output": {
            "title": "Output",
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "default": "SUCCESS",
            "$ref": "#/components/schemas/ApplicationOperationStatus"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "trace_id",
          "start_timestamp",
          "account_id",
          "created_by_user_id"
        ]
      },
      "SpanCreateRequest": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BaseSpanCreateRequest"
          },
          {
            "$ref": "#/components/schemas/LegacyApplicationSpanCreateRequest"
          }
        ],
        "title": "SpanCreateRequest"
      },
      "SpanUpdateRequest": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "type": "string",
            "format": "date-time"
          },
          "output": {
            "title": "Output",
            "type": "object",
            "additionalProperties": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "status": {
            "default": "SUCCESS",
            "$ref": "#/components/schemas/ApplicationOperationStatus"
          }
        },
        "type": "object",
        "title": "SpanUpdateRequest"
      },
      "StringConfigurationFieldSchema": {
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "docs": {
            "title": "Docs",
            "type": "string"
          },
          "default": {
            "title": "Default",
            "type": "boolean"
          },
          "is_advanced_configuration": {
            "title": "Is Advanced Configuration",
            "default": false,
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "TEXT"
            ],
            "const": "TEXT",
            "title": "Type",
            "default": "TEXT"
          },
          "validation_rules": {
            "$ref": "#/components/schemas/StringValidationRule"
          }
        },
        "type": "object",
        "required": [
          "label",
          "docs",
          "validation_rules"
        ],
        "title": "StringConfigurationFieldSchema"
      },
      "StringExtraInfoSchema": {
        "properties": {
          "schema_type": {
            "type": "string",
            "enum": [
              "STRING"
            ],
            "const": "STRING",
            "title": "Schema Type",
            "default": "STRING"
          },
          "info": {
            "type": "string",
            "title": "Info"
          }
        },
        "type": "object",
        "required": [
          "info"
        ],
        "title": "StringExtraInfoSchema"
      },
      "StringValidationRule": {
        "properties": {
          "required": {
            "title": "Required",
            "type": "boolean"
          },
          "regex_pattern": {
            "title": "Regex Pattern",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "required"
        ],
        "title": "StringValidationRule"
      },
      "StudioProjectRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Studio Project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Studio Project"
          },
          "studio_api_key": {
            "type": "string",
            "title": "Studio Api Key",
            "description": "Your API key for Studio, can be updated with the PATCH endpoint"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "studio_api_key",
          "account_id"
        ],
        "title": "StudioProjectRequest"
      },
      "StudioProjectResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Studio Project"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Studio Project"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "StudioProjectResponse"
      },
      "SwapNamesModelPatchRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "on_conflict": {
            "type": "string",
            "enum": [
              "error",
              "swap"
            ],
            "title": "On Conflict",
            "default": "error"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "SwapNamesModelPatchRequest"
      },
      "SyncCatalogForOrganizationRequest": {
        "properties": {
          "organization_id": {
            "title": "Organization Id",
            "description": "Optional organization id to synchronize to",
            "type": "string"
          }
        },
        "type": "object",
        "title": "SyncCatalogForOrganizationRequest"
      },
      "TableSummary": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt"
          }
        },
        "type": "object",
        "title": "TableSummary"
      },
      "TaggingInformation": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TaggingInformationPerFile"
          },
          {
            "$ref": "#/components/schemas/TaggingInformationAll"
          }
        ],
        "title": "TaggingInformation",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "all": "#/components/schemas/TaggingInformationAll",
            "per_file": "#/components/schemas/TaggingInformationPerFile"
          }
        }
      },
      "TaggingInformationAll": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "all"
            ],
            "const": "all",
            "title": "Type",
            "default": "all"
          },
          "tags_to_apply": {
            "title": "Tags To Apply",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "TaggingInformationAll"
      },
      "TaggingInformationPerFile": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "per_file"
            ],
            "const": "per_file",
            "title": "Type",
            "default": "per_file"
          },
          "tags_to_apply": {
            "title": "Tags To Apply",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": true
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object"
          }
        },
        "type": "object",
        "title": "TaggingInformationPerFile"
      },
      "TaskORMStatusEnum": {
        "type": "string",
        "enum": [
          "NOT_READY",
          "PENDING",
          "COMPLETED"
        ],
        "title": "TaskORMStatusEnum"
      },
      "TaskORMTaskTypeEnum": {
        "type": "string",
        "enum": [
          "EVALUATION_ANNOTATION",
          "EVALUATION_AUDIT"
        ],
        "title": "TaskORMTaskTypeEnum"
      },
      "TaskResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "task_type": {
            "$ref": "#/components/schemas/TaskORMTaskTypeEnum"
          },
          "task_entity_parent_id": {
            "type": "string",
            "title": "Task Entity Parent Id"
          },
          "task_entity_id": {
            "type": "string",
            "title": "Task Entity Id"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity."
          },
          "assigned_to": {
            "title": "Assigned To",
            "description": "The ID of the user that the task is assigned to.",
            "type": "string"
          },
          "assignment_expires_at": {
            "title": "Assignment Expires At",
            "description": "The date and time when the task assignment expires in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/TaskORMStatusEnum"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "task_entity": {
            "description": "The entity that the task is associated with.",
            "$ref": "#/components/schemas/TestCaseResultResponse"
          }
        },
        "type": "object",
        "required": [
          "id",
          "task_type",
          "task_entity_parent_id",
          "task_entity_id",
          "account_id",
          "status",
          "priority"
        ],
        "title": "TaskResponse"
      },
      "TaskWithAssignee": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "task_type": {
            "$ref": "#/components/schemas/TaskORMTaskTypeEnum"
          },
          "task_entity_parent_id": {
            "type": "string",
            "title": "Task Entity Parent Id"
          },
          "task_entity_id": {
            "type": "string",
            "title": "Task Entity Id"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity."
          },
          "assigned_to": {
            "$ref": "#/components/schemas/UserV2Details"
          },
          "assignment_expires_at": {
            "title": "Assignment Expires At",
            "description": "The date and time when the task assignment expires in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/TaskORMStatusEnum"
          },
          "priority": {
            "type": "integer",
            "title": "Priority"
          },
          "task_entity": {
            "description": "The entity that the task is associated with.",
            "$ref": "#/components/schemas/TestCaseResultResponse"
          }
        },
        "type": "object",
        "required": [
          "id",
          "task_type",
          "task_entity_parent_id",
          "task_entity_id",
          "account_id",
          "status",
          "priority"
        ],
        "title": "TaskWithAssignee"
      },
      "TestApplicationProcessingRequest": {
        "properties": {
          "inputs": {
            "additionalProperties": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "object",
            "title": "Inputs",
            "description": "Input data for the application. You must provide inputs for each input node"
          },
          "history": {
            "title": "History",
            "description": "History of the application",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ApplicationRequestResponsePair"
            },
            "type": "array"
          },
          "overrides": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgenticApplicationOverrides"
              },
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/KnowledgeBaseNodeOverride"
                },
                "type": "object"
              }
            ],
            "title": "Overrides",
            "description": "Optional overrides for the application"
          },
          "stream": {
            "title": "Stream",
            "description": "Control to have streaming of the endpoint. If the last node before the output is a completion node, you can set this to true to get the output as soon as the completion node has a token",
            "default": false,
            "type": "boolean"
          },
          "operation_metadata": {
            "title": "Operation Metadata",
            "description": "Arbitrary user-defined metadata that can be attached to the process operations and will be registered in the interaction.",
            "type": "object",
            "additionalProperties": true
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/ApplicationNode"
            },
            "type": "array",
            "title": "Nodes",
            "description": "List of nodes in the application graph"
          },
          "edges": {
            "items": {
              "$ref": "#/components/schemas/ApplicationEdge"
            },
            "type": "array",
            "title": "Edges",
            "description": "List of edges in the application graph"
          },
          "version": {
            "type": "string",
            "enum": [
              "V0"
            ],
            "const": "V0",
            "title": "Version",
            "description": "Version of the application schema"
          }
        },
        "type": "object",
        "required": [
          "inputs",
          "nodes",
          "edges",
          "version"
        ],
        "title": "TestApplicationProcessingRequest"
      },
      "TestCaseOutput": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "object": {
            "type": "string",
            "enum": [
              "test_case_output"
            ],
            "const": "test_case_output",
            "title": "Object",
            "default": "test_case_output"
          },
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResultSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/ResultSchemaFlexible"
              }
            ],
            "title": "Output"
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum"
          },
          "application_interaction_id": {
            "title": "Application Interaction Id",
            "type": "string"
          },
          "test_case_output_group_id": {
            "title": "Test Case Output Group Id",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          },
          "test_case": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__eval_models__TestCaseVersionResponse"
          },
          "trace_spans": {
            "title": "Trace Spans",
            "items": {
              "$ref": "#/components/schemas/EvaluationTraceSpanResponse"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "evaluation_dataset_id",
          "test_case_id",
          "output",
          "schema_type",
          "id",
          "created_at"
        ]
      },
      "TestCaseOutputCreateRequest": {
        "properties": {
          "application_variant_id": {
            "type": "string",
            "title": "Application Variant Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResultSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/ResultSchemaFlexible"
              }
            ],
            "title": "Output"
          },
          "evaluation_dataset_version_num": {
            "type": "integer",
            "title": "Evaluation Dataset Version Num"
          },
          "trace_spans": {
            "title": "Trace Spans",
            "description": "List of trace spans associated with the application's execution. These spans provide insight into the individual steps taken by nodes involved in generating the output.",
            "items": {
              "$ref": "#/components/schemas/EvaluationTraceSpanRequest"
            },
            "type": "array"
          },
          "metrics": {
            "title": "Metrics",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "type": "object"
          },
          "ignore_missing": {
            "title": "Ignore Missing",
            "description": "If set to true, the output batch will be saved even if there are missing outputs for some test cases.",
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "application_variant_id",
          "test_case_id",
          "output",
          "evaluation_dataset_version_num"
        ],
        "title": "TestCaseOutputCreateRequest"
      },
      "TestCaseOutputDataLocs": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/DataLocWithCount"
            },
            "type": "array",
            "title": "Items"
          },
          "test_case_output_count": {
            "type": "integer",
            "title": "Test Case Output Count"
          }
        },
        "type": "object",
        "required": [
          "items",
          "test_case_output_count"
        ],
        "title": "TestCaseOutputDataLocs"
      },
      "TestCaseOutputViews": {
        "type": "string",
        "enum": [
          "test_case",
          "trace_spans"
        ],
        "title": "TestCaseOutputViews"
      },
      "TestCaseResultEntity": {
        "properties": {
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum",
            "description": "The status of the test case result. This should not be explictly set when creating a test case result. When patching a test case result, this field can be set to 'PENDING' to prevent the test case result from being marked 'COMPLETED'.",
            "optional_in_request": true
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_version_id": {
            "type": "string",
            "title": "Test Case Version Id"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "type": "object",
            "title": "Test Case Evaluation Data",
            "additionalProperties": true
          },
          "test_case_evaluation_data_schema": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "can_patch": false
          },
          "result": {
            "title": "Result",
            "description": "The result of the test case evaluation, in JSON form where the key is the question ID and the value is the result.",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "completed_at": {
            "title": "Completed At",
            "type": "string",
            "format": "date-time"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "description": "The time spent labeling in seconds.",
            "type": "integer"
          },
          "application_test_case_output_id": {
            "title": "Application Test Case Output Id",
            "type": "string"
          },
          "lineage_id": {
            "type": "string",
            "title": "Lineage Id"
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "description": "The user who annotated the task.",
            "type": "string"
          },
          "edited_by_user_id": {
            "title": "Edited By User Id",
            "description": "The user who edited the task.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "label_status",
          "application_spec_id",
          "evaluation_id",
          "evaluation_dataset_id",
          "evaluation_dataset_version_num",
          "test_case_version_id",
          "test_case_id",
          "test_case_evaluation_data",
          "test_case_evaluation_data_schema",
          "lineage_id",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "TestCaseResultEntity"
      },
      "TestCaseResultRequest": {
        "properties": {
          "label_status": {
            "$ref": "#/components/schemas/EvaluationORMStatusEnum"
          },
          "audit_status": {
            "$ref": "#/components/schemas/AuditORMStatusEnum"
          },
          "audit_required": {
            "title": "Audit Required",
            "type": "boolean"
          },
          "audit_comment": {
            "title": "Audit Comment",
            "type": "string"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "evaluation_dataset_version_num": {
            "type": "string",
            "title": "Evaluation Dataset Version Num"
          },
          "test_case_id": {
            "type": "string",
            "title": "Test Case Id"
          },
          "test_case_evaluation_data": {
            "type": "object",
            "title": "Test Case Evaluation Data",
            "additionalProperties": true
          },
          "result": {
            "title": "Result",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  "type": "array"
                }
              ]
            },
            "type": "object"
          },
          "time_spent_labeling_s": {
            "title": "Time Spent Labeling S",
            "type": "integer"
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          },
          "annotated_by_user_id": {
            "title": "Annotated By User Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "application_spec_id",
          "evaluation_dataset_version_num",
          "test_case_id",
          "test_case_evaluation_data"
        ],
        "title": "TestCaseResultRequest"
      },
      "TestCaseResultResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GenerationTestCaseResultResponse"
          },
          {
            "$ref": "#/components/schemas/FlexibleTestCaseResultResponse"
          }
        ],
        "title": "TestCaseResultResponse",
        "discriminator": {
          "propertyName": "test_case_evaluation_data_schema",
          "mapping": {
            "FLEXIBLE": "#/components/schemas/FlexibleTestCaseResultResponse",
            "GENERATION": "#/components/schemas/GenerationTestCaseResultResponse"
          }
        }
      },
      "TestCaseResultResponseWithViews": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GenerationTestCaseResultResponseWithViews"
          },
          {
            "$ref": "#/components/schemas/FlexibleTestCaseResultResponseWithViews"
          }
        ],
        "title": "TestCaseResultResponseWithViews",
        "discriminator": {
          "propertyName": "test_case_evaluation_data_schema",
          "mapping": {
            "FLEXIBLE": "#/components/schemas/FlexibleTestCaseResultResponseWithViews",
            "GENERATION": "#/components/schemas/GenerationTestCaseResultResponseWithViews"
          }
        }
      },
      "TestCaseResultViewsOptions": {
        "type": "string",
        "enum": [
          "AnnotationResults",
          "AuditTasks",
          "CustomMetrics",
          "Metrics",
          "Task",
          "TestCaseVersion",
          "Trace"
        ],
        "title": "TestCaseResultViewsOptions"
      },
      "TestCaseVersionRequest": {
        "properties": {
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              },
              {
                "$ref": "#/components/schemas/SchemaFlexible"
              }
            ],
            "title": "Test Case Data"
          },
          "chat_history": {
            "title": "Chat History",
            "type": "object",
            "additionalProperties": true
          },
          "test_case_metadata": {
            "title": "Test Case Metadata",
            "type": "object",
            "additionalProperties": true
          },
          "account_id": {
            "title": "Account Id",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "test_case_data"
        ],
        "title": "TestCaseVersionRequest"
      },
      "TextUserMessageContentParts": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "const": "text",
            "title": "Type",
            "default": "text"
          },
          "text": {
            "type": "string",
            "title": "Text"
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "TextUserMessageContentParts"
      },
      "ThemeRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "theme_vars": {
            "$ref": "#/components/schemas/ThemeVars"
          },
          "logo_blob": {
            "type": "string",
            "title": "Logo Blob"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "title",
          "theme_vars",
          "logo_blob",
          "account_id"
        ],
        "title": "ThemeRequest"
      },
      "ThemeResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "theme_vars": {
            "$ref": "#/components/schemas/ThemeVars"
          },
          "logo_blob": {
            "type": "string",
            "title": "Logo Blob"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "theme_vars",
          "logo_blob",
          "created_at",
          "updated_at",
          "created_by_user_id",
          "account_id"
        ],
        "title": "ThemeResponse"
      },
      "ThemeVars": {
        "properties": {
          "accentPrimary": {
            "type": "string",
            "title": "Accentprimary"
          },
          "accentSecondary": {
            "type": "string",
            "title": "Accentsecondary"
          },
          "background": {
            "type": "string",
            "title": "Background"
          },
          "foreground": {
            "type": "string",
            "title": "Foreground"
          }
        },
        "type": "object",
        "title": "ThemeVars"
      },
      "TimeseriesData": {
        "properties": {
          "bins": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Bins"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/TimeseriesDataEntry"
            },
            "type": "array",
            "title": "Values"
          },
          "unit": {
            "title": "Unit",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "bins",
          "values"
        ],
        "title": "TimeseriesData"
      },
      "TimeseriesDataEntry": {
        "properties": {
          "label": {
            "type": "string",
            "title": "Label"
          },
          "value": {
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Value"
          }
        },
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "title": "TimeseriesDataEntry"
      },
      "TimestampMinVersion": {
        "properties": {
          "version_constraint_type": {
            "type": "string",
            "enum": [
              "TIMESTAMP_MIN"
            ],
            "const": "TIMESTAMP_MIN",
            "title": "Version Constraint Type",
            "default": "TIMESTAMP_MIN"
          },
          "minimum_timestamp": {
            "type": "string",
            "title": "Minimum Timestamp"
          }
        },
        "type": "object",
        "required": [
          "minimum_timestamp"
        ],
        "title": "TimestampMinVersion"
      },
      "TokenChunkingStrategyConfig": {
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "token"
            ],
            "const": "token",
            "title": "Strategy"
          },
          "separator": {
            "title": "Separator",
            "description": "Character designating breaks in input data. Text data will first be split into sections by this separator, then each section will be split into chunks of size `chunk_size`.",
            "default": "\n\n",
            "type": "string"
          },
          "target_chunk_size": {
            "title": "Target Chunk Size",
            "description": "Target number of tokens in each chunk. If not specified, a target chunk size of 200 will be used.",
            "default": 200,
            "type": "integer",
            "minimum": 1.0
          },
          "max_chunk_size": {
            "title": "Max Chunk Size",
            "description": "Maximum number of tokens in each chunk. If not specified, a maximum chunk size of 600 will be used.",
            "default": 600,
            "type": "integer",
            "minimum": 1.0
          },
          "chunk_overlap": {
            "title": "Chunk Overlap",
            "description": "Number of tokens to overlap between chunks. If not specified, an overlap of 0 will be used. Not this if only followed approximately.",
            "default": 0,
            "type": "integer",
            "minimum": 0.0
          }
        },
        "type": "object",
        "required": [
          "strategy"
        ],
        "title": "TokenChunkingStrategyConfig"
      },
      "TokenUsage": {
        "properties": {
          "prompt": {
            "title": "Prompt",
            "description": "Number of tokens in the prompt.",
            "type": "integer"
          },
          "completion": {
            "title": "Completion",
            "description": "Number of tokens in the completion.",
            "type": "integer"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of tokens in both the prompt and the completion."
          }
        },
        "type": "object",
        "required": [
          "total"
        ],
        "title": "TokenUsage"
      },
      "Tool": {
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Name",
            "description": "Name of the tool.\n\nA tool is a function that the _client application_ has at its disposal. The tool name is the name the client wishes the Agent to use to refer to this function when it decides if it wants the user to use the tool or not. Itmust be unique amongst the set of tools provided in a single API call."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool.\n\nBecause some queries are complex and may require multiple tools to complete, it is important to make these descriptions as informative as possible. If a tool is not being chosen when it should, it is common practice to tune the description of the tool to make it more apparent to the agent when the tool can be used effectively."
          },
          "arguments": {
            "$ref": "#/components/schemas/ToolArguments",
            "description": "An JSON Schema-compliant schema for the tool arguments. To describe a function that accepts no parameters, provide the value `{\"type\": \"\"object\", \"properties\": {}}`.\n\nFor more information on how to define a valid JSON Schema object, visit https://json-schema.org/understanding-json-schema/reference/object.html"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "arguments"
        ],
        "title": "Tool"
      },
      "ToolArguments": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "object"
            ],
            "const": "object",
            "title": "Type",
            "description": "Type of argument. Currently only \"object\" is supported"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ToolPropertyValue"
            },
            "type": "object",
            "title": "Properties",
            "description": "An object where each key is the name of a keyword argument and each value is a schema used to validate that property. Each schema must have a type and description, but can also have a default value and examples.\n\nFor more information on how to define a valid property, visit https://json-schema.org/understanding-json-schema/reference/object.html"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "ToolArguments"
      },
      "ToolConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "max_iterations": {
            "title": "Max Iterations",
            "default": 10,
            "type": "integer"
          },
          "execution_timeout_seconds": {
            "title": "Execution Timeout Seconds",
            "default": 60,
            "type": "integer"
          },
          "should_retry_on_error": {
            "title": "Should Retry On Error",
            "default": true,
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ToolConfig",
        "description": "Configuration for tool use.\nNOTE: this config is highly experimental and signature will change significantly in future iterations."
      },
      "ToolMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "tool"
            ],
            "const": "tool",
            "title": "Role",
            "description": "The role of the message. Must be set to 'tool'.\n\nA tool message is a message the client application uses to send tool output to the AI. It should contain the name of the tool and the output from the tool encoded as text.",
            "default": "tool"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the tool"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Text output from the tool"
          }
        },
        "type": "object",
        "required": [
          "name",
          "content"
        ],
        "title": "Tool Message"
      },
      "ToolPropertyValue": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array",
              "null"
            ],
            "title": "Type",
            "description": "The argument's type.\n\nThe type is used to help the Agent generate valid arguments for the tool.\n\nFor more information about types, see: https://json-schema.org/understanding-json-schema/reference/type.html#type-specific-keywords"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of what the argument is used for.\n\nThis description is used to help the Agent generate sensible arguments for the tool. It is very important that this description is succinct, clear, and accurate."
          },
          "default": {
            "title": "Default",
            "description": "A default value for the argument if unspecified.",
            "type": "string"
          },
          "examples": {
            "title": "Examples",
            "description": "Example values demonstrating how the argument should look.\n\nThis can be used to help the agent understand what a valid argument should look like.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "type",
          "description"
        ],
        "title": "property"
      },
      "ToolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the tool that the AI wants the client to use."
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "Arguments to pass to the tool. The format must be a JSON Schema-compliant object serialized into a string."
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "ToolRequest"
      },
      "TraceSpanEntity": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Identifier for the node that emitted this trace span."
          },
          "operation_type": {
            "$ref": "#/components/schemas/OperationType",
            "description": "Type of the operation, e.g., RERANKING."
          },
          "operation_status": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The outcome of the operation performed by this node.",
            "default": "SUCCESS"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "The start time of the step."
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "description": "The end time of the step.",
            "type": "string",
            "format": "date-time"
          },
          "operation_input": {
            "type": "object",
            "title": "Operation Input",
            "description": "The JSON representation of the input that this step received.",
            "default": {},
            "additionalProperties": true
          },
          "operation_output": {
            "type": "object",
            "title": "Operation Output",
            "description": "The JSON representation of the output that this step emitted.",
            "default": {},
            "additionalProperties": true
          },
          "operation_metadata": {
            "type": "object",
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted during execution. This can differ based on different types of operations.",
            "default": {},
            "additionalProperties": true
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "The duration of the operation step in milliseconds.",
            "default": 0
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the trace span."
          },
          "application_interaction_id": {
            "type": "string",
            "title": "Application Interaction Id",
            "description": "The ID of the application interaction this trace span belongs to."
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "operation_type",
          "start_timestamp",
          "id",
          "application_interaction_id"
        ],
        "title": "TraceSpanEntity",
        "description": "Represents a trace span entity, tied to an interaction."
      },
      "TraceSpanRequest": {
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Node Id",
            "description": "Identifier for the node that emitted this trace span."
          },
          "operation_type": {
            "$ref": "#/components/schemas/OperationType",
            "description": "Type of the operation, e.g., RERANKING."
          },
          "operation_status": {
            "$ref": "#/components/schemas/OperationStatus",
            "description": "The outcome of the operation performed by this node.",
            "default": "SUCCESS"
          },
          "start_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Start Timestamp",
            "description": "The start time of the step."
          },
          "end_timestamp": {
            "title": "End Timestamp",
            "description": "The end time of the step.",
            "type": "string",
            "format": "date-time"
          },
          "operation_input": {
            "type": "object",
            "title": "Operation Input",
            "description": "The JSON representation of the input that this step received.",
            "default": {},
            "additionalProperties": true
          },
          "operation_output": {
            "type": "object",
            "title": "Operation Output",
            "description": "The JSON representation of the output that this step emitted.",
            "default": {},
            "additionalProperties": true
          },
          "operation_metadata": {
            "type": "object",
            "title": "Operation Metadata",
            "description": "The JSON representation of the metadata insights emitted during execution. This can differ based on different types of operations.",
            "default": {},
            "additionalProperties": true
          },
          "duration_ms": {
            "type": "integer",
            "title": "Duration Ms",
            "description": "The duration of the operation step in milliseconds.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "node_id",
          "operation_type",
          "start_timestamp"
        ],
        "title": "TraceSpanRequest",
        "description": "Represents a trace span request, that contains the details of certain steps that took part in the interaction."
      },
      "TrainingDatasetGenerationItem": {
        "properties": {
          "schema_type": {
            "type": "string",
            "enum": [
              "GENERATION"
            ],
            "const": "GENERATION",
            "title": "Schema Type",
            "default": "GENERATION"
          },
          "input": {
            "type": "string",
            "title": "Input"
          },
          "output": {
            "type": "string",
            "title": "Output"
          }
        },
        "type": "object",
        "required": [
          "input",
          "output"
        ],
        "title": "TrainingDatasetGenerationItem"
      },
      "TrainingDatasetORMSchemaTypeEnum": {
        "type": "string",
        "enum": [
          "GENERATION",
          "RERANKING_QUESTIONS"
        ],
        "title": "TrainingDatasetORMSchemaTypeEnum"
      },
      "TrainingDatasetResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the dataset"
          },
          "schema_type": {
            "$ref": "#/components/schemas/TrainingDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset, currently only GENERATION is supported"
          },
          "data_source": {
            "$ref": "#/components/schemas/DataSource",
            "description": "The data source of the dataset, used to determine how to parse the location"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          }
        },
        "type": "object",
        "required": [
          "name",
          "schema_type",
          "data_source",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "TrainingDatasetResponse"
      },
      "UiModelSectionType": {
        "type": "string",
        "enum": [
          "PARTNER",
          "OPENSOURCE",
          "CUSTOM"
        ],
        "title": "UiModelSectionType"
      },
      "UninstallPackageRequest": {
        "properties": {
          "package_installation_id": {
            "type": "string",
            "title": "Package Installation Id"
          }
        },
        "type": "object",
        "required": [
          "package_installation_id"
        ],
        "title": "UninstallPackageRequest"
      },
      "UpdateAccountGroupRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Account group name. Must be between 1 and 50 characters after stripping leading and trailing whitespace."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateAccountGroupRequest"
      },
      "UpdateAccountRequestV2": {
        "properties": {
          "account_group_id": {
            "title": "Account Group Id",
            "description": "ID of the account group the account lives under",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "description": "Account group name. Must be between 1 and 50 characters after stripping leading and trailing whitespace.",
            "type": "string"
          }
        },
        "type": "object",
        "title": "UpdateAccountRequestV2"
      },
      "UpdateChatThreadEntryRequest": {
        "properties": {
          "output_text": {
            "title": "Output Text",
            "description": " The output text generated by the application.",
            "type": "string"
          }
        },
        "type": "object",
        "title": "UpdateChatThreadEntryRequest"
      },
      "UpdateChatThreadRequest": {
        "properties": {
          "title": {
            "title": "Title",
            "description": "The title of the chat thread.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "Date when the chat thread is archived, or None to un-archive.",
            "type": "string"
          },
          "thread_metadata": {
            "title": "Thread Metadata",
            "description": "The metadata associated with the thread",
            "can_patch": true,
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "UpdateChatThreadRequest"
      },
      "UpdateParentApplicationSpecRequest": {
        "properties": {
          "account_id": {
            "type": "string",
            "title": "Account Id"
          },
          "parent_application_spec_id": {
            "type": "string",
            "title": "Parent Application Spec Id"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "parent_application_spec_id"
        ],
        "title": "UpdateParentApplicationSpecRequest"
      },
      "UpdateTaskRequest": {
        "properties": {
          "assigned_to": {
            "title": "Assigned To",
            "description": "The ID of the user that the task is assigned to.",
            "type": "string"
          }
        },
        "type": "object",
        "title": "UpdateTaskRequest"
      },
      "UploadJobStatus": {
        "type": "string",
        "enum": [
          "Running",
          "Completed",
          "Failed",
          "Canceled"
        ],
        "title": "UploadJobStatus"
      },
      "UserGroup": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User group ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User group name"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At",
            "description": "ISO datetime of creation"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "User ID of creator",
            "type": "string"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Updated At",
            "description": "ISO datetime of last modification"
          },
          "updated_by_user_id": {
            "title": "Updated By User Id",
            "description": "User ID of last modifier",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "UserGroup"
      },
      "UserGroupRoleRestriction": {
        "properties": {
          "group_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Group Ids",
            "description": "A list of groups for which users must be in at least one of"
          }
        },
        "type": "object",
        "required": [
          "group_ids"
        ],
        "title": "UserGroupRoleRestriction"
      },
      "UserGroupUserMembership": {
        "properties": {
          "user_group_id": {
            "type": "string",
            "title": "User Group Id",
            "description": "User group ID"
          },
          "user": {
            "$ref": "#/components/schemas/UserV2Details",
            "description": "Member user"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "Created At",
            "description": "ISO datetime of creation"
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "User ID of creator",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "user_group_id",
          "user"
        ],
        "title": "UserGroupUserMembership"
      },
      "UserInfo": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User id"
          },
          "first_name": {
            "title": "First Name",
            "description": "First name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "description": "Last name",
            "type": "string"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "E-mail address"
          },
          "access_profiles": {
            "items": {
              "$ref": "#/components/schemas/AccessProfile"
            },
            "type": "array",
            "title": "Access Profiles",
            "description": "A list of access profiles that the selected user has access to"
          },
          "organization_id": {
            "title": "Organization Id",
            "description": "The organization ID of the user.",
            "type": "string"
          },
          "is_organization_admin": {
            "title": "Is Organization Admin",
            "description": "True if the current user is an organization admin.",
            "type": "boolean"
          },
          "preferences": {
            "title": "Preferences",
            "description": "User preferences that can be stored in the Scale GenAI Platform.",
            "type": "object",
            "additionalProperties": true
          },
          "assumed_access_profile": {
            "description": "Present if the user has assumed a specific access profile via JWT token.",
            "$ref": "#/components/schemas/AccessProfile"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "access_profiles"
        ],
        "title": "UserInfo"
      },
      "UserInfoBase": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User id"
          },
          "first_name": {
            "title": "First Name",
            "description": "First name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "description": "Last name",
            "type": "string"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "E-mail address"
          },
          "access_profiles": {
            "items": {
              "$ref": "#/components/schemas/AccessProfile"
            },
            "type": "array",
            "title": "Access Profiles",
            "description": "A list of access profiles that the selected user has access to"
          },
          "organization_id": {
            "title": "Organization Id",
            "description": "The organization ID of the user.",
            "type": "string"
          },
          "is_organization_admin": {
            "title": "Is Organization Admin",
            "description": "True if the current user is an organization admin.",
            "type": "boolean"
          },
          "preferences": {
            "title": "Preferences",
            "description": "User preferences that can be stored in the Scale GenAI Platform.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "access_profiles"
        ],
        "title": "UserInfoBase"
      },
      "UserPreferencesUpdate": {
        "properties": {
          "preferences": {
            "title": "Preferences",
            "description": "User preferences that can be stored in the Scale GenAI Platform.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "title": "UserPreferencesUpdate"
      },
      "UserPreferencesUpdateResponse": {
        "properties": {
          "updated": {
            "type": "boolean",
            "title": "Updated",
            "description": "Whether the user preferences was successfully updated."
          },
          "preferences": {
            "title": "Preferences",
            "description": "User preferences that can be stored in the Scale GenAI Platform.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "updated"
        ],
        "title": "UserPreferencesUpdateResponse"
      },
      "UserRegistrationRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "User password"
          },
          "first_name": {
            "type": "string",
            "title": "First Name",
            "description": "User first name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name",
            "description": "User last name"
          },
          "org": {
            "title": "Org",
            "description": "Organization name",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "first_name",
          "last_name",
          "org"
        ],
        "title": "UserRegistrationRequest"
      },
      "UserResource": {
        "properties": {
          "authorization_resource": {
            "$ref": "#/components/schemas/AuthorizationResource"
          },
          "authorization_principle": {
            "$ref": "#/components/schemas/AuthorizationPrinciple"
          },
          "permission": {
            "type": "string",
            "title": "Permission"
          }
        },
        "type": "object",
        "required": [
          "authorization_resource",
          "authorization_principle",
          "permission"
        ],
        "title": "UserResource"
      },
      "UserV2Details": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "preferences": {
            "title": "Preferences",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "title": "UserV2Details"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ValueConstraint": {
        "properties": {
          "selection_constraint_type": {
            "$ref": "#/components/schemas/SelectionConstraintType"
          },
          "potential_values": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Potential Values"
          },
          "value_type": {
            "$ref": "#/components/schemas/AgentUserInputType"
          },
          "min_items": {
            "title": "Min Items",
            "type": "integer"
          },
          "max_items": {
            "title": "Max Items",
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "selection_constraint_type",
          "potential_values",
          "value_type"
        ],
        "title": "ValueConstraint"
      },
      "VerifyPackageVersionPrerequisitesRequest": {
        "properties": {
          "package_version_id": {
            "type": "string",
            "title": "Package Version Id"
          }
        },
        "type": "object",
        "required": [
          "package_version_id"
        ],
        "title": "VerifyPackageVersionPrerequisitesRequest"
      },
      "VisualizationDescriptor": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "type": {
            "$ref": "#/components/schemas/VisualizationType"
          },
          "metric_id": {
            "$ref": "#/components/schemas/MetricID"
          },
          "metadata": {
            "$ref": "#/components/schemas/VisualizationMetadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "title",
          "type",
          "metric_id"
        ],
        "title": "VisualizationDescriptor"
      },
      "VisualizationMetadata": {
        "properties": {
          "is_variant_specific_metric": {
            "title": "Is Variant Specific Metric",
            "default": false,
            "type": "boolean"
          },
          "label_title_map": {
            "title": "Label Title Map",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label_color_map": {
            "title": "Label Color Map",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object",
        "title": "VisualizationMetadata"
      },
      "VisualizationType": {
        "type": "string",
        "enum": [
          "scalar",
          "bar",
          "stacked_bar",
          "line"
        ],
        "title": "VisualizationType"
      },
      "egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__ChatCompletionRequest": {
        "properties": {
          "top_k": {
            "title": "Top K",
            "description": "Only sample from the top K options for each subsequent token",
            "type": "integer"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far.",
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0
          },
          "function_call": {
            "title": "Function Call",
            "description": "Deprecated in favor of tool_choice. Controls which function is called by the model.",
            "type": "object",
            "additionalProperties": true
          },
          "functions": {
            "title": "Functions",
            "description": "Deprecated in favor of tools. A list of functions the model may generate JSON inputs for.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "logit_bias": {
            "title": "Logit Bias",
            "description": "Modify the likelihood of specified tokens appearing in the completion. Maps tokens to bias values from -100 to 100.",
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object"
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Whether to return log probabilities of the output tokens or not.",
            "type": "boolean"
          },
          "max_completion_tokens": {
            "title": "Max Completion Tokens",
            "description": "An upper bound for the number of tokens that can be generated, including visible output tokens and reasoning tokens.",
            "type": "integer"
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "Deprecated in favor of max_completion_tokens. The maximum number of tokens to generate.",
            "type": "integer"
          },
          "metadata": {
            "title": "Metadata",
            "description": "Developer-defined tags and values used for filtering completions in the dashboard.",
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "modalities": {
            "title": "Modalities",
            "description": "Output types that you would like the model to generate for this request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "n": {
            "title": "N",
            "description": "How many chat completion choices to generate for each input message.",
            "type": "integer"
          },
          "parallel_tool_calls": {
            "title": "Parallel Tool Calls",
            "description": "Whether to enable parallel function calling during tool use.",
            "type": "boolean"
          },
          "prediction": {
            "title": "Prediction",
            "description": "Static predicted output content, such as the content of a text file being regenerated.",
            "type": "object",
            "additionalProperties": true
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize tokens based on whether they appear in the text so far.",
            "type": "number",
            "maximum": 2.0,
            "minimum": -2.0
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "For o1 models only. Constrains effort on reasoning. Values: low, medium, high.",
            "type": "string"
          },
          "response_format": {
            "title": "Response Format",
            "description": "An object specifying the format that the model must output.",
            "type": "object",
            "additionalProperties": true
          },
          "seed": {
            "title": "Seed",
            "description": "If specified, system will attempt to sample deterministically for repeated requests with same seed.",
            "type": "integer"
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop",
            "description": "Up to 4 sequences where the API will stop generating further tokens."
          },
          "store": {
            "title": "Store",
            "description": "Whether to store the output for use in model distillation or evals products.",
            "type": "boolean"
          },
          "stream": {
            "title": "Stream",
            "description": "If true, partial message deltas will be sent as server-sent events.",
            "type": "boolean"
          },
          "stream_options": {
            "title": "Stream Options",
            "description": "Options for streaming response. Only set this when stream is true.",
            "type": "object",
            "additionalProperties": true
          },
          "temperature": {
            "title": "Temperature",
            "description": "What sampling temperature to use. Higher values make output more random, lower more focused.",
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "title": "Tool Choice",
            "description": "Controls which tool is called by the model. Values: none, auto, required, or specific tool."
          },
          "tools": {
            "title": "Tools",
            "description": "A list of tools the model may call. Currently, only functions are supported. Max 128 functions.",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array"
          },
          "top_logprobs": {
            "title": "Top Logprobs",
            "description": "Number of most likely tokens to return at each position, with associated log probability.",
            "type": "integer",
            "maximum": 20.0,
            "minimum": 0.0
          },
          "top_p": {
            "title": "Top P",
            "description": "Alternative to temperature. Only tokens comprising top_p probability mass are considered.",
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0
          },
          "audio": {
            "title": "Audio",
            "description": "Parameters for audio output. Required when audio output is requested with modalities: ['audio'].",
            "type": "object",
            "additionalProperties": true
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model specified as `model_vendor/model`, for example `openai/gpt-4o`"
          },
          "messages": {
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "type": "array",
            "title": "Messages",
            "description": "openai standard message format"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "ChatCompletionRequest"
      },
      "egp_api_backend__server__api__apps__public__routers__inference__inference_model_models__CompletionRequest": {
        "properties": {
          "stream": {
            "title": "Stream",
            "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events.",
            "type": "boolean"
          },
          "best_of": {
            "title": "Best Of",
            "description": "Generates best_of completions server-side and returns the best one. Must be greater than n when used together.",
            "type": "integer"
          },
          "echo": {
            "title": "Echo",
            "description": "Echo back the prompt in addition to the completion",
            "type": "boolean"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text.",
            "type": "number"
          },
          "logit_bias": {
            "title": "Logit Bias",
            "description": "Modify the likelihood of specified tokens appearing in the completion. Maps tokens to bias values from -100 to 100.",
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object"
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Include log probabilities of the most likely tokens. Maximum value is 5.",
            "type": "integer"
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens that can be generated in the completion.",
            "type": "integer"
          },
          "n": {
            "title": "N",
            "description": "How many completions to generate for each prompt.",
            "type": "integer"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their presence in the text so far.",
            "type": "number"
          },
          "seed": {
            "title": "Seed",
            "description": "If specified, attempts to generate deterministic samples. Determinism is not guaranteed.",
            "type": "integer"
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop",
            "description": "Up to 4 sequences where the API will stop generating further tokens."
          },
          "stream_options": {
            "title": "Stream Options",
            "description": "Options for streaming response. Only set this when stream is True.",
            "type": "object",
            "additionalProperties": true
          },
          "suffix": {
            "title": "Suffix",
            "description": "The suffix that comes after a completion of inserted text. Only supported for gpt-3.5-turbo-instruct.",
            "type": "string"
          },
          "temperature": {
            "title": "Temperature",
            "description": "Sampling temperature between 0 and 2. Higher values make output more random, lower more focused.",
            "type": "number"
          },
          "top_p": {
            "title": "Top P",
            "description": "Alternative to temperature. Consider only tokens with top_p probability mass. Range 0-1.",
            "type": "number"
          },
          "user": {
            "title": "User",
            "description": "A unique identifier representing your end-user, which can help OpenAI monitor and detect abuse.",
            "type": "string"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "model specified as `model_vendor/model`, for example `openai/gpt-4o`"
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Prompt",
            "description": "The prompt to generate completions for, encoded as a string"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "title": "CompletionRequest"
      },
      "egp_api_backend__server__api__models__application_models__ApplicationSpecResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Application Spec"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Application Spec"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application spec should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "parent_application_spec_id": {
            "title": "Parent Application Spec Id",
            "description": "Application spec ID of the parent application from which the variants and deployments are inherited.",
            "type": "string"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationSpecResponse"
      },
      "egp_api_backend__server__api__models__application_models__ApplicationVariantResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "title": "Description",
            "description": "Optional description of the application variant",
            "type": "string"
          },
          "configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ApplicationConfigurationV0"
              },
              {
                "$ref": "#/components/schemas/ApplicationAgentsServiceConfiguration"
              },
              {
                "$ref": "#/components/schemas/OfflineApplicationConfiguration"
              }
            ],
            "title": "Configuration"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationSchemaVersion"
          },
          "application_spec_id": {
            "type": "string",
            "title": "Application Spec Id"
          },
          "draft": {
            "type": "boolean",
            "title": "Draft",
            "description": "Boolean to indicate whether the variant is in draft mode",
            "optional_in_request": true
          },
          "published_at": {
            "title": "Published At",
            "description": "The date and time that the variant was published.",
            "type": "string",
            "format": "date-time"
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "The date and time when the entity was last updated in ISO format."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "configuration",
          "version",
          "application_spec_id",
          "draft",
          "account_id",
          "created_at",
          "updated_at"
        ],
        "title": "ApplicationVariantResponse"
      },
      "egp_api_backend__server__api__models__application_models_no_gen__ApplicationSpecResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the Application Spec"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the Application Spec"
          },
          "theme_id": {
            "title": "Theme Id",
            "can_patch": true,
            "type": "string"
          },
          "run_online_evaluation": {
            "title": "Run Online Evaluation",
            "description": "Whether the application spec should run online evaluation, default is `false`",
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false
          },
          "created_by_user_id": {
            "title": "Created By User Id",
            "description": "The user who originally created the entity.",
            "type": "string"
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "id",
          "created_at",
          "account_id"
        ],
        "title": "ApplicationSpecResponse"
      },
      "egp_api_backend__server__api__models__application_models_no_gen__ApplicationVariantResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApplicationVariantV0Response"
          },
          {
            "$ref": "#/components/schemas/ApplicationVariantAgentsServiceResponse"
          },
          {
            "$ref": "#/components/schemas/OfflineApplicationVariantResponse"
          }
        ],
        "title": "ApplicationVariantResponse",
        "discriminator": {
          "propertyName": "version",
          "mapping": {
            "AGENTS_SERVICE": "#/components/schemas/ApplicationVariantAgentsServiceResponse",
            "OFFLINE": "#/components/schemas/OfflineApplicationVariantResponse",
            "V0": "#/components/schemas/ApplicationVariantV0Response"
          }
        }
      },
      "egp_api_backend__server__api__models__egp_models__ArtifactInfo": {
        "properties": {
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id",
            "description": "Unique identifier for the artifact."
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name",
            "description": "Friendly name for the artifact."
          },
          "artifact_uri": {
            "type": "string",
            "title": "Artifact Uri",
            "description": "Location (e.g. URI) of the artifact in the data source."
          },
          "artifact_uri_public": {
            "title": "Artifact Uri Public",
            "description": "Public Location (e.g. URI) of the artifact in the data source.",
            "type": "string"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status of the artifact."
          },
          "status_reason": {
            "title": "Status Reason",
            "description": "Reason for the artifact's status.",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ArtifactSource",
            "description": "Data source of the artifact."
          },
          "chunks_status": {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ChunksStatus",
            "description": "Number of chunks pending, completed, and failed."
          },
          "updated_at": {
            "title": "Updated At",
            "description": "Timestamp at which the artifact was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "description": "Tags associated with the artifact.",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "artifact_id",
          "artifact_name",
          "artifact_uri",
          "status",
          "source",
          "chunks_status",
          "tags"
        ],
        "title": "ArtifactInfo"
      },
      "egp_api_backend__server__api__models__egp_models__ArtifactUploadStatus": {
        "type": "string",
        "enum": [
          "Pending",
          "Completed",
          "Failed",
          "Uploading",
          "Deleting"
        ],
        "title": "ArtifactUploadStatus"
      },
      "egp_api_backend__server__api__models__egp_models__AssistantMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "const": "assistant",
            "title": "Role",
            "description": "The role of the message. Must be set to 'assistant'.\n\nAn assistant message is a message from the AI to the client. It is different from an agent message in that it cannot contain a tool request. It is simply a direct response from the AI to the client.",
            "default": "assistant"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Text response from the assistant"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "Assistant Message"
      },
      "egp_api_backend__server__api__models__egp_models__ChatCompletion": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/ChatMessage"
          },
          "finish_reason": {
            "title": "Finish Reason",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatCompletion"
      },
      "egp_api_backend__server__api__models__egp_models__ChunkUploadStatus": {
        "type": "string",
        "enum": [
          "Embedding",
          "Pending",
          "Completed",
          "Failed",
          "Uploading"
        ],
        "title": "ChunkUploadStatus"
      },
      "egp_api_backend__server__api__models__egp_models__ChunksStatus": {
        "properties": {
          "chunks_completed": {
            "type": "integer",
            "title": "Chunks Completed",
            "description": "Number of chunks uploaded successfully."
          },
          "chunks_pending": {
            "type": "integer",
            "title": "Chunks Pending",
            "description": "Number of chunks awaiting upload."
          },
          "chunks_failed": {
            "type": "integer",
            "title": "Chunks Failed",
            "description": "Number of chunks that failed upload."
          }
        },
        "type": "object",
        "required": [
          "chunks_completed",
          "chunks_pending",
          "chunks_failed"
        ],
        "title": "ChunksStatus"
      },
      "egp_api_backend__server__api__models__egp_models__Completion": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Completion text. If streaming, this field will contain each packet of text."
          },
          "finish_reason": {
            "title": "Finish Reason",
            "description": "Reason the LLM finished generating text.",
            "type": "string"
          },
          "response_metadata": {
            "title": "Response Metadata",
            "description": "Additional metadata returned from the completion response",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "Completion"
      },
      "egp_api_backend__server__api__models__egp_models__ImageDataUserMessageContentParts": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_data"
            ],
            "const": "image_data",
            "title": "Type",
            "default": "image_data"
          },
          "image_data": {
            "$ref": "#/components/schemas/ImageDataSubPart",
            "description": "Specifies inline image data"
          }
        },
        "type": "object",
        "required": [
          "image_data"
        ],
        "title": "ImageDataUserMessageContentParts"
      },
      "egp_api_backend__server__api__models__egp_models__ImageUrlUserMessageContentParts": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "const": "image_url",
            "title": "Type",
            "default": "image_url"
          },
          "image_url": {
            "$ref": "#/components/schemas/ImageUrlSubPart",
            "description": "Specifies the image URL and level of detail. Only supported by OpenAI models"
          }
        },
        "type": "object",
        "required": [
          "image_url"
        ],
        "title": "ImageUrlUserMessageContentParts"
      },
      "egp_api_backend__server__api__models__egp_models__SystemMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "const": "system",
            "title": "Role",
            "description": "The role of the message. Must be set to 'system'.\n\nA system message is different from other messages in that it does not originate from a party engaged in a user/AI conversation. Instead, it is a message that is injected by either the application or system to guide the conversation. For example, a system message may be used as initial instructions for an AI entity or to tell the AI that it did not do something correctly.",
            "default": "system"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Text input from the system."
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "System Message"
      },
      "egp_api_backend__server__api__models__egp_models__UserMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "const": "user",
            "title": "Role",
            "description": "The role of the message. Must be set to 'user'.\n\nA user message is a message from the user to the AI. This should be the message used to send end user input to the AI.",
            "default": "user"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__UserMessageContentParts"
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "Input from the user. Can either be text or a list of content parts. Not all models support image content parts, or multiple parts."
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "User Message"
      },
      "egp_api_backend__server__api__models__egp_models__UserMessageContentParts": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextUserMessageContentParts"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ImageUrlUserMessageContentParts"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ImageDataUserMessageContentParts"
          }
        ],
        "title": "UserMessageContentParts",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "image_data": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ImageDataUserMessageContentParts",
            "image_url": "#/components/schemas/egp_api_backend__server__api__models__egp_models__ImageUrlUserMessageContentParts",
            "text": "#/components/schemas/TextUserMessageContentParts"
          }
        }
      },
      "egp_api_backend__server__api__models__eval_models__TestCaseVersionResponse": {
        "properties": {
          "evaluation_dataset_id": {
            "type": "string",
            "title": "Evaluation Dataset Id",
            "description": "The ID of the associated evaluation dataset."
          },
          "schema_type": {
            "$ref": "#/components/schemas/EvaluationDatasetORMSchemaTypeEnum",
            "description": "The schema type of the dataset.",
            "can_patch": false
          },
          "test_case_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ArtifactSchemaGeneration"
              },
              {
                "$ref": "#/components/schemas/SchemaGenerationBase"
              },
              {
                "$ref": "#/components/schemas/SchemaFlexible"
              }
            ],
            "title": "Test Case Data",
            "description": "The data for the test case in a format matching the provided schema_type"
          },
          "chat_history": {
            "title": "Chat History",
            "description": "Used for tracking previous chat interactions for multi-chat test cases",
            "type": "object",
            "additionalProperties": true
          },
          "autogenerated": {
            "type": "boolean",
            "title": "Autogenerated",
            "description": "Boolean to track whether or not the test case is autogenerated",
            "can_patch": false
          },
          "test_case_metadata": {
            "title": "Test Case Metadata",
            "description": "Metadata for the test case",
            "type": "object",
            "additionalProperties": true
          },
          "invalidated_at": {
            "title": "Invalidated At",
            "description": "The date and time when the entity was overwritten or deleted in ISO format.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the entity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The date and time when the entity was created in ISO format."
          },
          "account_id": {
            "type": "string",
            "title": "Account Id",
            "description": "The ID of the account that owns the given entity.",
            "can_patch": false,
            "optional_in_request": true
          },
          "created_by_user_id": {
            "type": "string",
            "title": "Created By User Id",
            "description": "The user who originally created the entity."
          },
          "archived_at": {
            "title": "Archived At",
            "description": "The date and time when the entity was archived in ISO format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "evaluation_dataset_id",
          "schema_type",
          "test_case_data",
          "autogenerated",
          "id",
          "created_at",
          "account_id",
          "created_by_user_id"
        ],
        "title": "TestCaseVersionResponse"
      },
      "egp_api_backend__server__api__models__eval_models_no_gen__TestCaseVersionResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GenerationTestCaseVersionResponse"
          },
          {
            "$ref": "#/components/schemas/FlexibleTestCaseVersionResponse"
          }
        ],
        "title": "TestCaseVersionResponse",
        "discriminator": {
          "propertyName": "schema_type",
          "mapping": {
            "FLEXIBLE": "#/components/schemas/FlexibleTestCaseVersionResponse",
            "GENERATION": "#/components/schemas/GenerationTestCaseVersionResponse"
          }
        }
      },
      "egp_api_backend__server__api__models__inference_models__ChatCompletion": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "chat.completion"
            ],
            "const": "chat.completion",
            "title": "Object",
            "default": "chat.completion"
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion__Choice"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "service_tier": {
            "title": "Service Tier",
            "type": "string",
            "enum": [
              "scale",
              "default"
            ]
          },
          "system_fingerprint": {
            "title": "System Fingerprint",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "choices",
          "created",
          "model"
        ]
      },
      "egp_api_backend__server__api__models__inference_models__Completion": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "enum": [
              "text_completion"
            ],
            "const": "text_completion",
            "title": "Object",
            "default": "text_completion"
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/CompletionChoice"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "integer",
            "title": "Created"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "system_fingerprint": {
            "title": "System Fingerprint",
            "type": "string"
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "id",
          "choices",
          "created",
          "model"
        ]
      },
      "egp_api_backend__server__api__models__inference_models_api_models_no_gen__LaunchVendorConfiguration": {
        "properties": {
          "model_image": {
            "$ref": "#/components/schemas/LaunchModelBundleConfiguration"
          },
          "model_infra": {
            "$ref": "#/components/schemas/LaunchModelEndpointConfiguration"
          }
        },
        "type": "object",
        "required": [
          "model_image",
          "model_infra"
        ],
        "title": "LaunchVendorConfiguration"
      },
      "egp_api_backend__server__internal__entities__ArtifactInfo": {
        "properties": {
          "artifact_id": {
            "type": "string",
            "title": "Artifact Id"
          },
          "artifact_name": {
            "type": "string",
            "title": "Artifact Name"
          },
          "artifact_uri": {
            "type": "string",
            "title": "Artifact Uri"
          },
          "artifact_uri_public": {
            "title": "Artifact Uri Public",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ArtifactUploadStatus"
          },
          "status_reason": {
            "title": "Status Reason",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "chunks_status": {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ChunksStatus"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "tags": {
            "title": "Tags",
            "type": "object",
            "additionalProperties": true
          }
        },
        "type": "object",
        "required": [
          "artifact_id",
          "artifact_name",
          "artifact_uri",
          "status",
          "source",
          "chunks_status"
        ],
        "title": "ArtifactInfo"
      },
      "egp_api_backend__server__internal__entities__ArtifactUploadStatus": {
        "type": "string",
        "enum": [
          "Pending",
          "Chunking",
          "Uploading",
          "Completed",
          "Failed",
          "Deleting",
          "Canceled",
          "Embedding"
        ],
        "title": "ArtifactUploadStatus"
      },
      "egp_api_backend__server__internal__entities__AssistantMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "const": "assistant",
            "title": "Role",
            "default": "assistant"
          },
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "AssistantMessage"
      },
      "egp_api_backend__server__internal__entities__ChunkUploadStatus": {
        "type": "string",
        "enum": [
          "Pending",
          "Completed",
          "Failed"
        ],
        "title": "ChunkUploadStatus"
      },
      "egp_api_backend__server__internal__entities__ChunksStatus": {
        "properties": {
          "chunks_completed": {
            "type": "integer",
            "title": "Chunks Completed"
          },
          "chunks_pending": {
            "type": "integer",
            "title": "Chunks Pending"
          },
          "chunks_failed": {
            "type": "integer",
            "title": "Chunks Failed"
          }
        },
        "type": "object",
        "required": [
          "chunks_completed",
          "chunks_pending",
          "chunks_failed"
        ],
        "title": "ChunksStatus"
      },
      "egp_api_backend__server__internal__entities__ImageDataUserMessageContentParts": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_data"
            ],
            "const": "image_data",
            "title": "Type",
            "default": "image_data"
          },
          "image_data": {
            "$ref": "#/components/schemas/ImageDataSubPart"
          }
        },
        "type": "object",
        "required": [
          "image_data"
        ],
        "title": "ImageDataUserMessageContentParts"
      },
      "egp_api_backend__server__internal__entities__ImageUrlUserMessageContentParts": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "const": "image_url",
            "title": "Type",
            "default": "image_url"
          },
          "image_url": {
            "$ref": "#/components/schemas/ImageUrlSubPart"
          }
        },
        "type": "object",
        "required": [
          "image_url"
        ],
        "title": "ImageUrlUserMessageContentParts"
      },
      "egp_api_backend__server__internal__entities__SystemMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "const": "system",
            "title": "Role",
            "default": "system"
          },
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "SystemMessage"
      },
      "egp_api_backend__server__internal__entities__UserMessage": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "const": "user",
            "title": "Role",
            "default": "user"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__UserMessageContentParts"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "UserMessage"
      },
      "egp_api_backend__server__internal__entities__UserMessageContentParts": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextUserMessageContentParts"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ImageUrlUserMessageContentParts"
          },
          {
            "$ref": "#/components/schemas/egp_api_backend__server__internal__entities__ImageDataUserMessageContentParts"
          }
        ],
        "title": "UserMessageContentParts",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "image_data": "#/components/schemas/egp_api_backend__server__internal__entities__ImageDataUserMessageContentParts",
            "image_url": "#/components/schemas/egp_api_backend__server__internal__entities__ImageUrlUserMessageContentParts",
            "text": "#/components/schemas/TextUserMessageContentParts"
          }
        }
      },
      "egp_api_backend__server__utils__model_schemas__completions__ChatCompletionRequest": {
        "properties": {
          "model_request_parameters": {
            "$ref": "#/components/schemas/ParameterBindings"
          },
          "temperature": {
            "title": "Temperature",
            "description": "What sampling temperature to use, between [0, 2]. Higher values like 1.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Setting temperature=0.0 will enable fully deterministic (greedy) sampling.NOTE: The temperature parameter range for some model is limited to [0, 1] if the given value is above the available range, it defaults to the max value. Temperature is ignored for OpenAI reasoning models.",
            "default": 0.2,
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "stop_sequences": {
            "title": "Stop Sequences",
            "description": "List of up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 4
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. If not, specified, max_tokens will be determined based on the model used: \n| Model API family | Model API default | EGP applied default |\n| --- | --- | --- |\n| OpenAI Completions | [`16`](https://platform.openai.com/docs/api-reference/completions/create#max_tokens) | `context window - prompt size` |\n| OpenAI Chat Completions | [`context window - prompt size`](https://platform.openai.com/docs/api-reference/chat/create#max_tokens) | `context window - prompt size` |\n| LLM Engine | [`max_new_tokens`](https://github.com/scaleapi/launch-python-client/blob/207adced1c88c1c2907266fa9dd1f1ff3ec0ea5b/launch/client.py#L2910) parameter is required | `100` |\n| Anthropic Claude 2 | [`max_tokens_to_sample`](https://docs.anthropic.com/claude/reference/complete_post) parameter is required | `10000` |\n",
            "type": "integer"
          },
          "top_p": {
            "title": "Top P",
            "description": "The cumulative probability cutoff for token selection. Lower values mean sampling from a smaller, more top-weighted nucleus. Available for models provided by Google, LLM Engine, and OpenAI.",
            "type": "number"
          },
          "top_k": {
            "title": "Top K",
            "description": "Sample from the k most likely next tokens at each step. Lower k focuses on higher probability tokens. Available for models provided by Google and LLM Engine.",
            "type": "number"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Penalize tokens based on how much they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Penalize tokens based on if they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "stream": {
            "title": "Stream",
            "description": "Flag indicating whether to stream the completion response",
            "default": false,
            "type": "boolean"
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Whether to return logprobs. Currently only supported for llmengine chat models.",
            "type": "boolean"
          },
          "top_logprobs": {
            "title": "Top Logprobs",
            "description": "Number of top logprobs to return. Currently only supported for llmengine chat models.",
            "type": "integer"
          },
          "chat_template": {
            "title": "Chat Template",
            "description": "The chat template to use for the completion. Currently only supported for llmengine chat models.",
            "type": "string"
          },
          "chat_template_kwargs": {
            "title": "Chat Template Kwargs",
            "description": "Additional keyword arguments for the chat template. Currently only supported for llmengine chat models.",
            "type": "object",
            "additionalProperties": true
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "The reasoning effort to use for the completion. Currently only supported for openai models.",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "chat_history": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageV2"
            },
            "type": "array",
            "title": "Chat History",
            "description": "Chat history entries with roles and messages. If there's no history, pass an empty list."
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "New user prompt. This will be sent to the model with a user role."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "chat_history",
          "prompt"
        ],
        "title": "ChatCompletionRequest",
        "description": "Represents a chat completion request.\n\nAttributes:\n    chat_history (List[Message]): Chat history"
      },
      "egp_api_backend__server__utils__model_schemas__completions__ChatCompletionTokenLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "title": "Bytes",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          },
          "top_logprobs": {
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__TopLogprob"
            },
            "type": "array",
            "title": "Top Logprobs"
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob",
          "top_logprobs"
        ],
        "title": "ChatCompletionTokenLogprob"
      },
      "egp_api_backend__server__utils__model_schemas__completions__Choice": {
        "properties": {
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "logprobs": {
            "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__ChoiceLogprobs"
          }
        },
        "type": "object",
        "required": [
          "index"
        ],
        "title": "Choice"
      },
      "egp_api_backend__server__utils__model_schemas__completions__ChoiceLogprobs": {
        "properties": {
          "content": {
            "title": "Content",
            "items": {
              "$ref": "#/components/schemas/egp_api_backend__server__utils__model_schemas__completions__ChatCompletionTokenLogprob"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "ChoiceLogprobs"
      },
      "egp_api_backend__server__utils__model_schemas__completions__CompletionRequest": {
        "properties": {
          "model_request_parameters": {
            "$ref": "#/components/schemas/ParameterBindings"
          },
          "temperature": {
            "title": "Temperature",
            "description": "What sampling temperature to use, between [0, 2]. Higher values like 1.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. Setting temperature=0.0 will enable fully deterministic (greedy) sampling.NOTE: The temperature parameter range for some model is limited to [0, 1] if the given value is above the available range, it defaults to the max value. Temperature is ignored for OpenAI reasoning models.",
            "default": 0.2,
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0
          },
          "stop_sequences": {
            "title": "Stop Sequences",
            "description": "List of up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 4
          },
          "max_tokens": {
            "title": "Max Tokens",
            "description": "The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. If not, specified, max_tokens will be determined based on the model used: \n| Model API family | Model API default | EGP applied default |\n| --- | --- | --- |\n| OpenAI Completions | [`16`](https://platform.openai.com/docs/api-reference/completions/create#max_tokens) | `context window - prompt size` |\n| OpenAI Chat Completions | [`context window - prompt size`](https://platform.openai.com/docs/api-reference/chat/create#max_tokens) | `context window - prompt size` |\n| LLM Engine | [`max_new_tokens`](https://github.com/scaleapi/launch-python-client/blob/207adced1c88c1c2907266fa9dd1f1ff3ec0ea5b/launch/client.py#L2910) parameter is required | `100` |\n| Anthropic Claude 2 | [`max_tokens_to_sample`](https://docs.anthropic.com/claude/reference/complete_post) parameter is required | `10000` |\n",
            "type": "integer"
          },
          "top_p": {
            "title": "Top P",
            "description": "The cumulative probability cutoff for token selection. Lower values mean sampling from a smaller, more top-weighted nucleus. Available for models provided by Google, LLM Engine, and OpenAI.",
            "type": "number"
          },
          "top_k": {
            "title": "Top K",
            "description": "Sample from the k most likely next tokens at each step. Lower k focuses on higher probability tokens. Available for models provided by Google and LLM Engine.",
            "type": "number"
          },
          "frequency_penalty": {
            "title": "Frequency Penalty",
            "description": "Penalize tokens based on how much they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "presence_penalty": {
            "title": "Presence Penalty",
            "description": "Penalize tokens based on if they have already appeared in the text. Positive values encourage the model to generate new tokens and negative values encourage the model to repeat tokens. Available for models provided by LLM Engine and OpenAI.",
            "type": "number"
          },
          "stream": {
            "title": "Stream",
            "description": "Flag indicating whether to stream the completion response",
            "default": false,
            "type": "boolean"
          },
          "logprobs": {
            "title": "Logprobs",
            "description": "Whether to return logprobs. Currently only supported for llmengine chat models.",
            "type": "boolean"
          },
          "top_logprobs": {
            "title": "Top Logprobs",
            "description": "Number of top logprobs to return. Currently only supported for llmengine chat models.",
            "type": "integer"
          },
          "chat_template": {
            "title": "Chat Template",
            "description": "The chat template to use for the completion. Currently only supported for llmengine chat models.",
            "type": "string"
          },
          "chat_template_kwargs": {
            "title": "Chat Template Kwargs",
            "description": "Additional keyword arguments for the chat template. Currently only supported for llmengine chat models.",
            "type": "object",
            "additionalProperties": true
          },
          "reasoning_effort": {
            "title": "Reasoning Effort",
            "description": "The reasoning effort to use for the completion. Currently only supported for openai models.",
            "type": "string",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "prompts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Prompts"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "prompts"
        ],
        "title": "CompletionRequest"
      },
      "egp_api_backend__server__utils__model_schemas__completions__TopLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "title": "Bytes",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob"
        ],
        "title": "TopLogprob"
      },
      "egp_api_backend__server__utils__model_schemas__model_vendor_configuration__LaunchVendorConfiguration": {
        "properties": {
          "vendor": {
            "type": "string",
            "enum": [
              "LAUNCH"
            ],
            "const": "LAUNCH",
            "title": "Vendor",
            "default": "LAUNCH"
          },
          "bundle_config": {
            "$ref": "#/components/schemas/ModelBundleConfiguration"
          },
          "endpoint_config": {
            "$ref": "#/components/schemas/CreateModelEndpointConfig"
          },
          "fine_tuning_job_bundle_config": {
            "$ref": "#/components/schemas/FineTuningBundleConfiguration"
          }
        },
        "type": "object",
        "required": [
          "bundle_config"
        ],
        "title": "LaunchVendorConfiguration",
        "description": "Configuration for launching a model using the Launch service which is an internal and\nself-hosted service developed by Scale that deploys models on Kubernetes.\n\nAttributes:\n    vendor: The vendor of the model template\n    bundle_config: The bundle configuration of the model template\n    endpoint_config: The endpoint configuration of the model template"
      },
      "openai__types__chat__chat_completion__Choice": {
        "properties": {
          "finish_reason": {
            "type": "string",
            "enum": [
              "stop",
              "length",
              "tool_calls",
              "content_filter",
              "function_call"
            ],
            "title": "Finish Reason"
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "logprobs": {
            "$ref": "#/components/schemas/openai__types__chat__chat_completion__ChoiceLogprobs"
          },
          "message": {
            "$ref": "#/components/schemas/ChatCompletionMessage"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "finish_reason",
          "index",
          "message"
        ],
        "title": "Choice"
      },
      "openai__types__chat__chat_completion__ChoiceLogprobs": {
        "properties": {
          "content": {
            "title": "Content",
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_token_logprob__ChatCompletionTokenLogprob"
            },
            "type": "array"
          },
          "refusal": {
            "title": "Refusal",
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_token_logprob__ChatCompletionTokenLogprob"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ChoiceLogprobs"
      },
      "openai__types__chat__chat_completion_chunk__Choice": {
        "properties": {
          "delta": {
            "$ref": "#/components/schemas/ChoiceDelta"
          },
          "finish_reason": {
            "title": "Finish Reason",
            "type": "string",
            "enum": [
              "stop",
              "length",
              "tool_calls",
              "content_filter",
              "function_call"
            ]
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "logprobs": {
            "$ref": "#/components/schemas/openai__types__chat__chat_completion_chunk__ChoiceLogprobs"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "delta",
          "index"
        ],
        "title": "Choice"
      },
      "openai__types__chat__chat_completion_chunk__ChoiceLogprobs": {
        "properties": {
          "content": {
            "title": "Content",
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_token_logprob__ChatCompletionTokenLogprob"
            },
            "type": "array"
          },
          "refusal": {
            "title": "Refusal",
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_token_logprob__ChatCompletionTokenLogprob"
            },
            "type": "array"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "title": "ChoiceLogprobs"
      },
      "openai__types__chat__chat_completion_token_logprob__ChatCompletionTokenLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "title": "Bytes",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          },
          "top_logprobs": {
            "items": {
              "$ref": "#/components/schemas/openai__types__chat__chat_completion_token_logprob__TopLogprob"
            },
            "type": "array",
            "title": "Top Logprobs"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "token",
          "logprob",
          "top_logprobs"
        ],
        "title": "ChatCompletionTokenLogprob"
      },
      "openai__types__chat__chat_completion_token_logprob__TopLogprob": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "bytes": {
            "title": "Bytes",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "token",
          "logprob"
        ],
        "title": "TopLogprob"
      },
      "FileUploadRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "FileUploadRequest"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}
